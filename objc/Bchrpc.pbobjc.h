// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bchrpc.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Block;
@class BlockInfo;
@class Block_TransactionData;
@class GetMempoolResponse_TransactionData;
@class MempoolTransaction;
@class Transaction;
@class TransactionFilter;
@class Transaction_Input;
@class Transaction_Input_Outpoint;
@class Transaction_Output;
@class UnspentOutput;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum GetBlockchainInfoResponse_BitcoinNet

/** Bitcoin network types */
typedef GPB_ENUM(GetBlockchainInfoResponse_BitcoinNet) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  GetBlockchainInfoResponse_BitcoinNet_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Live public network with monetary value. */
  GetBlockchainInfoResponse_BitcoinNet_Mainnet = 0,

  /** An isolated environment for automated testing. */
  GetBlockchainInfoResponse_BitcoinNet_Regtest = 1,

  /**
   * A public environment where monetary value is agreed to be zero,
   * and some checks for transaction conformity are disabled.
   **/
  GetBlockchainInfoResponse_BitcoinNet_Testnet3 = 2,

  /**
   * Private testnets for large scale simulations (or stress testing),
   * where a specified list of nodes is used, rather than node discovery.
   **/
  GetBlockchainInfoResponse_BitcoinNet_Simnet = 3,
};

GPBEnumDescriptor *GetBlockchainInfoResponse_BitcoinNet_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GetBlockchainInfoResponse_BitcoinNet_IsValidValue(int32_t value);

#pragma mark - Enum BlockNotification_Type

/** State of the block in relation to the chain. */
typedef GPB_ENUM(BlockNotification_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  BlockNotification_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  BlockNotification_Type_Connected = 0,
  BlockNotification_Type_Disconnected = 1,
};

GPBEnumDescriptor *BlockNotification_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BlockNotification_Type_IsValidValue(int32_t value);

#pragma mark - Enum TransactionNotification_Type

/** State of the transaction acceptance. */
typedef GPB_ENUM(TransactionNotification_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TransactionNotification_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** A transaction in mempool. */
  TransactionNotification_Type_Unconfirmed = 0,

  /** A transaction in a block. */
  TransactionNotification_Type_Confirmed = 1,
};

GPBEnumDescriptor *TransactionNotification_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TransactionNotification_Type_IsValidValue(int32_t value);

#pragma mark - BchrpcRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface BchrpcRoot : GPBRootObject
@end

#pragma mark - GetMempoolInfoRequest

GPB_FINAL @interface GetMempoolInfoRequest : GPBMessage

@end

#pragma mark - GetMempoolInfoResponse

typedef GPB_ENUM(GetMempoolInfoResponse_FieldNumber) {
  GetMempoolInfoResponse_FieldNumber_Size = 1,
  GetMempoolInfoResponse_FieldNumber_Bytes = 2,
};

GPB_FINAL @interface GetMempoolInfoResponse : GPBMessage

/** The count of transactions in the mempool */
@property(nonatomic, readwrite) uint32_t size;

/** The size in bytes of all transactions in the mempool */
@property(nonatomic, readwrite) uint32_t bytes;

@end

#pragma mark - GetMempoolRequest

typedef GPB_ENUM(GetMempoolRequest_FieldNumber) {
  GetMempoolRequest_FieldNumber_FullTransactions = 1,
};

GPB_FINAL @interface GetMempoolRequest : GPBMessage

/**
 * When `full_transactions` is true, full transaction data is provided
 * instead of just transaction hashes. Default is false.
 **/
@property(nonatomic, readwrite) BOOL fullTransactions;

@end

#pragma mark - GetMempoolResponse

typedef GPB_ENUM(GetMempoolResponse_FieldNumber) {
  GetMempoolResponse_FieldNumber_TransactionDataArray = 1,
};

GPB_FINAL @interface GetMempoolResponse : GPBMessage

/** List of unconfirmed transactions. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GetMempoolResponse_TransactionData*> *transactionDataArray;
/** The number of items in @c transactionDataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger transactionDataArray_Count;

@end

#pragma mark - GetMempoolResponse_TransactionData

typedef GPB_ENUM(GetMempoolResponse_TransactionData_FieldNumber) {
  GetMempoolResponse_TransactionData_FieldNumber_TransactionHash = 1,
  GetMempoolResponse_TransactionData_FieldNumber_Transaction = 2,
};

typedef GPB_ENUM(GetMempoolResponse_TransactionData_TxidsOrTxs_OneOfCase) {
  GetMempoolResponse_TransactionData_TxidsOrTxs_OneOfCase_GPBUnsetOneOfCase = 0,
  GetMempoolResponse_TransactionData_TxidsOrTxs_OneOfCase_TransactionHash = 1,
  GetMempoolResponse_TransactionData_TxidsOrTxs_OneOfCase_Transaction = 2,
};

GPB_FINAL @interface GetMempoolResponse_TransactionData : GPBMessage

/** Either one of the two following is provided, depending on the request. */
@property(nonatomic, readonly) GetMempoolResponse_TransactionData_TxidsOrTxs_OneOfCase txidsOrTxsOneOfCase;

/** The transaction hash, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *transactionHash;

/** The transaction data. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction *transaction;

@end

/**
 * Clears whatever value was set for the oneof 'txidsOrTxs'.
 **/
void GetMempoolResponse_TransactionData_ClearTxidsOrTxsOneOfCase(GetMempoolResponse_TransactionData *message);

#pragma mark - GetBlockchainInfoRequest

GPB_FINAL @interface GetBlockchainInfoRequest : GPBMessage

@end

#pragma mark - GetBlockchainInfoResponse

typedef GPB_ENUM(GetBlockchainInfoResponse_FieldNumber) {
  GetBlockchainInfoResponse_FieldNumber_BitcoinNet = 1,
  GetBlockchainInfoResponse_FieldNumber_BestHeight = 2,
  GetBlockchainInfoResponse_FieldNumber_BestBlockHash = 3,
  GetBlockchainInfoResponse_FieldNumber_Difficulty = 4,
  GetBlockchainInfoResponse_FieldNumber_MedianTime = 5,
  GetBlockchainInfoResponse_FieldNumber_TxIndex = 6,
  GetBlockchainInfoResponse_FieldNumber_AddrIndex = 7,
};

GPB_FINAL @interface GetBlockchainInfoResponse : GPBMessage

/** Which network the node is operating on. */
@property(nonatomic, readwrite) GetBlockchainInfoResponse_BitcoinNet bitcoinNet;

/** The current number of blocks on the longest chain. */
@property(nonatomic, readwrite) int32_t bestHeight;

/** The hash of the best (tip) block in the most-work fully-validated chain, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *bestBlockHash;

/** Threshold for adding new blocks. */
@property(nonatomic, readwrite) double difficulty;

/** Median time of the last 11 blocks. */
@property(nonatomic, readwrite) int64_t medianTime;

/** When `tx_index` is true, the node has full transaction index enabled. */
@property(nonatomic, readwrite) BOOL txIndex;

/**
 * When `addr_index` is true, the node has address index enabled and may
 * be used with call related by address.
 **/
@property(nonatomic, readwrite) BOOL addrIndex;

@end

/**
 * Fetches the raw value of a @c GetBlockchainInfoResponse's @c bitcoinNet property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GetBlockchainInfoResponse_BitcoinNet_RawValue(GetBlockchainInfoResponse *message);
/**
 * Sets the raw value of an @c GetBlockchainInfoResponse's @c bitcoinNet property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGetBlockchainInfoResponse_BitcoinNet_RawValue(GetBlockchainInfoResponse *message, int32_t value);

#pragma mark - GetBlockInfoRequest

typedef GPB_ENUM(GetBlockInfoRequest_FieldNumber) {
  GetBlockInfoRequest_FieldNumber_Hash_p = 1,
  GetBlockInfoRequest_FieldNumber_Height = 2,
};

typedef GPB_ENUM(GetBlockInfoRequest_HashOrHeight_OneOfCase) {
  GetBlockInfoRequest_HashOrHeight_OneOfCase_GPBUnsetOneOfCase = 0,
  GetBlockInfoRequest_HashOrHeight_OneOfCase_Hash_p = 1,
  GetBlockInfoRequest_HashOrHeight_OneOfCase_Height = 2,
};

GPB_FINAL @interface GetBlockInfoRequest : GPBMessage

@property(nonatomic, readonly) GetBlockInfoRequest_HashOrHeight_OneOfCase hashOrHeightOneOfCase;

/** The block hash as a byte array or base64 encoded string, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The block number. */
@property(nonatomic, readwrite) int32_t height;

@end

/**
 * Clears whatever value was set for the oneof 'hashOrHeight'.
 **/
void GetBlockInfoRequest_ClearHashOrHeightOneOfCase(GetBlockInfoRequest *message);

#pragma mark - GetBlockInfoResponse

typedef GPB_ENUM(GetBlockInfoResponse_FieldNumber) {
  GetBlockInfoResponse_FieldNumber_Info = 1,
};

GPB_FINAL @interface GetBlockInfoResponse : GPBMessage

/** Marshaled block header data, as well as metadata. */
@property(nonatomic, readwrite, strong, null_resettable) BlockInfo *info;
/** Test to see if @c info has been set. */
@property(nonatomic, readwrite) BOOL hasInfo;

@end

#pragma mark - GetBlockRequest

typedef GPB_ENUM(GetBlockRequest_FieldNumber) {
  GetBlockRequest_FieldNumber_Hash_p = 1,
  GetBlockRequest_FieldNumber_Height = 2,
  GetBlockRequest_FieldNumber_FullTransactions = 3,
};

typedef GPB_ENUM(GetBlockRequest_HashOrHeight_OneOfCase) {
  GetBlockRequest_HashOrHeight_OneOfCase_GPBUnsetOneOfCase = 0,
  GetBlockRequest_HashOrHeight_OneOfCase_Hash_p = 1,
  GetBlockRequest_HashOrHeight_OneOfCase_Height = 2,
};

GPB_FINAL @interface GetBlockRequest : GPBMessage

@property(nonatomic, readonly) GetBlockRequest_HashOrHeight_OneOfCase hashOrHeightOneOfCase;

/** The block hash as a byte array or base64 encoded string, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The block number. */
@property(nonatomic, readwrite) int32_t height;

/**
 * When `full_transactions` is true, full transactions are returned
 * instead of just hashes. Default is false.
 **/
@property(nonatomic, readwrite) BOOL fullTransactions;

@end

/**
 * Clears whatever value was set for the oneof 'hashOrHeight'.
 **/
void GetBlockRequest_ClearHashOrHeightOneOfCase(GetBlockRequest *message);

#pragma mark - GetBlockResponse

typedef GPB_ENUM(GetBlockResponse_FieldNumber) {
  GetBlockResponse_FieldNumber_Block = 1,
};

GPB_FINAL @interface GetBlockResponse : GPBMessage

/** A marshaled block. */
@property(nonatomic, readwrite, strong, null_resettable) Block *block;
/** Test to see if @c block has been set. */
@property(nonatomic, readwrite) BOOL hasBlock;

@end

#pragma mark - GetRawBlockRequest

typedef GPB_ENUM(GetRawBlockRequest_FieldNumber) {
  GetRawBlockRequest_FieldNumber_Hash_p = 1,
  GetRawBlockRequest_FieldNumber_Height = 2,
};

typedef GPB_ENUM(GetRawBlockRequest_HashOrHeight_OneOfCase) {
  GetRawBlockRequest_HashOrHeight_OneOfCase_GPBUnsetOneOfCase = 0,
  GetRawBlockRequest_HashOrHeight_OneOfCase_Hash_p = 1,
  GetRawBlockRequest_HashOrHeight_OneOfCase_Height = 2,
};

GPB_FINAL @interface GetRawBlockRequest : GPBMessage

@property(nonatomic, readonly) GetRawBlockRequest_HashOrHeight_OneOfCase hashOrHeightOneOfCase;

/** The block hash as a byte array or base64 encoded string, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The block number. */
@property(nonatomic, readwrite) int32_t height;

@end

/**
 * Clears whatever value was set for the oneof 'hashOrHeight'.
 **/
void GetRawBlockRequest_ClearHashOrHeightOneOfCase(GetRawBlockRequest *message);

#pragma mark - GetRawBlockResponse

typedef GPB_ENUM(GetRawBlockResponse_FieldNumber) {
  GetRawBlockResponse_FieldNumber_Block = 1,
};

GPB_FINAL @interface GetRawBlockResponse : GPBMessage

/** Raw block data (with header) serialized according the the bitcoin block protocol. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *block;

@end

#pragma mark - GetBlockFilterRequest

typedef GPB_ENUM(GetBlockFilterRequest_FieldNumber) {
  GetBlockFilterRequest_FieldNumber_Hash_p = 1,
  GetBlockFilterRequest_FieldNumber_Height = 2,
};

typedef GPB_ENUM(GetBlockFilterRequest_HashOrHeight_OneOfCase) {
  GetBlockFilterRequest_HashOrHeight_OneOfCase_GPBUnsetOneOfCase = 0,
  GetBlockFilterRequest_HashOrHeight_OneOfCase_Hash_p = 1,
  GetBlockFilterRequest_HashOrHeight_OneOfCase_Height = 2,
};

GPB_FINAL @interface GetBlockFilterRequest : GPBMessage

@property(nonatomic, readonly) GetBlockFilterRequest_HashOrHeight_OneOfCase hashOrHeightOneOfCase;

/** The block hash as a byte array or base64 encoded string, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The block number. */
@property(nonatomic, readwrite) int32_t height;

@end

/**
 * Clears whatever value was set for the oneof 'hashOrHeight'.
 **/
void GetBlockFilterRequest_ClearHashOrHeightOneOfCase(GetBlockFilterRequest *message);

#pragma mark - GetBlockFilterResponse

typedef GPB_ENUM(GetBlockFilterResponse_FieldNumber) {
  GetBlockFilterResponse_FieldNumber_Filter = 1,
};

GPB_FINAL @interface GetBlockFilterResponse : GPBMessage

/**
 * A compact filter matching input outpoints and public key scripts contained
 * in a block (encoded according to BIP158).
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *filter;

@end

#pragma mark - GetHeadersRequest

typedef GPB_ENUM(GetHeadersRequest_FieldNumber) {
  GetHeadersRequest_FieldNumber_BlockLocatorHashesArray = 1,
  GetHeadersRequest_FieldNumber_StopHash = 2,
};

/**
 * Request headers using a list of known block hashes.
 **/
GPB_FINAL @interface GetHeadersRequest : GPBMessage

/**
 * A list of block hashes known to the client (most recent first) which
 * is exponentially sparser toward the genesis block (0), little-endian.
 * Common practice is to include all of the last 10 blocks, and then
 * 9 blocks for each order of ten thereafter.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *blockLocatorHashesArray;
/** The number of items in @c blockLocatorHashesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger blockLocatorHashesArray_Count;

/**
 * hash of the latest desired block header, little-endian; only blocks
 * occurring before the stop will be returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *stopHash;

@end

#pragma mark - GetHeadersResponse

typedef GPB_ENUM(GetHeadersResponse_FieldNumber) {
  GetHeadersResponse_FieldNumber_HeadersArray = 1,
};

GPB_FINAL @interface GetHeadersResponse : GPBMessage

/** List of block headers. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<BlockInfo*> *headersArray;
/** The number of items in @c headersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger headersArray_Count;

@end

#pragma mark - GetTransactionRequest

typedef GPB_ENUM(GetTransactionRequest_FieldNumber) {
  GetTransactionRequest_FieldNumber_Hash_p = 1,
};

/**
 * Get a transaction from a transaction hash.
 **/
GPB_FINAL @interface GetTransactionRequest : GPBMessage

/** A transaction hash, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@end

#pragma mark - GetTransactionResponse

typedef GPB_ENUM(GetTransactionResponse_FieldNumber) {
  GetTransactionResponse_FieldNumber_Transaction = 1,
};

GPB_FINAL @interface GetTransactionResponse : GPBMessage

/** A marshaled transaction. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction *transaction;
/** Test to see if @c transaction has been set. */
@property(nonatomic, readwrite) BOOL hasTransaction;

@end

#pragma mark - GetRawTransactionRequest

typedef GPB_ENUM(GetRawTransactionRequest_FieldNumber) {
  GetRawTransactionRequest_FieldNumber_Hash_p = 1,
};

/**
 * Get an encoded transaction from a transaction hash.
 **/
GPB_FINAL @interface GetRawTransactionRequest : GPBMessage

/** A transaction hash, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@end

#pragma mark - GetRawTransactionResponse

typedef GPB_ENUM(GetRawTransactionResponse_FieldNumber) {
  GetRawTransactionResponse_FieldNumber_Transaction = 1,
};

GPB_FINAL @interface GetRawTransactionResponse : GPBMessage

/** Raw transaction in bytes. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *transaction;

@end

#pragma mark - GetAddressTransactionsRequest

typedef GPB_ENUM(GetAddressTransactionsRequest_FieldNumber) {
  GetAddressTransactionsRequest_FieldNumber_Address = 1,
  GetAddressTransactionsRequest_FieldNumber_NbSkip = 2,
  GetAddressTransactionsRequest_FieldNumber_NbFetch = 3,
  GetAddressTransactionsRequest_FieldNumber_Hash_p = 4,
  GetAddressTransactionsRequest_FieldNumber_Height = 5,
};

typedef GPB_ENUM(GetAddressTransactionsRequest_StartBlock_OneOfCase) {
  GetAddressTransactionsRequest_StartBlock_OneOfCase_GPBUnsetOneOfCase = 0,
  GetAddressTransactionsRequest_StartBlock_OneOfCase_Hash_p = 4,
  GetAddressTransactionsRequest_StartBlock_OneOfCase_Height = 5,
};

/**
 * Get marshaled transactions related to a specific address.
 *
 * RECOMMENDED:
 * Parameters have been provided to query without creating
 *   performance issues on the node or client.
 *
 * - The number of transactions to skip and fetch allow for iterating
 *       over a large set of transactions, if necessary.
 *
 * - A starting block parameter (either `hash` or `height`)
 *       may then be used to filter results to those occurring
 *       after a certain time.
 *
 * This approach will reduce network traffic and response processing
 *   for the client, as well as reduce workload on the node.
 **/
GPB_FINAL @interface GetAddressTransactionsRequest : GPBMessage

/**
 * The address to query transactions, in lowercase cashaddr format.
 * The network prefix is optional (i.e. "cashaddress:").
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/**
 * The number of confirmed transactions to skip, starting with the oldest first.
 * Does not affect results of unconfirmed transactions.
 **/
@property(nonatomic, readwrite) uint32_t nbSkip;

/** Specify the number of transactions to fetch. */
@property(nonatomic, readwrite) uint32_t nbFetch;

@property(nonatomic, readonly) GetAddressTransactionsRequest_StartBlock_OneOfCase startBlockOneOfCase;

/**
 * Recommended. Only get transactions after (or within) a
 * starting block identified by hash, little-endian.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/**
 * Recommended. Only get transactions after (or within) a
 * starting block identified by block number.
 **/
@property(nonatomic, readwrite) int32_t height;

@end

/**
 * Clears whatever value was set for the oneof 'startBlock'.
 **/
void GetAddressTransactionsRequest_ClearStartBlockOneOfCase(GetAddressTransactionsRequest *message);

#pragma mark - GetAddressTransactionsResponse

typedef GPB_ENUM(GetAddressTransactionsResponse_FieldNumber) {
  GetAddressTransactionsResponse_FieldNumber_ConfirmedTransactionsArray = 1,
  GetAddressTransactionsResponse_FieldNumber_UnconfirmedTransactionsArray = 2,
};

GPB_FINAL @interface GetAddressTransactionsResponse : GPBMessage

/** Transactions that have been included in a block. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Transaction*> *confirmedTransactionsArray;
/** The number of items in @c confirmedTransactionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confirmedTransactionsArray_Count;

/** Transactions in mempool which have not been included in a block. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MempoolTransaction*> *unconfirmedTransactionsArray;
/** The number of items in @c unconfirmedTransactionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger unconfirmedTransactionsArray_Count;

@end

#pragma mark - GetRawAddressTransactionsRequest

typedef GPB_ENUM(GetRawAddressTransactionsRequest_FieldNumber) {
  GetRawAddressTransactionsRequest_FieldNumber_Address = 1,
  GetRawAddressTransactionsRequest_FieldNumber_NbSkip = 2,
  GetRawAddressTransactionsRequest_FieldNumber_NbFetch = 3,
  GetRawAddressTransactionsRequest_FieldNumber_Hash_p = 4,
  GetRawAddressTransactionsRequest_FieldNumber_Height = 5,
};

typedef GPB_ENUM(GetRawAddressTransactionsRequest_StartBlock_OneOfCase) {
  GetRawAddressTransactionsRequest_StartBlock_OneOfCase_GPBUnsetOneOfCase = 0,
  GetRawAddressTransactionsRequest_StartBlock_OneOfCase_Hash_p = 4,
  GetRawAddressTransactionsRequest_StartBlock_OneOfCase_Height = 5,
};

/**
 * Get encoded transactions related to a specific address.
 *
 * RECOMMENDED:
 * Parameters have been provided to query without creating
 *   performance issues on the node or client.
 *
 * - The number of transactions to skip and fetch allow for iterating
 *       over a large set of transactions, if necessary.
 *
 * - A starting block parameter (either `hash` or `height`)
 *       may then be used to filter results to those occurring
 *       after a certain time.
 *
 * This approach will reduce network traffic and response processing
 *   for the client, as well as reduce workload on the node.
 **/
GPB_FINAL @interface GetRawAddressTransactionsRequest : GPBMessage

/**
 * The address to query transactions, in lowercase cashaddr format.
 * The network prefix is optional (i.e. "cashaddress:").
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/**
 * The number of confirmed transactions to skip, starting with the oldest first.
 * Does not affect results of unconfirmed transactions.
 **/
@property(nonatomic, readwrite) uint32_t nbSkip;

/** Specify the number of transactions to fetch. */
@property(nonatomic, readwrite) uint32_t nbFetch;

@property(nonatomic, readonly) GetRawAddressTransactionsRequest_StartBlock_OneOfCase startBlockOneOfCase;

/**
 * Recommended. Only return transactions after some starting block
 * identified by hash, little-endian.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/**
 * Recommended. Only return transactions after some starting block
 * identified by block number.
 **/
@property(nonatomic, readwrite) int32_t height;

@end

/**
 * Clears whatever value was set for the oneof 'startBlock'.
 **/
void GetRawAddressTransactionsRequest_ClearStartBlockOneOfCase(GetRawAddressTransactionsRequest *message);

#pragma mark - GetRawAddressTransactionsResponse

typedef GPB_ENUM(GetRawAddressTransactionsResponse_FieldNumber) {
  GetRawAddressTransactionsResponse_FieldNumber_ConfirmedTransactionsArray = 1,
  GetRawAddressTransactionsResponse_FieldNumber_UnconfirmedTransactionsArray = 2,
};

GPB_FINAL @interface GetRawAddressTransactionsResponse : GPBMessage

/** Transactions that have been included in a block. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *confirmedTransactionsArray;
/** The number of items in @c confirmedTransactionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger confirmedTransactionsArray_Count;

/** Transactions in mempool which have not been included in a block. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *unconfirmedTransactionsArray;
/** The number of items in @c unconfirmedTransactionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger unconfirmedTransactionsArray_Count;

@end

#pragma mark - GetAddressUnspentOutputsRequest

typedef GPB_ENUM(GetAddressUnspentOutputsRequest_FieldNumber) {
  GetAddressUnspentOutputsRequest_FieldNumber_Address = 1,
  GetAddressUnspentOutputsRequest_FieldNumber_IncludeMempool = 2,
};

GPB_FINAL @interface GetAddressUnspentOutputsRequest : GPBMessage

/**
 * The address to query transactions, in lowercase cashaddr format.
 * The network identifier is optional (i.e. "cashaddress:").
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/**
 * When `include_mempool` is true, unconfirmed transactions from mempool
 * are returned. Default is false.
 **/
@property(nonatomic, readwrite) BOOL includeMempool;

@end

#pragma mark - GetAddressUnspentOutputsResponse

typedef GPB_ENUM(GetAddressUnspentOutputsResponse_FieldNumber) {
  GetAddressUnspentOutputsResponse_FieldNumber_OutputsArray = 1,
};

GPB_FINAL @interface GetAddressUnspentOutputsResponse : GPBMessage

/** List of unspent outputs. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UnspentOutput*> *outputsArray;
/** The number of items in @c outputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputsArray_Count;

@end

#pragma mark - GetUnspentOutputRequest

typedef GPB_ENUM(GetUnspentOutputRequest_FieldNumber) {
  GetUnspentOutputRequest_FieldNumber_Hash_p = 1,
  GetUnspentOutputRequest_FieldNumber_Index = 2,
  GetUnspentOutputRequest_FieldNumber_IncludeMempool = 3,
};

GPB_FINAL @interface GetUnspentOutputRequest : GPBMessage

/** The hash of the transaction, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The number of the output, starting from zero. */
@property(nonatomic, readwrite) uint32_t index;

/**
 * When include_mempool is true, unconfirmed transactions from mempool
 * are returned. Default is false.
 **/
@property(nonatomic, readwrite) BOOL includeMempool;

@end

#pragma mark - GetUnspentOutputResponse

typedef GPB_ENUM(GetUnspentOutputResponse_FieldNumber) {
  GetUnspentOutputResponse_FieldNumber_Outpoint = 1,
  GetUnspentOutputResponse_FieldNumber_PubkeyScript = 2,
  GetUnspentOutputResponse_FieldNumber_Value = 3,
  GetUnspentOutputResponse_FieldNumber_IsCoinbase = 4,
  GetUnspentOutputResponse_FieldNumber_BlockHeight = 5,
};

GPB_FINAL @interface GetUnspentOutputResponse : GPBMessage

/** A reference to the related input. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction_Input_Outpoint *outpoint;
/** Test to see if @c outpoint has been set. */
@property(nonatomic, readwrite) BOOL hasOutpoint;

/** Locking script dictating how funds can be spent in the future */
@property(nonatomic, readwrite, copy, null_resettable) NSData *pubkeyScript;

/** Amount in satoshi. */
@property(nonatomic, readwrite) int64_t value;

/**
 * When is_coinbase is true, the transaction was the first in a block,
 * created by a miner, and used to pay the block reward
 **/
@property(nonatomic, readwrite) BOOL isCoinbase;

/** The index number of the block containing the transaction creating the output. */
@property(nonatomic, readwrite) int32_t blockHeight;

@end

#pragma mark - GetMerkleProofRequest

typedef GPB_ENUM(GetMerkleProofRequest_FieldNumber) {
  GetMerkleProofRequest_FieldNumber_TransactionHash = 1,
};

GPB_FINAL @interface GetMerkleProofRequest : GPBMessage

/** A transaction hash, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *transactionHash;

@end

#pragma mark - GetMerkleProofResponse

typedef GPB_ENUM(GetMerkleProofResponse_FieldNumber) {
  GetMerkleProofResponse_FieldNumber_Block = 1,
  GetMerkleProofResponse_FieldNumber_HashesArray = 2,
  GetMerkleProofResponse_FieldNumber_Flags = 3,
};

GPB_FINAL @interface GetMerkleProofResponse : GPBMessage

/** Block header information for the corresponding transaction */
@property(nonatomic, readwrite, strong, null_resettable) BlockInfo *block;
/** Test to see if @c block has been set. */
@property(nonatomic, readwrite) BOOL hasBlock;

/**
 * A list containing the transaction hash, the adjacent leaf transaction hash
 * and the hashes of the highest nodes in the merkle tree not built with the transaction.
 * Proof hashes are ordered following transaction order, or left to right on the merkle tree
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *hashesArray;
/** The number of items in @c hashesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hashesArray_Count;

/**
 * Binary representing the location of the matching transaction in the full merkle tree,
 * starting with the root (`1`) at position/level 0, where `1` corresponds
 * to a left branch and `01` is a right branch.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *flags;

@end

#pragma mark - SubmitTransactionRequest

typedef GPB_ENUM(SubmitTransactionRequest_FieldNumber) {
  SubmitTransactionRequest_FieldNumber_Transaction = 1,
};

GPB_FINAL @interface SubmitTransactionRequest : GPBMessage

/** The encoded transaction. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *transaction;

@end

#pragma mark - SubmitTransactionResponse

typedef GPB_ENUM(SubmitTransactionResponse_FieldNumber) {
  SubmitTransactionResponse_FieldNumber_Hash_p = 1,
};

GPB_FINAL @interface SubmitTransactionResponse : GPBMessage

/** Transaction hash, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@end

#pragma mark - SubscribeTransactionsRequest

typedef GPB_ENUM(SubscribeTransactionsRequest_FieldNumber) {
  SubscribeTransactionsRequest_FieldNumber_Subscribe = 1,
  SubscribeTransactionsRequest_FieldNumber_Unsubscribe = 2,
  SubscribeTransactionsRequest_FieldNumber_IncludeMempool = 3,
  SubscribeTransactionsRequest_FieldNumber_IncludeInBlock = 4,
  SubscribeTransactionsRequest_FieldNumber_SerializeTx = 5,
};

/**
 * Request to subscribe or unsubscribe from a stream of transactions.
 **/
GPB_FINAL @interface SubscribeTransactionsRequest : GPBMessage

/** Subscribe to a filter. add items to a filter */
@property(nonatomic, readwrite, strong, null_resettable) TransactionFilter *subscribe;
/** Test to see if @c subscribe has been set. */
@property(nonatomic, readwrite) BOOL hasSubscribe;

/** Unsubscribe to a filter, remove items from a filter */
@property(nonatomic, readwrite, strong, null_resettable) TransactionFilter *unsubscribe;
/** Test to see if @c unsubscribe has been set. */
@property(nonatomic, readwrite) BOOL hasUnsubscribe;

/**
 * When include_mempool is true, new unconfirmed transactions from mempool are
 * included apart from the ones confirmed in a block.
 **/
@property(nonatomic, readwrite) BOOL includeMempool;

/**
 * When include_in_block is true, transactions are included when they are confirmed.
 * This notification is sent in addition to any requested mempool notifications.
 **/
@property(nonatomic, readwrite) BOOL includeInBlock;

/**
 * When serialize_tx is true, transactions are serialized using
 * bitcoin protocol encoding. Default is false, transaction will be Marshaled
 * (see `Transaction`, `MempoolTransaction` and `TransactionNotification`)
 **/
@property(nonatomic, readwrite) BOOL serializeTx;

@end

#pragma mark - SubscribeBlocksRequest

typedef GPB_ENUM(SubscribeBlocksRequest_FieldNumber) {
  SubscribeBlocksRequest_FieldNumber_FullBlock = 1,
  SubscribeBlocksRequest_FieldNumber_FullTransactions = 2,
  SubscribeBlocksRequest_FieldNumber_SerializeBlock = 3,
};

/**
 * Options to define data structure to be sent by SubscribeBlock stream:
 *
 *  - BlockInfo (block metadata): `BlockInfo`
 *      - SubscribeBlocksRequest {}
 *
 *  - Marshaled Block (with transaction hashes): `Block`
 *      - SubscribeBlocksRequest {
 *            full_block = true
 *        }
 *  - Marshaled Block (with full transaction data): `Block`
 *      - SubscribeBlocksRequest {
 *            full_block = true
 *            full_transactions = true
 *        }
 *  - Serialized Block acccording to bitcoin protocol encoding: `bytes`
 *      - SubscribeBlocksRequest {
 *            serialize_block = true
 *        }
 **/
GPB_FINAL @interface SubscribeBlocksRequest : GPBMessage

/**
 * When full_block is true, a complete marshaled block is sent. See `Block`.
 * Default is false, block metadata is sent. See `BlockInfo`.
 **/
@property(nonatomic, readwrite) BOOL fullBlock;

/**
 * When full_transactions is true, provide full transaction info
 * for a marshaled block.
 * Default is false, only the transaction hashes are included for
 * a marshaled block. See `TransactionData`.
 **/
@property(nonatomic, readwrite) BOOL fullTransactions;

/**
 * When serialize_block is true, blocks are serialized using bitcoin protocol encoding.
 * Default is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)
 **/
@property(nonatomic, readwrite) BOOL serializeBlock;

@end

#pragma mark - BlockNotification

typedef GPB_ENUM(BlockNotification_FieldNumber) {
  BlockNotification_FieldNumber_Type = 1,
  BlockNotification_FieldNumber_BlockInfo = 2,
  BlockNotification_FieldNumber_MarshaledBlock = 3,
  BlockNotification_FieldNumber_SerializedBlock = 4,
};

typedef GPB_ENUM(BlockNotification_Block_OneOfCase) {
  BlockNotification_Block_OneOfCase_GPBUnsetOneOfCase = 0,
  BlockNotification_Block_OneOfCase_BlockInfo = 2,
  BlockNotification_Block_OneOfCase_MarshaledBlock = 3,
  BlockNotification_Block_OneOfCase_SerializedBlock = 4,
};

GPB_FINAL @interface BlockNotification : GPBMessage

/** Whether the block is connected to the chain. */
@property(nonatomic, readwrite) BlockNotification_Type type;

@property(nonatomic, readonly) BlockNotification_Block_OneOfCase blockOneOfCase;

/** Marshaled block header data, as well as metadata stored by the node. */
@property(nonatomic, readwrite, strong, null_resettable) BlockInfo *blockInfo;

/** A Block. */
@property(nonatomic, readwrite, strong, null_resettable) Block *marshaledBlock;

/** Binary block, serialized using bitcoin protocol encoding. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *serializedBlock;

@end

/**
 * Fetches the raw value of a @c BlockNotification's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t BlockNotification_Type_RawValue(BlockNotification *message);
/**
 * Sets the raw value of an @c BlockNotification's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetBlockNotification_Type_RawValue(BlockNotification *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'block'.
 **/
void BlockNotification_ClearBlockOneOfCase(BlockNotification *message);

#pragma mark - TransactionNotification

typedef GPB_ENUM(TransactionNotification_FieldNumber) {
  TransactionNotification_FieldNumber_Type = 1,
  TransactionNotification_FieldNumber_ConfirmedTransaction = 2,
  TransactionNotification_FieldNumber_UnconfirmedTransaction = 3,
  TransactionNotification_FieldNumber_SerializedTransaction = 4,
};

typedef GPB_ENUM(TransactionNotification_Transaction_OneOfCase) {
  TransactionNotification_Transaction_OneOfCase_GPBUnsetOneOfCase = 0,
  TransactionNotification_Transaction_OneOfCase_ConfirmedTransaction = 2,
  TransactionNotification_Transaction_OneOfCase_UnconfirmedTransaction = 3,
  TransactionNotification_Transaction_OneOfCase_SerializedTransaction = 4,
};

GPB_FINAL @interface TransactionNotification : GPBMessage

/** Whether or not the transaction has been included in a block. */
@property(nonatomic, readwrite) TransactionNotification_Type type;

@property(nonatomic, readonly) TransactionNotification_Transaction_OneOfCase transactionOneOfCase;

/** A transaction included in a block. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction *confirmedTransaction;

/** A transaction in mempool. */
@property(nonatomic, readwrite, strong, null_resettable) MempoolTransaction *unconfirmedTransaction;

/** Binary transaction, serialized using bitcoin protocol encoding. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *serializedTransaction;

@end

/**
 * Fetches the raw value of a @c TransactionNotification's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TransactionNotification_Type_RawValue(TransactionNotification *message);
/**
 * Sets the raw value of an @c TransactionNotification's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTransactionNotification_Type_RawValue(TransactionNotification *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'transaction'.
 **/
void TransactionNotification_ClearTransactionOneOfCase(TransactionNotification *message);

#pragma mark - BlockInfo

typedef GPB_ENUM(BlockInfo_FieldNumber) {
  BlockInfo_FieldNumber_Hash_p = 1,
  BlockInfo_FieldNumber_Height = 2,
  BlockInfo_FieldNumber_Version = 3,
  BlockInfo_FieldNumber_PreviousBlock = 4,
  BlockInfo_FieldNumber_MerkleRoot = 5,
  BlockInfo_FieldNumber_Timestamp = 6,
  BlockInfo_FieldNumber_Bits = 7,
  BlockInfo_FieldNumber_Nonce = 8,
  BlockInfo_FieldNumber_Confirmations = 9,
  BlockInfo_FieldNumber_Difficulty = 10,
  BlockInfo_FieldNumber_NextBlockHash = 11,
  BlockInfo_FieldNumber_Size = 12,
  BlockInfo_FieldNumber_MedianTime = 13,
};

/**
 * Metadata for identifying and validating a block
 **/
GPB_FINAL @interface BlockInfo : GPBMessage

/**
 * The double sha256 hash of the six header fields in the first 80 bytes
 * of the block, when encoded according the bitcoin protocol, little-endian.
 * sha256(sha256(encoded_header))
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The block number, an incremental index for each block mined. */
@property(nonatomic, readwrite) int32_t height;

/** A version number to track software/protocol upgrades. */
@property(nonatomic, readwrite) int32_t version;

/** Hash of the previous block, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *previousBlock;

/** The root of the Merkle Tree built from all transactions in the block, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *merkleRoot;

/** When mining of the block started, expressed in seconds since 1970-01-01. */
@property(nonatomic, readwrite) int64_t timestamp;

/** Difficulty in Compressed Target Format. */
@property(nonatomic, readwrite) uint32_t bits;

/**
 * A random value that was generated during block mining which happened to
 * result in a computed block hash below the difficulty target at the time.
 **/
@property(nonatomic, readwrite) uint32_t nonce;

/** Number of blocks in a chain, including the block itself upon creation. */
@property(nonatomic, readwrite) int32_t confirmations;

/** Difficulty target at time of creation. */
@property(nonatomic, readwrite) double difficulty;

/** Hash of the next block in this chain, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *nextBlockHash;

/** Size of the block in bytes. */
@property(nonatomic, readwrite) int32_t size;

/** The median block time of the latest 11 block timestamps. */
@property(nonatomic, readwrite) int64_t medianTime;

@end

#pragma mark - Block

typedef GPB_ENUM(Block_FieldNumber) {
  Block_FieldNumber_Info = 1,
  Block_FieldNumber_TransactionDataArray = 2,
};

GPB_FINAL @interface Block : GPBMessage

/** Block header data, as well as metadata stored by the node. */
@property(nonatomic, readwrite, strong, null_resettable) BlockInfo *info;
/** Test to see if @c info has been set. */
@property(nonatomic, readwrite) BOOL hasInfo;

/** List of transactions or transaction hashes. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Block_TransactionData*> *transactionDataArray;
/** The number of items in @c transactionDataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger transactionDataArray_Count;

@end

#pragma mark - Block_TransactionData

typedef GPB_ENUM(Block_TransactionData_FieldNumber) {
  Block_TransactionData_FieldNumber_TransactionHash = 1,
  Block_TransactionData_FieldNumber_Transaction = 2,
};

typedef GPB_ENUM(Block_TransactionData_TxidsOrTxs_OneOfCase) {
  Block_TransactionData_TxidsOrTxs_OneOfCase_GPBUnsetOneOfCase = 0,
  Block_TransactionData_TxidsOrTxs_OneOfCase_TransactionHash = 1,
  Block_TransactionData_TxidsOrTxs_OneOfCase_Transaction = 2,
};

GPB_FINAL @interface Block_TransactionData : GPBMessage

@property(nonatomic, readonly) Block_TransactionData_TxidsOrTxs_OneOfCase txidsOrTxsOneOfCase;

/** Just the transaction hash, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *transactionHash;

/** A marshaled transaction. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction *transaction;

@end

/**
 * Clears whatever value was set for the oneof 'txidsOrTxs'.
 **/
void Block_TransactionData_ClearTxidsOrTxsOneOfCase(Block_TransactionData *message);

#pragma mark - Transaction

typedef GPB_ENUM(Transaction_FieldNumber) {
  Transaction_FieldNumber_Hash_p = 1,
  Transaction_FieldNumber_Version = 2,
  Transaction_FieldNumber_InputsArray = 3,
  Transaction_FieldNumber_OutputsArray = 4,
  Transaction_FieldNumber_LockTime = 5,
  Transaction_FieldNumber_Size = 8,
  Transaction_FieldNumber_Timestamp = 9,
  Transaction_FieldNumber_Confirmations = 10,
  Transaction_FieldNumber_BlockHeight = 11,
  Transaction_FieldNumber_BlockHash = 12,
};

GPB_FINAL @interface Transaction : GPBMessage

/**
 * The double sha256 hash of the encoded transaction, little-endian.
 * sha256(sha256(encoded_transaction))
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The version of the transaction format. */
@property(nonatomic, readwrite) int32_t version;

/** List of inputs. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Transaction_Input*> *inputsArray;
/** The number of items in @c inputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inputsArray_Count;

/** List of outputs. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Transaction_Output*> *outputsArray;
/** The number of items in @c outputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputsArray_Count;

/**
 * The block height or timestamp after which this transaction is allowed.
 * If value is greater than 500 million, it is assumed to be an epoch timestamp,
 * otherwise it is treated as a block-height. Default is zero, or lock.
 **/
@property(nonatomic, readwrite) uint32_t lockTime;

/** The size of the transaction in bytes. */
@property(nonatomic, readwrite) int32_t size;

/** When the transaction was included in a block, in epoch time. */
@property(nonatomic, readwrite) int64_t timestamp;

/**
 * Number of blocks including proof of the transaction, including
 * the block it appeared.
 **/
@property(nonatomic, readwrite) int32_t confirmations;

/** Number of the block containing the transaction. */
@property(nonatomic, readwrite) int32_t blockHeight;

/** Hash of the block the transaction was recorded in, little-endian. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *blockHash;

@end

#pragma mark - Transaction_Input

typedef GPB_ENUM(Transaction_Input_FieldNumber) {
  Transaction_Input_FieldNumber_Index = 1,
  Transaction_Input_FieldNumber_Outpoint = 2,
  Transaction_Input_FieldNumber_SignatureScript = 3,
  Transaction_Input_FieldNumber_Sequence = 4,
  Transaction_Input_FieldNumber_Value = 5,
  Transaction_Input_FieldNumber_PreviousScript = 6,
  Transaction_Input_FieldNumber_Address = 7,
};

GPB_FINAL @interface Transaction_Input : GPBMessage

/** The number of the input, starting from zero. */
@property(nonatomic, readwrite) uint32_t index;

/** The related outpoint. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction_Input_Outpoint *outpoint;
/** Test to see if @c outpoint has been set. */
@property(nonatomic, readwrite) BOOL hasOutpoint;

/**
 * An unlocking script asserting a transaction is permitted to spend
 * the Outpoint (UTXO)
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *signatureScript;

/**
 * As of BIP-68, the sequence number is interpreted as a relative
 * lock-time for the input.
 **/
@property(nonatomic, readwrite) uint32_t sequence;

/** Amount in satoshi. */
@property(nonatomic, readwrite) int64_t value;

/** The pubkey_script of the previous output that is being spent. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *previousScript;

/** The bitcoin addresses associated with this input. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - Transaction_Input_Outpoint

typedef GPB_ENUM(Transaction_Input_Outpoint_FieldNumber) {
  Transaction_Input_Outpoint_FieldNumber_Hash_p = 1,
  Transaction_Input_Outpoint_FieldNumber_Index = 2,
};

GPB_FINAL @interface Transaction_Input_Outpoint : GPBMessage

/** The hash of the transaction containing the output to be spent, little-endian */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

/** The index of specific output on the transaction. */
@property(nonatomic, readwrite) uint32_t index;

@end

#pragma mark - Transaction_Output

typedef GPB_ENUM(Transaction_Output_FieldNumber) {
  Transaction_Output_FieldNumber_Index = 1,
  Transaction_Output_FieldNumber_Value = 2,
  Transaction_Output_FieldNumber_PubkeyScript = 3,
  Transaction_Output_FieldNumber_Address = 4,
  Transaction_Output_FieldNumber_ScriptClass = 5,
  Transaction_Output_FieldNumber_DisassembledScript = 6,
};

GPB_FINAL @interface Transaction_Output : GPBMessage

/** The number of the output, starting from zero. */
@property(nonatomic, readwrite) uint32_t index;

/** The number of satoshis to be transferred. */
@property(nonatomic, readwrite) int64_t value;

/** The public key script used to pay coins. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *pubkeyScript;

/** The bitcoin addresses associated with this output. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** The type of script. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *scriptClass;

/** The script expressed in Bitcoin Cash Script. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *disassembledScript;

@end

#pragma mark - MempoolTransaction

typedef GPB_ENUM(MempoolTransaction_FieldNumber) {
  MempoolTransaction_FieldNumber_Transaction = 1,
  MempoolTransaction_FieldNumber_AddedTime = 2,
  MempoolTransaction_FieldNumber_AddedHeight = 3,
  MempoolTransaction_FieldNumber_Fee = 4,
  MempoolTransaction_FieldNumber_FeePerKb = 5,
  MempoolTransaction_FieldNumber_StartingPriority = 6,
};

GPB_FINAL @interface MempoolTransaction : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Transaction *transaction;
/** Test to see if @c transaction has been set. */
@property(nonatomic, readwrite) BOOL hasTransaction;

/** The time when the transaction was added too the pool. */
@property(nonatomic, readwrite) int64_t addedTime;

/** The block height when the transaction was added to the pool. */
@property(nonatomic, readwrite) int32_t addedHeight;

/** The total fee in satoshi the transaction pays. */
@property(nonatomic, readwrite) int64_t fee;

/** The fee in satoshi per kilobyte the transaction pays. */
@property(nonatomic, readwrite) int64_t feePerKb;

/** The priority of the transaction when it was added to the pool. */
@property(nonatomic, readwrite) double startingPriority;

@end

#pragma mark - UnspentOutput

typedef GPB_ENUM(UnspentOutput_FieldNumber) {
  UnspentOutput_FieldNumber_Outpoint = 1,
  UnspentOutput_FieldNumber_PubkeyScript = 2,
  UnspentOutput_FieldNumber_Value = 3,
  UnspentOutput_FieldNumber_IsCoinbase = 4,
  UnspentOutput_FieldNumber_BlockHeight = 5,
};

GPB_FINAL @interface UnspentOutput : GPBMessage

/** A reference to the output given by transaction hash and index. */
@property(nonatomic, readwrite, strong, null_resettable) Transaction_Input_Outpoint *outpoint;
/** Test to see if @c outpoint has been set. */
@property(nonatomic, readwrite) BOOL hasOutpoint;

/** The public key script used to pay coins. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *pubkeyScript;

/** The amount in satoshis */
@property(nonatomic, readwrite) int64_t value;

/**
 * When is_coinbase is true, the output is the first in the block,
 * a generation transaction, the result of mining.
 **/
@property(nonatomic, readwrite) BOOL isCoinbase;

/** The block number containing the UXTO. */
@property(nonatomic, readwrite) int32_t blockHeight;

@end

#pragma mark - TransactionFilter

typedef GPB_ENUM(TransactionFilter_FieldNumber) {
  TransactionFilter_FieldNumber_AddressesArray = 1,
  TransactionFilter_FieldNumber_OutpointsArray = 2,
  TransactionFilter_FieldNumber_DataElementsArray = 3,
  TransactionFilter_FieldNumber_AllTransactions = 4,
};

GPB_FINAL @interface TransactionFilter : GPBMessage

/** Filter by address(es) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *addressesArray;
/** The number of items in @c addressesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger addressesArray_Count;

/** Filter by output hash and index. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Transaction_Input_Outpoint*> *outpointsArray;
/** The number of items in @c outpointsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outpointsArray_Count;

/** Filter by data elements contained in pubkey scripts. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *dataElementsArray;
/** The number of items in @c dataElementsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataElementsArray_Count;

/**
 * Subscribe/Unsubscribe to everything. Other filters
 * will be ignored.
 **/
@property(nonatomic, readwrite) BOOL allTransactions;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
