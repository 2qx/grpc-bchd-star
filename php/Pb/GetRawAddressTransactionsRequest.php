<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bchrpc.proto

namespace Pb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Get encoded transactions related to a specific address.
 * RECOMMENDED:
 * Parameters have been provided to query without creating
 *   performance issues on the node or client.
 * - The number of transactions to skip and fetch allow for iterating
 *       over a large set of transactions, if necessary.
 * - A starting block parameter (either `hash` or `height`)
 *       may then be used to filter results to those occurring
 *       after a certain time.
 * This approach will reduce network traffic and response processing
 *   for the client, as well as reduce workload on the node.
 *
 * Generated from protobuf message <code>pb.GetRawAddressTransactionsRequest</code>
 */
class GetRawAddressTransactionsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The address to query transactions, in lowercase cashaddr format.
     * The network prefix is optional (i.e. "cashaddress:").
     *
     * Generated from protobuf field <code>string address = 1;</code>
     */
    protected $address = '';
    /**
     * The number of confirmed transactions to skip, starting with the oldest first.
     * Does not affect results of unconfirmed transactions.
     *
     * Generated from protobuf field <code>uint32 nb_skip = 2;</code>
     */
    protected $nb_skip = 0;
    /**
     * Specify the number of transactions to fetch.
     *
     * Generated from protobuf field <code>uint32 nb_fetch = 3;</code>
     */
    protected $nb_fetch = 0;
    protected $start_block;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $address
     *           The address to query transactions, in lowercase cashaddr format.
     *           The network prefix is optional (i.e. "cashaddress:").
     *     @type int $nb_skip
     *           The number of confirmed transactions to skip, starting with the oldest first.
     *           Does not affect results of unconfirmed transactions.
     *     @type int $nb_fetch
     *           Specify the number of transactions to fetch.
     *     @type string $hash
     *           Recommended. Only return transactions after some starting block
     *           identified by hash, little-endian.
     *     @type int $height
     *           Recommended. Only return transactions after some starting block
     *           identified by block number.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Bchrpc::initOnce();
        parent::__construct($data);
    }

    /**
     * The address to query transactions, in lowercase cashaddr format.
     * The network prefix is optional (i.e. "cashaddress:").
     *
     * Generated from protobuf field <code>string address = 1;</code>
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * The address to query transactions, in lowercase cashaddr format.
     * The network prefix is optional (i.e. "cashaddress:").
     *
     * Generated from protobuf field <code>string address = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->address = $var;

        return $this;
    }

    /**
     * The number of confirmed transactions to skip, starting with the oldest first.
     * Does not affect results of unconfirmed transactions.
     *
     * Generated from protobuf field <code>uint32 nb_skip = 2;</code>
     * @return int
     */
    public function getNbSkip()
    {
        return $this->nb_skip;
    }

    /**
     * The number of confirmed transactions to skip, starting with the oldest first.
     * Does not affect results of unconfirmed transactions.
     *
     * Generated from protobuf field <code>uint32 nb_skip = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setNbSkip($var)
    {
        GPBUtil::checkUint32($var);
        $this->nb_skip = $var;

        return $this;
    }

    /**
     * Specify the number of transactions to fetch.
     *
     * Generated from protobuf field <code>uint32 nb_fetch = 3;</code>
     * @return int
     */
    public function getNbFetch()
    {
        return $this->nb_fetch;
    }

    /**
     * Specify the number of transactions to fetch.
     *
     * Generated from protobuf field <code>uint32 nb_fetch = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setNbFetch($var)
    {
        GPBUtil::checkUint32($var);
        $this->nb_fetch = $var;

        return $this;
    }

    /**
     * Recommended. Only return transactions after some starting block
     * identified by hash, little-endian.
     *
     * Generated from protobuf field <code>bytes hash = 4;</code>
     * @return string
     */
    public function getHash()
    {
        return $this->readOneof(4);
    }

    /**
     * Recommended. Only return transactions after some starting block
     * identified by hash, little-endian.
     *
     * Generated from protobuf field <code>bytes hash = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Recommended. Only return transactions after some starting block
     * identified by block number.
     *
     * Generated from protobuf field <code>int32 height = 5;</code>
     * @return int
     */
    public function getHeight()
    {
        return $this->readOneof(5);
    }

    /**
     * Recommended. Only return transactions after some starting block
     * identified by block number.
     *
     * Generated from protobuf field <code>int32 height = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setHeight($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getStartBlock()
    {
        return $this->whichOneof("start_block");
    }

}

