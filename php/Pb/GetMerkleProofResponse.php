<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bchrpc.proto

namespace Pb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>pb.GetMerkleProofResponse</code>
 */
class GetMerkleProofResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Block header information for the corresponding transaction
     *
     * Generated from protobuf field <code>.pb.BlockInfo block = 1;</code>
     */
    protected $block = null;
    /**
     * A list containing the transaction hash, the adjacent leaf transaction hash
     * and the hashes of the highest nodes in the merkle tree not built with the transaction.
     * Proof hashes are ordered following transaction order, or left to right on the merkle tree
     *
     * Generated from protobuf field <code>repeated bytes hashes = 2;</code>
     */
    private $hashes;
    /**
     * Binary representing the location of the matching transaction in the full merkle tree,
     * starting with the root (`1`) at position/level 0, where `1` corresponds
     * to a left branch and `01` is a right branch.
     *
     * Generated from protobuf field <code>bytes flags = 3;</code>
     */
    protected $flags = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Pb\BlockInfo $block
     *           Block header information for the corresponding transaction
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $hashes
     *           A list containing the transaction hash, the adjacent leaf transaction hash
     *           and the hashes of the highest nodes in the merkle tree not built with the transaction.
     *           Proof hashes are ordered following transaction order, or left to right on the merkle tree
     *     @type string $flags
     *           Binary representing the location of the matching transaction in the full merkle tree,
     *           starting with the root (`1`) at position/level 0, where `1` corresponds
     *           to a left branch and `01` is a right branch.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Bchrpc::initOnce();
        parent::__construct($data);
    }

    /**
     * Block header information for the corresponding transaction
     *
     * Generated from protobuf field <code>.pb.BlockInfo block = 1;</code>
     * @return \Pb\BlockInfo
     */
    public function getBlock()
    {
        return $this->block;
    }

    /**
     * Block header information for the corresponding transaction
     *
     * Generated from protobuf field <code>.pb.BlockInfo block = 1;</code>
     * @param \Pb\BlockInfo $var
     * @return $this
     */
    public function setBlock($var)
    {
        GPBUtil::checkMessage($var, \Pb\BlockInfo::class);
        $this->block = $var;

        return $this;
    }

    /**
     * A list containing the transaction hash, the adjacent leaf transaction hash
     * and the hashes of the highest nodes in the merkle tree not built with the transaction.
     * Proof hashes are ordered following transaction order, or left to right on the merkle tree
     *
     * Generated from protobuf field <code>repeated bytes hashes = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getHashes()
    {
        return $this->hashes;
    }

    /**
     * A list containing the transaction hash, the adjacent leaf transaction hash
     * and the hashes of the highest nodes in the merkle tree not built with the transaction.
     * Proof hashes are ordered following transaction order, or left to right on the merkle tree
     *
     * Generated from protobuf field <code>repeated bytes hashes = 2;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setHashes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->hashes = $arr;

        return $this;
    }

    /**
     * Binary representing the location of the matching transaction in the full merkle tree,
     * starting with the root (`1`) at position/level 0, where `1` corresponds
     * to a left branch and `01` is a right branch.
     *
     * Generated from protobuf field <code>bytes flags = 3;</code>
     * @return string
     */
    public function getFlags()
    {
        return $this->flags;
    }

    /**
     * Binary representing the location of the matching transaction in the full merkle tree,
     * starting with the root (`1`) at position/level 0, where `1` corresponds
     * to a left branch and `01` is a right branch.
     *
     * Generated from protobuf field <code>bytes flags = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setFlags($var)
    {
        GPBUtil::checkString($var, False);
        $this->flags = $var;

        return $this;
    }

}

