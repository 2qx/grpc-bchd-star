<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bchrpc.proto

namespace Pb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>pb.Transaction</code>
 */
class Transaction extends \Google\Protobuf\Internal\Message
{
    /**
     * The double sha256 hash of the encoded transaction, little-endian.
     * sha256(sha256(encoded_transaction))
     *
     * Generated from protobuf field <code>bytes hash = 1;</code>
     */
    protected $hash = '';
    /**
     * The version of the transaction format.
     *
     * Generated from protobuf field <code>int32 version = 2;</code>
     */
    protected $version = 0;
    /**
     * List of inputs.
     *
     * Generated from protobuf field <code>repeated .pb.Transaction.Input inputs = 3;</code>
     */
    private $inputs;
    /**
     * List of outputs.
     *
     * Generated from protobuf field <code>repeated .pb.Transaction.Output outputs = 4;</code>
     */
    private $outputs;
    /**
     * The block height or timestamp after which this transaction is allowed.
     * If value is greater than 500 million, it is assumed to be an epoch timestamp,
     * otherwise it is treated as a block-height. Default is zero, or lock.
     *
     * Generated from protobuf field <code>uint32 lock_time = 5;</code>
     */
    protected $lock_time = 0;
    /**
     * The size of the transaction in bytes.
     *
     * Generated from protobuf field <code>int32 size = 8;</code>
     */
    protected $size = 0;
    /**
     * When the transaction was included in a block, in epoch time.
     *
     * Generated from protobuf field <code>int64 timestamp = 9;</code>
     */
    protected $timestamp = 0;
    /**
     * Number of blocks including proof of the transaction, including
     * the block it appeared.
     *
     * Generated from protobuf field <code>int32 confirmations = 10;</code>
     */
    protected $confirmations = 0;
    /**
     * Number of the block containing the transaction.
     *
     * Generated from protobuf field <code>int32 block_height = 11;</code>
     */
    protected $block_height = 0;
    /**
     * Hash of the block the transaction was recorded in, little-endian.
     *
     * Generated from protobuf field <code>bytes block_hash = 12;</code>
     */
    protected $block_hash = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $hash
     *           The double sha256 hash of the encoded transaction, little-endian.
     *           sha256(sha256(encoded_transaction))
     *     @type int $version
     *           The version of the transaction format.
     *     @type \Pb\Transaction\Input[]|\Google\Protobuf\Internal\RepeatedField $inputs
     *           List of inputs.
     *     @type \Pb\Transaction\Output[]|\Google\Protobuf\Internal\RepeatedField $outputs
     *           List of outputs.
     *     @type int $lock_time
     *           The block height or timestamp after which this transaction is allowed.
     *           If value is greater than 500 million, it is assumed to be an epoch timestamp,
     *           otherwise it is treated as a block-height. Default is zero, or lock.
     *     @type int $size
     *           The size of the transaction in bytes.
     *     @type int|string $timestamp
     *           When the transaction was included in a block, in epoch time.
     *     @type int $confirmations
     *           Number of blocks including proof of the transaction, including
     *           the block it appeared.
     *     @type int $block_height
     *           Number of the block containing the transaction.
     *     @type string $block_hash
     *           Hash of the block the transaction was recorded in, little-endian.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Bchrpc::initOnce();
        parent::__construct($data);
    }

    /**
     * The double sha256 hash of the encoded transaction, little-endian.
     * sha256(sha256(encoded_transaction))
     *
     * Generated from protobuf field <code>bytes hash = 1;</code>
     * @return string
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * The double sha256 hash of the encoded transaction, little-endian.
     * sha256(sha256(encoded_transaction))
     *
     * Generated from protobuf field <code>bytes hash = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->hash = $var;

        return $this;
    }

    /**
     * The version of the transaction format.
     *
     * Generated from protobuf field <code>int32 version = 2;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * The version of the transaction format.
     *
     * Generated from protobuf field <code>int32 version = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkInt32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * List of inputs.
     *
     * Generated from protobuf field <code>repeated .pb.Transaction.Input inputs = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInputs()
    {
        return $this->inputs;
    }

    /**
     * List of inputs.
     *
     * Generated from protobuf field <code>repeated .pb.Transaction.Input inputs = 3;</code>
     * @param \Pb\Transaction\Input[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInputs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Pb\Transaction\Input::class);
        $this->inputs = $arr;

        return $this;
    }

    /**
     * List of outputs.
     *
     * Generated from protobuf field <code>repeated .pb.Transaction.Output outputs = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getOutputs()
    {
        return $this->outputs;
    }

    /**
     * List of outputs.
     *
     * Generated from protobuf field <code>repeated .pb.Transaction.Output outputs = 4;</code>
     * @param \Pb\Transaction\Output[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setOutputs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Pb\Transaction\Output::class);
        $this->outputs = $arr;

        return $this;
    }

    /**
     * The block height or timestamp after which this transaction is allowed.
     * If value is greater than 500 million, it is assumed to be an epoch timestamp,
     * otherwise it is treated as a block-height. Default is zero, or lock.
     *
     * Generated from protobuf field <code>uint32 lock_time = 5;</code>
     * @return int
     */
    public function getLockTime()
    {
        return $this->lock_time;
    }

    /**
     * The block height or timestamp after which this transaction is allowed.
     * If value is greater than 500 million, it is assumed to be an epoch timestamp,
     * otherwise it is treated as a block-height. Default is zero, or lock.
     *
     * Generated from protobuf field <code>uint32 lock_time = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setLockTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->lock_time = $var;

        return $this;
    }

    /**
     * The size of the transaction in bytes.
     *
     * Generated from protobuf field <code>int32 size = 8;</code>
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * The size of the transaction in bytes.
     *
     * Generated from protobuf field <code>int32 size = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->size = $var;

        return $this;
    }

    /**
     * When the transaction was included in a block, in epoch time.
     *
     * Generated from protobuf field <code>int64 timestamp = 9;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * When the transaction was included in a block, in epoch time.
     *
     * Generated from protobuf field <code>int64 timestamp = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkInt64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Number of blocks including proof of the transaction, including
     * the block it appeared.
     *
     * Generated from protobuf field <code>int32 confirmations = 10;</code>
     * @return int
     */
    public function getConfirmations()
    {
        return $this->confirmations;
    }

    /**
     * Number of blocks including proof of the transaction, including
     * the block it appeared.
     *
     * Generated from protobuf field <code>int32 confirmations = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setConfirmations($var)
    {
        GPBUtil::checkInt32($var);
        $this->confirmations = $var;

        return $this;
    }

    /**
     * Number of the block containing the transaction.
     *
     * Generated from protobuf field <code>int32 block_height = 11;</code>
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->block_height;
    }

    /**
     * Number of the block containing the transaction.
     *
     * Generated from protobuf field <code>int32 block_height = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setBlockHeight($var)
    {
        GPBUtil::checkInt32($var);
        $this->block_height = $var;

        return $this;
    }

    /**
     * Hash of the block the transaction was recorded in, little-endian.
     *
     * Generated from protobuf field <code>bytes block_hash = 12;</code>
     * @return string
     */
    public function getBlockHash()
    {
        return $this->block_hash;
    }

    /**
     * Hash of the block the transaction was recorded in, little-endian.
     *
     * Generated from protobuf field <code>bytes block_hash = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setBlockHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->block_hash = $var;

        return $this;
    }

}

