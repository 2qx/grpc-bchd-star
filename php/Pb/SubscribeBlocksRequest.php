<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bchrpc.proto

namespace Pb;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Options to define data structure to be sent by SubscribeBlock stream:
 *  - BlockInfo (block metadata): `BlockInfo`
 *      - SubscribeBlocksRequest {}
 *  - Marshaled Block (with transaction hashes): `Block`
 *      - SubscribeBlocksRequest {
 *            full_block = true
 *        }
 *  - Marshaled Block (with full transaction data): `Block`
 *      - SubscribeBlocksRequest {
 *            full_block = true
 *            full_transactions = true
 *        }
 *  - Serialized Block acccording to bitcoin protocol encoding: `bytes`
 *      - SubscribeBlocksRequest {
 *            serialize_block = true
 *        }
 *
 * Generated from protobuf message <code>pb.SubscribeBlocksRequest</code>
 */
class SubscribeBlocksRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * When full_block is true, a complete marshaled block is sent. See `Block`.
     * Default is false, block metadata is sent. See `BlockInfo`.
     *
     * Generated from protobuf field <code>bool full_block = 1;</code>
     */
    protected $full_block = false;
    /**
     * When full_transactions is true, provide full transaction info
     * for a marshaled block.
     * Default is false, only the transaction hashes are included for
     * a marshaled block. See `TransactionData`.
     *
     * Generated from protobuf field <code>bool full_transactions = 2;</code>
     */
    protected $full_transactions = false;
    /**
     * When serialize_block is true, blocks are serialized using bitcoin protocol encoding.
     * Default is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)
     *
     * Generated from protobuf field <code>bool serialize_block = 3;</code>
     */
    protected $serialize_block = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $full_block
     *           When full_block is true, a complete marshaled block is sent. See `Block`.
     *           Default is false, block metadata is sent. See `BlockInfo`.
     *     @type bool $full_transactions
     *           When full_transactions is true, provide full transaction info
     *           for a marshaled block.
     *           Default is false, only the transaction hashes are included for
     *           a marshaled block. See `TransactionData`.
     *     @type bool $serialize_block
     *           When serialize_block is true, blocks are serialized using bitcoin protocol encoding.
     *           Default is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Bchrpc::initOnce();
        parent::__construct($data);
    }

    /**
     * When full_block is true, a complete marshaled block is sent. See `Block`.
     * Default is false, block metadata is sent. See `BlockInfo`.
     *
     * Generated from protobuf field <code>bool full_block = 1;</code>
     * @return bool
     */
    public function getFullBlock()
    {
        return $this->full_block;
    }

    /**
     * When full_block is true, a complete marshaled block is sent. See `Block`.
     * Default is false, block metadata is sent. See `BlockInfo`.
     *
     * Generated from protobuf field <code>bool full_block = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setFullBlock($var)
    {
        GPBUtil::checkBool($var);
        $this->full_block = $var;

        return $this;
    }

    /**
     * When full_transactions is true, provide full transaction info
     * for a marshaled block.
     * Default is false, only the transaction hashes are included for
     * a marshaled block. See `TransactionData`.
     *
     * Generated from protobuf field <code>bool full_transactions = 2;</code>
     * @return bool
     */
    public function getFullTransactions()
    {
        return $this->full_transactions;
    }

    /**
     * When full_transactions is true, provide full transaction info
     * for a marshaled block.
     * Default is false, only the transaction hashes are included for
     * a marshaled block. See `TransactionData`.
     *
     * Generated from protobuf field <code>bool full_transactions = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setFullTransactions($var)
    {
        GPBUtil::checkBool($var);
        $this->full_transactions = $var;

        return $this;
    }

    /**
     * When serialize_block is true, blocks are serialized using bitcoin protocol encoding.
     * Default is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)
     *
     * Generated from protobuf field <code>bool serialize_block = 3;</code>
     * @return bool
     */
    public function getSerializeBlock()
    {
        return $this->serialize_block;
    }

    /**
     * When serialize_block is true, blocks are serialized using bitcoin protocol encoding.
     * Default is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)
     *
     * Generated from protobuf field <code>bool serialize_block = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setSerializeBlock($var)
    {
        GPBUtil::checkBool($var);
        $this->serialize_block = $var;

        return $this;
    }

}

