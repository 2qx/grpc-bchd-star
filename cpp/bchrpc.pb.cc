// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bchrpc.proto

#include "bchrpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Block_TransactionData_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockInfo_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MempoolTransaction_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Input_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Input_Outpoint_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Output_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionFilter_bchrpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnspentOutput_bchrpc_2eproto;
namespace pb {
class GetMempoolInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolInfoRequest> _instance;
} _GetMempoolInfoRequest_default_instance_;
class GetMempoolInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolInfoResponse> _instance;
} _GetMempoolInfoResponse_default_instance_;
class GetMempoolRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolRequest> _instance;
} _GetMempoolRequest_default_instance_;
class GetMempoolResponse_TransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolResponse_TransactionData> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_hash_;
  const ::pb::Transaction* transaction_;
} _GetMempoolResponse_TransactionData_default_instance_;
class GetMempoolResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolResponse> _instance;
} _GetMempoolResponse_default_instance_;
class GetBlockchainInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockchainInfoRequest> _instance;
} _GetBlockchainInfoRequest_default_instance_;
class GetBlockchainInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockchainInfoResponse> _instance;
} _GetBlockchainInfoResponse_default_instance_;
class GetBlockInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockInfoRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
} _GetBlockInfoRequest_default_instance_;
class GetBlockInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockInfoResponse> _instance;
} _GetBlockInfoResponse_default_instance_;
class GetBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
} _GetBlockRequest_default_instance_;
class GetBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockResponse> _instance;
} _GetBlockResponse_default_instance_;
class GetRawBlockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawBlockRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
} _GetRawBlockRequest_default_instance_;
class GetRawBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawBlockResponse> _instance;
} _GetRawBlockResponse_default_instance_;
class GetBlockFilterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockFilterRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
} _GetBlockFilterRequest_default_instance_;
class GetBlockFilterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockFilterResponse> _instance;
} _GetBlockFilterResponse_default_instance_;
class GetHeadersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHeadersRequest> _instance;
} _GetHeadersRequest_default_instance_;
class GetHeadersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHeadersResponse> _instance;
} _GetHeadersResponse_default_instance_;
class GetTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionRequest> _instance;
} _GetTransactionRequest_default_instance_;
class GetTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionResponse> _instance;
} _GetTransactionResponse_default_instance_;
class GetRawTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawTransactionRequest> _instance;
} _GetRawTransactionRequest_default_instance_;
class GetRawTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawTransactionResponse> _instance;
} _GetRawTransactionResponse_default_instance_;
class GetAddressTransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddressTransactionsRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
} _GetAddressTransactionsRequest_default_instance_;
class GetAddressTransactionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddressTransactionsResponse> _instance;
} _GetAddressTransactionsResponse_default_instance_;
class GetRawAddressTransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawAddressTransactionsRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
} _GetRawAddressTransactionsRequest_default_instance_;
class GetRawAddressTransactionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawAddressTransactionsResponse> _instance;
} _GetRawAddressTransactionsResponse_default_instance_;
class GetAddressUnspentOutputsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddressUnspentOutputsRequest> _instance;
} _GetAddressUnspentOutputsRequest_default_instance_;
class GetAddressUnspentOutputsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddressUnspentOutputsResponse> _instance;
} _GetAddressUnspentOutputsResponse_default_instance_;
class GetUnspentOutputRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUnspentOutputRequest> _instance;
} _GetUnspentOutputRequest_default_instance_;
class GetUnspentOutputResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUnspentOutputResponse> _instance;
} _GetUnspentOutputResponse_default_instance_;
class GetMerkleProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMerkleProofRequest> _instance;
} _GetMerkleProofRequest_default_instance_;
class GetMerkleProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMerkleProofResponse> _instance;
} _GetMerkleProofResponse_default_instance_;
class SubmitTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionRequest> _instance;
} _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionResponse> _instance;
} _SubmitTransactionResponse_default_instance_;
class SubscribeTransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeTransactionsRequest> _instance;
} _SubscribeTransactionsRequest_default_instance_;
class SubscribeBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeBlocksRequest> _instance;
} _SubscribeBlocksRequest_default_instance_;
class BlockNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockNotification> _instance;
  const ::pb::BlockInfo* block_info_;
  const ::pb::Block* marshaled_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_block_;
} _BlockNotification_default_instance_;
class TransactionNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionNotification> _instance;
  const ::pb::Transaction* confirmed_transaction_;
  const ::pb::MempoolTransaction* unconfirmed_transaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_transaction_;
} _TransactionNotification_default_instance_;
class BlockInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockInfo> _instance;
} _BlockInfo_default_instance_;
class Block_TransactionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block_TransactionData> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_hash_;
  const ::pb::Transaction* transaction_;
} _Block_TransactionData_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class Transaction_Input_OutpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Input_Outpoint> _instance;
} _Transaction_Input_Outpoint_default_instance_;
class Transaction_InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Input> _instance;
} _Transaction_Input_default_instance_;
class Transaction_OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Output> _instance;
} _Transaction_Output_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class MempoolTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MempoolTransaction> _instance;
} _MempoolTransaction_default_instance_;
class UnspentOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnspentOutput> _instance;
} _UnspentOutput_default_instance_;
class TransactionFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionFilter> _instance;
} _TransactionFilter_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_Block_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Block_default_instance_;
    new (ptr) ::pb::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Block_bchrpc_2eproto}, {
      &scc_info_BlockInfo_bchrpc_2eproto.base,
      &scc_info_Block_TransactionData_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_Block_TransactionData_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Block_TransactionData_default_instance_;
    new (ptr) ::pb::Block_TransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Block_TransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Block_TransactionData_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Block_TransactionData_bchrpc_2eproto}, {
      &scc_info_Transaction_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_BlockInfo_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BlockInfo_default_instance_;
    new (ptr) ::pb::BlockInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BlockInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockInfo_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockInfo_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_BlockNotification_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BlockNotification_default_instance_;
    new (ptr) ::pb::BlockNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BlockNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockNotification_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlockNotification_bchrpc_2eproto}, {
      &scc_info_BlockInfo_bchrpc_2eproto.base,
      &scc_info_Block_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetAddressTransactionsRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetAddressTransactionsRequest_default_instance_;
    new (ptr) ::pb::GetAddressTransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetAddressTransactionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAddressTransactionsRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAddressTransactionsRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetAddressTransactionsResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetAddressTransactionsResponse_default_instance_;
    new (ptr) ::pb::GetAddressTransactionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetAddressTransactionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAddressTransactionsResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetAddressTransactionsResponse_bchrpc_2eproto}, {
      &scc_info_Transaction_bchrpc_2eproto.base,
      &scc_info_MempoolTransaction_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetAddressUnspentOutputsRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetAddressUnspentOutputsRequest_default_instance_;
    new (ptr) ::pb::GetAddressUnspentOutputsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetAddressUnspentOutputsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAddressUnspentOutputsRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAddressUnspentOutputsRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetAddressUnspentOutputsResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetAddressUnspentOutputsResponse_default_instance_;
    new (ptr) ::pb::GetAddressUnspentOutputsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetAddressUnspentOutputsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAddressUnspentOutputsResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAddressUnspentOutputsResponse_bchrpc_2eproto}, {
      &scc_info_UnspentOutput_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetBlockFilterRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockFilterRequest_default_instance_;
    new (ptr) ::pb::GetBlockFilterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockFilterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockFilterRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockFilterRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockFilterResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockFilterResponse_default_instance_;
    new (ptr) ::pb::GetBlockFilterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockFilterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockFilterResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockFilterResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockInfoRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockInfoRequest_default_instance_;
    new (ptr) ::pb::GetBlockInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockInfoRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockInfoRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockInfoResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockInfoResponse_default_instance_;
    new (ptr) ::pb::GetBlockInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBlockInfoResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBlockInfoResponse_bchrpc_2eproto}, {
      &scc_info_BlockInfo_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetBlockRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockRequest_default_instance_;
    new (ptr) ::pb::GetBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockResponse_default_instance_;
    new (ptr) ::pb::GetBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBlockResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBlockResponse_bchrpc_2eproto}, {
      &scc_info_Block_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetBlockchainInfoRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockchainInfoRequest_default_instance_;
    new (ptr) ::pb::GetBlockchainInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockchainInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockchainInfoRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockchainInfoRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockchainInfoResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetBlockchainInfoResponse_default_instance_;
    new (ptr) ::pb::GetBlockchainInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetBlockchainInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockchainInfoResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockchainInfoResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetHeadersRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetHeadersRequest_default_instance_;
    new (ptr) ::pb::GetHeadersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetHeadersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHeadersRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHeadersRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetHeadersResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetHeadersResponse_default_instance_;
    new (ptr) ::pb::GetHeadersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetHeadersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHeadersResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHeadersResponse_bchrpc_2eproto}, {
      &scc_info_BlockInfo_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetMempoolInfoRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMempoolInfoRequest_default_instance_;
    new (ptr) ::pb::GetMempoolInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMempoolInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMempoolInfoRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMempoolInfoRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetMempoolInfoResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMempoolInfoResponse_default_instance_;
    new (ptr) ::pb::GetMempoolInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMempoolInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMempoolInfoResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMempoolInfoResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetMempoolRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMempoolRequest_default_instance_;
    new (ptr) ::pb::GetMempoolRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMempoolRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMempoolRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMempoolRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetMempoolResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMempoolResponse_default_instance_;
    new (ptr) ::pb::GetMempoolResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMempoolResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMempoolResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMempoolResponse_bchrpc_2eproto}, {
      &scc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMempoolResponse_TransactionData_default_instance_;
    new (ptr) ::pb::GetMempoolResponse_TransactionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMempoolResponse_TransactionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto}, {
      &scc_info_Transaction_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetMerkleProofRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMerkleProofRequest_default_instance_;
    new (ptr) ::pb::GetMerkleProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMerkleProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMerkleProofRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMerkleProofRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetMerkleProofResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetMerkleProofResponse_default_instance_;
    new (ptr) ::pb::GetMerkleProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetMerkleProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMerkleProofResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMerkleProofResponse_bchrpc_2eproto}, {
      &scc_info_BlockInfo_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetRawAddressTransactionsRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetRawAddressTransactionsRequest_default_instance_;
    new (ptr) ::pb::GetRawAddressTransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetRawAddressTransactionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawAddressTransactionsRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawAddressTransactionsRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRawAddressTransactionsResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetRawAddressTransactionsResponse_default_instance_;
    new (ptr) ::pb::GetRawAddressTransactionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetRawAddressTransactionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawAddressTransactionsResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawAddressTransactionsResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRawBlockRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetRawBlockRequest_default_instance_;
    new (ptr) ::pb::GetRawBlockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetRawBlockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawBlockRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawBlockRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRawBlockResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetRawBlockResponse_default_instance_;
    new (ptr) ::pb::GetRawBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetRawBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawBlockResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawBlockResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRawTransactionRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetRawTransactionRequest_default_instance_;
    new (ptr) ::pb::GetRawTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetRawTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawTransactionRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawTransactionRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRawTransactionResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetRawTransactionResponse_default_instance_;
    new (ptr) ::pb::GetRawTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetRawTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawTransactionResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawTransactionResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetTransactionRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetTransactionRequest_default_instance_;
    new (ptr) ::pb::GetTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTransactionRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTransactionRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetTransactionResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetTransactionResponse_default_instance_;
    new (ptr) ::pb::GetTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTransactionResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTransactionResponse_bchrpc_2eproto}, {
      &scc_info_Transaction_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_GetUnspentOutputRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetUnspentOutputRequest_default_instance_;
    new (ptr) ::pb::GetUnspentOutputRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetUnspentOutputRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUnspentOutputRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUnspentOutputRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_GetUnspentOutputResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GetUnspentOutputResponse_default_instance_;
    new (ptr) ::pb::GetUnspentOutputResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GetUnspentOutputResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUnspentOutputResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUnspentOutputResponse_bchrpc_2eproto}, {
      &scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_MempoolTransaction_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MempoolTransaction_default_instance_;
    new (ptr) ::pb::MempoolTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MempoolTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MempoolTransaction_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MempoolTransaction_bchrpc_2eproto}, {
      &scc_info_Transaction_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_SubmitTransactionRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SubmitTransactionRequest_default_instance_;
    new (ptr) ::pb::SubmitTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SubmitTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitTransactionRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitTransactionRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_SubmitTransactionResponse_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SubmitTransactionResponse_default_instance_;
    new (ptr) ::pb::SubmitTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SubmitTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitTransactionResponse_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitTransactionResponse_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeBlocksRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SubscribeBlocksRequest_default_instance_;
    new (ptr) ::pb::SubscribeBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SubscribeBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeBlocksRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeBlocksRequest_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeTransactionsRequest_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SubscribeTransactionsRequest_default_instance_;
    new (ptr) ::pb::SubscribeTransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SubscribeTransactionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeTransactionsRequest_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeTransactionsRequest_bchrpc_2eproto}, {
      &scc_info_TransactionFilter_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Transaction_default_instance_;
    new (ptr) ::pb::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transaction_bchrpc_2eproto}, {
      &scc_info_Transaction_Input_bchrpc_2eproto.base,
      &scc_info_Transaction_Output_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Input_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Transaction_Input_default_instance_;
    new (ptr) ::pb::Transaction_Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Transaction_Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Input_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_Input_bchrpc_2eproto}, {
      &scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Input_Outpoint_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Transaction_Input_Outpoint_default_instance_;
    new (ptr) ::pb::Transaction_Input_Outpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Transaction_Input_Outpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Input_Outpoint_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_Input_Outpoint_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_Output_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Transaction_Output_default_instance_;
    new (ptr) ::pb::Transaction_Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Transaction_Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Output_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_Output_bchrpc_2eproto}, {}};

static void InitDefaultsscc_info_TransactionFilter_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TransactionFilter_default_instance_;
    new (ptr) ::pb::TransactionFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TransactionFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionFilter_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionFilter_bchrpc_2eproto}, {
      &scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_TransactionNotification_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TransactionNotification_default_instance_;
    new (ptr) ::pb::TransactionNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TransactionNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionNotification_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransactionNotification_bchrpc_2eproto}, {
      &scc_info_Transaction_bchrpc_2eproto.base,
      &scc_info_MempoolTransaction_bchrpc_2eproto.base,}};

static void InitDefaultsscc_info_UnspentOutput_bchrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_UnspentOutput_default_instance_;
    new (ptr) ::pb::UnspentOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::UnspentOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnspentOutput_bchrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnspentOutput_bchrpc_2eproto}, {
      &scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bchrpc_2eproto[47];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bchrpc_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bchrpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bchrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolInfoResponse, size_),
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolInfoResponse, bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolRequest, full_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolResponse_TransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolResponse_TransactionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::GetMempoolResponse_TransactionDataDefaultTypeInternal, transaction_hash_),
  offsetof(::pb::GetMempoolResponse_TransactionDataDefaultTypeInternal, transaction_),
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolResponse_TransactionData, txids_or_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetMempoolResponse, transaction_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, bitcoin_net_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, best_height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, best_block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, difficulty_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, median_time_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, tx_index_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockchainInfoResponse, addr_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockInfoRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::GetBlockInfoRequestDefaultTypeInternal, hash_),
  offsetof(::pb::GetBlockInfoRequestDefaultTypeInternal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockInfoRequest, hash_or_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockInfoResponse, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::GetBlockRequestDefaultTypeInternal, hash_),
  offsetof(::pb::GetBlockRequestDefaultTypeInternal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockRequest, full_transactions_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockRequest, hash_or_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawBlockRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::GetRawBlockRequestDefaultTypeInternal, hash_),
  offsetof(::pb::GetRawBlockRequestDefaultTypeInternal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetRawBlockRequest, hash_or_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawBlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockFilterRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::GetBlockFilterRequestDefaultTypeInternal, hash_),
  offsetof(::pb::GetBlockFilterRequestDefaultTypeInternal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockFilterRequest, hash_or_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetBlockFilterResponse, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetHeadersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetHeadersRequest, block_locator_hashes_),
  PROTOBUF_FIELD_OFFSET(::pb::GetHeadersRequest, stop_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetHeadersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetHeadersResponse, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetTransactionRequest, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetTransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawTransactionRequest, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawTransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsRequest, address_),
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsRequest, nb_skip_),
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsRequest, nb_fetch_),
  offsetof(::pb::GetAddressTransactionsRequestDefaultTypeInternal, hash_),
  offsetof(::pb::GetAddressTransactionsRequestDefaultTypeInternal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsRequest, start_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsResponse, confirmed_transactions_),
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressTransactionsResponse, unconfirmed_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsRequest, address_),
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsRequest, nb_skip_),
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsRequest, nb_fetch_),
  offsetof(::pb::GetRawAddressTransactionsRequestDefaultTypeInternal, hash_),
  offsetof(::pb::GetRawAddressTransactionsRequestDefaultTypeInternal, height_),
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsRequest, start_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsResponse, confirmed_transactions_),
  PROTOBUF_FIELD_OFFSET(::pb::GetRawAddressTransactionsResponse, unconfirmed_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressUnspentOutputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressUnspentOutputsRequest, address_),
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressUnspentOutputsRequest, include_mempool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressUnspentOutputsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetAddressUnspentOutputsResponse, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputRequest, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputRequest, index_),
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputRequest, include_mempool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputResponse, outpoint_),
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputResponse, pubkey_script_),
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputResponse, value_),
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputResponse, is_coinbase_),
  PROTOBUF_FIELD_OFFSET(::pb::GetUnspentOutputResponse, block_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMerkleProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetMerkleProofRequest, transaction_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GetMerkleProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GetMerkleProofResponse, block_),
  PROTOBUF_FIELD_OFFSET(::pb::GetMerkleProofResponse, hashes_),
  PROTOBUF_FIELD_OFFSET(::pb::GetMerkleProofResponse, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubmitTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SubmitTransactionRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubmitTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SubmitTransactionResponse, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeTransactionsRequest, subscribe_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeTransactionsRequest, unsubscribe_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeTransactionsRequest, include_mempool_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeTransactionsRequest, include_in_block_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeTransactionsRequest, serialize_tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeBlocksRequest, full_block_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeBlocksRequest, full_transactions_),
  PROTOBUF_FIELD_OFFSET(::pb::SubscribeBlocksRequest, serialize_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BlockNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::BlockNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BlockNotification, type_),
  offsetof(::pb::BlockNotificationDefaultTypeInternal, block_info_),
  offsetof(::pb::BlockNotificationDefaultTypeInternal, marshaled_block_),
  offsetof(::pb::BlockNotificationDefaultTypeInternal, serialized_block_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockNotification, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TransactionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::TransactionNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TransactionNotification, type_),
  offsetof(::pb::TransactionNotificationDefaultTypeInternal, confirmed_transaction_),
  offsetof(::pb::TransactionNotificationDefaultTypeInternal, unconfirmed_transaction_),
  offsetof(::pb::TransactionNotificationDefaultTypeInternal, serialized_transaction_),
  PROTOBUF_FIELD_OFFSET(::pb::TransactionNotification, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, height_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, version_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, previous_block_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, merkle_root_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, bits_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, nonce_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, confirmations_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, difficulty_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, next_block_hash_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, size_),
  PROTOBUF_FIELD_OFFSET(::pb::BlockInfo, median_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Block_TransactionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pb::Block_TransactionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::pb::Block_TransactionDataDefaultTypeInternal, transaction_hash_),
  offsetof(::pb::Block_TransactionDataDefaultTypeInternal, transaction_),
  PROTOBUF_FIELD_OFFSET(::pb::Block_TransactionData, txids_or_txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Block, info_),
  PROTOBUF_FIELD_OFFSET(::pb::Block, transaction_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input_Outpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input_Outpoint, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input_Outpoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, index_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, outpoint_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, signature_script_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, sequence_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, value_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, previous_script_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Input, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, index_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, value_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, pubkey_script_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, address_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, script_class_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction_Output, disassembled_script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, hash_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, version_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, inputs_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, outputs_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, lock_time_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, size_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, confirmations_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, block_height_),
  PROTOBUF_FIELD_OFFSET(::pb::Transaction, block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, transaction_),
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, added_time_),
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, added_height_),
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, fee_),
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, fee_per_kb_),
  PROTOBUF_FIELD_OFFSET(::pb::MempoolTransaction, starting_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::UnspentOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::UnspentOutput, outpoint_),
  PROTOBUF_FIELD_OFFSET(::pb::UnspentOutput, pubkey_script_),
  PROTOBUF_FIELD_OFFSET(::pb::UnspentOutput, value_),
  PROTOBUF_FIELD_OFFSET(::pb::UnspentOutput, is_coinbase_),
  PROTOBUF_FIELD_OFFSET(::pb::UnspentOutput, block_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TransactionFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TransactionFilter, addresses_),
  PROTOBUF_FIELD_OFFSET(::pb::TransactionFilter, outpoints_),
  PROTOBUF_FIELD_OFFSET(::pb::TransactionFilter, data_elements_),
  PROTOBUF_FIELD_OFFSET(::pb::TransactionFilter, all_transactions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::GetMempoolInfoRequest)},
  { 5, -1, sizeof(::pb::GetMempoolInfoResponse)},
  { 12, -1, sizeof(::pb::GetMempoolRequest)},
  { 18, -1, sizeof(::pb::GetMempoolResponse_TransactionData)},
  { 26, -1, sizeof(::pb::GetMempoolResponse)},
  { 32, -1, sizeof(::pb::GetBlockchainInfoRequest)},
  { 37, -1, sizeof(::pb::GetBlockchainInfoResponse)},
  { 49, -1, sizeof(::pb::GetBlockInfoRequest)},
  { 57, -1, sizeof(::pb::GetBlockInfoResponse)},
  { 63, -1, sizeof(::pb::GetBlockRequest)},
  { 72, -1, sizeof(::pb::GetBlockResponse)},
  { 78, -1, sizeof(::pb::GetRawBlockRequest)},
  { 86, -1, sizeof(::pb::GetRawBlockResponse)},
  { 92, -1, sizeof(::pb::GetBlockFilterRequest)},
  { 100, -1, sizeof(::pb::GetBlockFilterResponse)},
  { 106, -1, sizeof(::pb::GetHeadersRequest)},
  { 113, -1, sizeof(::pb::GetHeadersResponse)},
  { 119, -1, sizeof(::pb::GetTransactionRequest)},
  { 125, -1, sizeof(::pb::GetTransactionResponse)},
  { 131, -1, sizeof(::pb::GetRawTransactionRequest)},
  { 137, -1, sizeof(::pb::GetRawTransactionResponse)},
  { 143, -1, sizeof(::pb::GetAddressTransactionsRequest)},
  { 154, -1, sizeof(::pb::GetAddressTransactionsResponse)},
  { 161, -1, sizeof(::pb::GetRawAddressTransactionsRequest)},
  { 172, -1, sizeof(::pb::GetRawAddressTransactionsResponse)},
  { 179, -1, sizeof(::pb::GetAddressUnspentOutputsRequest)},
  { 186, -1, sizeof(::pb::GetAddressUnspentOutputsResponse)},
  { 192, -1, sizeof(::pb::GetUnspentOutputRequest)},
  { 200, -1, sizeof(::pb::GetUnspentOutputResponse)},
  { 210, -1, sizeof(::pb::GetMerkleProofRequest)},
  { 216, -1, sizeof(::pb::GetMerkleProofResponse)},
  { 224, -1, sizeof(::pb::SubmitTransactionRequest)},
  { 230, -1, sizeof(::pb::SubmitTransactionResponse)},
  { 236, -1, sizeof(::pb::SubscribeTransactionsRequest)},
  { 246, -1, sizeof(::pb::SubscribeBlocksRequest)},
  { 254, -1, sizeof(::pb::BlockNotification)},
  { 264, -1, sizeof(::pb::TransactionNotification)},
  { 274, -1, sizeof(::pb::BlockInfo)},
  { 292, -1, sizeof(::pb::Block_TransactionData)},
  { 300, -1, sizeof(::pb::Block)},
  { 307, -1, sizeof(::pb::Transaction_Input_Outpoint)},
  { 314, -1, sizeof(::pb::Transaction_Input)},
  { 326, -1, sizeof(::pb::Transaction_Output)},
  { 337, -1, sizeof(::pb::Transaction)},
  { 352, -1, sizeof(::pb::MempoolTransaction)},
  { 363, -1, sizeof(::pb::UnspentOutput)},
  { 373, -1, sizeof(::pb::TransactionFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMempoolInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMempoolInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMempoolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMempoolResponse_TransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMempoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockchainInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockchainInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetRawBlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetRawBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockFilterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetBlockFilterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetHeadersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetHeadersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetAddressTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetAddressTransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetRawAddressTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetRawAddressTransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetAddressUnspentOutputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetAddressUnspentOutputsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetUnspentOutputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetUnspentOutputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMerkleProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GetMerkleProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubmitTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubmitTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubscribeTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SubscribeBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BlockNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TransactionNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BlockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Block_TransactionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Transaction_Input_Outpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Transaction_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Transaction_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MempoolTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_UnspentOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TransactionFilter_default_instance_),
};

const char descriptor_table_protodef_bchrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014bchrpc.proto\022\002pb\"\027\n\025GetMempoolInfoRequ"
  "est\"5\n\026GetMempoolInfoResponse\022\014\n\004size\030\001 "
  "\001(\r\022\r\n\005bytes\030\002 \001(\r\".\n\021GetMempoolRequest\022"
  "\031\n\021full_transactions\030\001 \001(\010\"\275\001\n\022GetMempoo"
  "lResponse\022@\n\020transaction_data\030\001 \003(\0132&.pb"
  ".GetMempoolResponse.TransactionData\032e\n\017T"
  "ransactionData\022\032\n\020transaction_hash\030\001 \001(\014"
  "H\000\022&\n\013transaction\030\002 \001(\0132\017.pb.Transaction"
  "H\000B\016\n\014txids_or_txs\"\032\n\030GetBlockchainInfoR"
  "equest\"\231\002\n\031GetBlockchainInfoResponse\022=\n\013"
  "bitcoin_net\030\001 \001(\0162(.pb.GetBlockchainInfo"
  "Response.BitcoinNet\022\023\n\013best_height\030\002 \001(\005"
  "\022\027\n\017best_block_hash\030\003 \001(\014\022\022\n\ndifficulty\030"
  "\004 \001(\001\022\023\n\013median_time\030\005 \001(\003\022\020\n\010tx_index\030\006"
  " \001(\010\022\022\n\naddr_index\030\007 \001(\010\"@\n\nBitcoinNet\022\013"
  "\n\007MAINNET\020\000\022\013\n\007REGTEST\020\001\022\014\n\010TESTNET3\020\002\022\n"
  "\n\006SIMNET\020\003\"I\n\023GetBlockInfoRequest\022\016\n\004has"
  "h\030\001 \001(\014H\000\022\020\n\006height\030\002 \001(\005H\000B\020\n\016hash_or_h"
  "eight\"3\n\024GetBlockInfoResponse\022\033\n\004info\030\001 "
  "\001(\0132\r.pb.BlockInfo\"`\n\017GetBlockRequest\022\016\n"
  "\004hash\030\001 \001(\014H\000\022\020\n\006height\030\002 \001(\005H\000\022\031\n\021full_"
  "transactions\030\003 \001(\010B\020\n\016hash_or_height\",\n\020"
  "GetBlockResponse\022\030\n\005block\030\001 \001(\0132\t.pb.Blo"
  "ck\"H\n\022GetRawBlockRequest\022\016\n\004hash\030\001 \001(\014H\000"
  "\022\020\n\006height\030\002 \001(\005H\000B\020\n\016hash_or_height\"$\n\023"
  "GetRawBlockResponse\022\r\n\005block\030\001 \001(\014\"K\n\025Ge"
  "tBlockFilterRequest\022\016\n\004hash\030\001 \001(\014H\000\022\020\n\006h"
  "eight\030\002 \001(\005H\000B\020\n\016hash_or_height\"(\n\026GetBl"
  "ockFilterResponse\022\016\n\006filter\030\001 \001(\014\"D\n\021Get"
  "HeadersRequest\022\034\n\024block_locator_hashes\030\001"
  " \003(\014\022\021\n\tstop_hash\030\002 \001(\014\"4\n\022GetHeadersRes"
  "ponse\022\036\n\007headers\030\001 \003(\0132\r.pb.BlockInfo\"%\n"
  "\025GetTransactionRequest\022\014\n\004hash\030\001 \001(\014\">\n\026"
  "GetTransactionResponse\022$\n\013transaction\030\001 "
  "\001(\0132\017.pb.Transaction\"(\n\030GetRawTransactio"
  "nRequest\022\014\n\004hash\030\001 \001(\014\"0\n\031GetRawTransact"
  "ionResponse\022\023\n\013transaction\030\001 \001(\014\"\204\001\n\035Get"
  "AddressTransactionsRequest\022\017\n\007address\030\001 "
  "\001(\t\022\017\n\007nb_skip\030\002 \001(\r\022\020\n\010nb_fetch\030\003 \001(\r\022\016"
  "\n\004hash\030\004 \001(\014H\000\022\020\n\006height\030\005 \001(\005H\000B\r\n\013star"
  "t_block\"\213\001\n\036GetAddressTransactionsRespon"
  "se\022/\n\026confirmed_transactions\030\001 \003(\0132\017.pb."
  "Transaction\0228\n\030unconfirmed_transactions\030"
  "\002 \003(\0132\026.pb.MempoolTransaction\"\207\001\n GetRaw"
  "AddressTransactionsRequest\022\017\n\007address\030\001 "
  "\001(\t\022\017\n\007nb_skip\030\002 \001(\r\022\020\n\010nb_fetch\030\003 \001(\r\022\016"
  "\n\004hash\030\004 \001(\014H\000\022\020\n\006height\030\005 \001(\005H\000B\r\n\013star"
  "t_block\"e\n!GetRawAddressTransactionsResp"
  "onse\022\036\n\026confirmed_transactions\030\001 \003(\014\022 \n\030"
  "unconfirmed_transactions\030\002 \003(\014\"K\n\037GetAdd"
  "ressUnspentOutputsRequest\022\017\n\007address\030\001 \001"
  "(\t\022\027\n\017include_mempool\030\002 \001(\010\"F\n GetAddres"
  "sUnspentOutputsResponse\022\"\n\007outputs\030\001 \003(\013"
  "2\021.pb.UnspentOutput\"O\n\027GetUnspentOutputR"
  "equest\022\014\n\004hash\030\001 \001(\014\022\r\n\005index\030\002 \001(\r\022\027\n\017i"
  "nclude_mempool\030\003 \001(\010\"\235\001\n\030GetUnspentOutpu"
  "tResponse\0220\n\010outpoint\030\001 \001(\0132\036.pb.Transac"
  "tion.Input.Outpoint\022\025\n\rpubkey_script\030\002 \001"
  "(\014\022\r\n\005value\030\003 \001(\003\022\023\n\013is_coinbase\030\004 \001(\010\022\024"
  "\n\014block_height\030\005 \001(\005\"1\n\025GetMerkleProofRe"
  "quest\022\030\n\020transaction_hash\030\001 \001(\014\"U\n\026GetMe"
  "rkleProofResponse\022\034\n\005block\030\001 \001(\0132\r.pb.Bl"
  "ockInfo\022\016\n\006hashes\030\002 \003(\014\022\r\n\005flags\030\003 \001(\014\"/"
  "\n\030SubmitTransactionRequest\022\023\n\013transactio"
  "n\030\001 \001(\014\")\n\031SubmitTransactionResponse\022\014\n\004"
  "hash\030\001 \001(\014\"\275\001\n\034SubscribeTransactionsRequ"
  "est\022(\n\tsubscribe\030\001 \001(\0132\025.pb.TransactionF"
  "ilter\022*\n\013unsubscribe\030\002 \001(\0132\025.pb.Transact"
  "ionFilter\022\027\n\017include_mempool\030\003 \001(\010\022\030\n\020in"
  "clude_in_block\030\004 \001(\010\022\024\n\014serialize_tx\030\005 \001"
  "(\010\"`\n\026SubscribeBlocksRequest\022\022\n\nfull_blo"
  "ck\030\001 \001(\010\022\031\n\021full_transactions\030\002 \001(\010\022\027\n\017s"
  "erialize_block\030\003 \001(\010\"\326\001\n\021BlockNotificati"
  "on\022(\n\004type\030\001 \001(\0162\032.pb.BlockNotification."
  "Type\022#\n\nblock_info\030\002 \001(\0132\r.pb.BlockInfoH"
  "\000\022$\n\017marshaled_block\030\003 \001(\0132\t.pb.BlockH\000\022"
  "\032\n\020serialized_block\030\004 \001(\014H\000\"\'\n\004Type\022\r\n\tC"
  "ONNECTED\020\000\022\020\n\014DISCONNECTED\020\001B\007\n\005block\"\217\002"
  "\n\027TransactionNotification\022.\n\004type\030\001 \001(\0162"
  " .pb.TransactionNotification.Type\0220\n\025con"
  "firmed_transaction\030\002 \001(\0132\017.pb.Transactio"
  "nH\000\0229\n\027unconfirmed_transaction\030\003 \001(\0132\026.p"
  "b.MempoolTransactionH\000\022 \n\026serialized_tra"
  "nsaction\030\004 \001(\014H\000\"&\n\004Type\022\017\n\013UNCONFIRMED\020"
  "\000\022\r\n\tCONFIRMED\020\001B\r\n\013transaction\"\376\001\n\tBloc"
  "kInfo\022\014\n\004hash\030\001 \001(\014\022\016\n\006height\030\002 \001(\005\022\017\n\007v"
  "ersion\030\003 \001(\005\022\026\n\016previous_block\030\004 \001(\014\022\023\n\013"
  "merkle_root\030\005 \001(\014\022\021\n\ttimestamp\030\006 \001(\003\022\014\n\004"
  "bits\030\007 \001(\r\022\r\n\005nonce\030\010 \001(\r\022\025\n\rconfirmatio"
  "ns\030\t \001(\005\022\022\n\ndifficulty\030\n \001(\001\022\027\n\017next_blo"
  "ck_hash\030\013 \001(\014\022\014\n\004size\030\014 \001(\005\022\023\n\013median_ti"
  "me\030\r \001(\003\"\300\001\n\005Block\022\033\n\004info\030\001 \001(\0132\r.pb.Bl"
  "ockInfo\0223\n\020transaction_data\030\002 \003(\0132\031.pb.B"
  "lock.TransactionData\032e\n\017TransactionData\022"
  "\032\n\020transaction_hash\030\001 \001(\014H\000\022&\n\013transacti"
  "on\030\002 \001(\0132\017.pb.TransactionH\000B\016\n\014txids_or_"
  "txs\"\316\004\n\013Transaction\022\014\n\004hash\030\001 \001(\014\022\017\n\007ver"
  "sion\030\002 \001(\005\022%\n\006inputs\030\003 \003(\0132\025.pb.Transact"
  "ion.Input\022\'\n\007outputs\030\004 \003(\0132\026.pb.Transact"
  "ion.Output\022\021\n\tlock_time\030\005 \001(\r\022\014\n\004size\030\010 "
  "\001(\005\022\021\n\ttimestamp\030\t \001(\003\022\025\n\rconfirmations\030"
  "\n \001(\005\022\024\n\014block_height\030\013 \001(\005\022\022\n\nblock_has"
  "h\030\014 \001(\014\032\326\001\n\005Input\022\r\n\005index\030\001 \001(\r\0220\n\010outp"
  "oint\030\002 \001(\0132\036.pb.Transaction.Input.Outpoi"
  "nt\022\030\n\020signature_script\030\003 \001(\014\022\020\n\010sequence"
  "\030\004 \001(\r\022\r\n\005value\030\005 \001(\003\022\027\n\017previous_script"
  "\030\006 \001(\014\022\017\n\007address\030\007 \001(\t\032\'\n\010Outpoint\022\014\n\004h"
  "ash\030\001 \001(\014\022\r\n\005index\030\002 \001(\r\032\201\001\n\006Output\022\r\n\005i"
  "ndex\030\001 \001(\r\022\r\n\005value\030\002 \001(\003\022\025\n\rpubkey_scri"
  "pt\030\003 \001(\014\022\017\n\007address\030\004 \001(\t\022\024\n\014script_clas"
  "s\030\005 \001(\t\022\033\n\023disassembled_script\030\006 \001(\t\"\240\001\n"
  "\022MempoolTransaction\022$\n\013transaction\030\001 \001(\013"
  "2\017.pb.Transaction\022\022\n\nadded_time\030\002 \001(\003\022\024\n"
  "\014added_height\030\003 \001(\005\022\013\n\003fee\030\004 \001(\003\022\022\n\nfee_"
  "per_kb\030\005 \001(\003\022\031\n\021starting_priority\030\006 \001(\001\""
  "\222\001\n\rUnspentOutput\0220\n\010outpoint\030\001 \001(\0132\036.pb"
  ".Transaction.Input.Outpoint\022\025\n\rpubkey_sc"
  "ript\030\002 \001(\014\022\r\n\005value\030\003 \001(\003\022\023\n\013is_coinbase"
  "\030\004 \001(\010\022\024\n\014block_height\030\005 \001(\005\"\212\001\n\021Transac"
  "tionFilter\022\021\n\taddresses\030\001 \003(\t\0221\n\toutpoin"
  "ts\030\002 \003(\0132\036.pb.Transaction.Input.Outpoint"
  "\022\025\n\rdata_elements\030\003 \003(\014\022\030\n\020all_transacti"
  "ons\030\004 \001(\0102\200\014\n\006bchrpc\022I\n\016GetMempoolInfo\022\031"
  ".pb.GetMempoolInfoRequest\032\032.pb.GetMempoo"
  "lInfoResponse\"\000\022=\n\nGetMempool\022\025.pb.GetMe"
  "mpoolRequest\032\026.pb.GetMempoolResponse\"\000\022R"
  "\n\021GetBlockchainInfo\022\034.pb.GetBlockchainIn"
  "foRequest\032\035.pb.GetBlockchainInfoResponse"
  "\"\000\022C\n\014GetBlockInfo\022\027.pb.GetBlockInfoRequ"
  "est\032\030.pb.GetBlockInfoResponse\"\000\0227\n\010GetBl"
  "ock\022\023.pb.GetBlockRequest\032\024.pb.GetBlockRe"
  "sponse\"\000\022@\n\013GetRawBlock\022\026.pb.GetRawBlock"
  "Request\032\027.pb.GetRawBlockResponse\"\000\022I\n\016Ge"
  "tBlockFilter\022\031.pb.GetBlockFilterRequest\032"
  "\032.pb.GetBlockFilterResponse\"\000\022=\n\nGetHead"
  "ers\022\025.pb.GetHeadersRequest\032\026.pb.GetHeade"
  "rsResponse\"\000\022I\n\016GetTransaction\022\031.pb.GetT"
  "ransactionRequest\032\032.pb.GetTransactionRes"
  "ponse\"\000\022R\n\021GetRawTransaction\022\034.pb.GetRaw"
  "TransactionRequest\032\035.pb.GetRawTransactio"
  "nResponse\"\000\022a\n\026GetAddressTransactions\022!."
  "pb.GetAddressTransactionsRequest\032\".pb.Ge"
  "tAddressTransactionsResponse\"\000\022j\n\031GetRaw"
  "AddressTransactions\022$.pb.GetRawAddressTr"
  "ansactionsRequest\032%.pb.GetRawAddressTran"
  "sactionsResponse\"\000\022g\n\030GetAddressUnspentO"
  "utputs\022#.pb.GetAddressUnspentOutputsRequ"
  "est\032$.pb.GetAddressUnspentOutputsRespons"
  "e\"\000\022O\n\020GetUnspentOutput\022\033.pb.GetUnspentO"
  "utputRequest\032\034.pb.GetUnspentOutputRespon"
  "se\"\000\022I\n\016GetMerkleProof\022\031.pb.GetMerklePro"
  "ofRequest\032\032.pb.GetMerkleProofResponse\"\000\022"
  "R\n\021SubmitTransaction\022\034.pb.SubmitTransact"
  "ionRequest\032\035.pb.SubmitTransactionRespons"
  "e\"\000\022Z\n\025SubscribeTransactions\022 .pb.Subscr"
  "ibeTransactionsRequest\032\033.pb.TransactionN"
  "otification\"\0000\001\022a\n\032SubscribeTransactionS"
  "tream\022 .pb.SubscribeTransactionsRequest\032"
  "\033.pb.TransactionNotification\"\000(\0010\001\022H\n\017Su"
  "bscribeBlocks\022\032.pb.SubscribeBlocksReques"
  "t\032\025.pb.BlockNotification\"\0000\001B0\n\rcash.bch"
  "d.rpcZ\037github.com/gcash/bchd/bchrpc/pbb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bchrpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bchrpc_2eproto_sccs[47] = {
  &scc_info_Block_bchrpc_2eproto.base,
  &scc_info_Block_TransactionData_bchrpc_2eproto.base,
  &scc_info_BlockInfo_bchrpc_2eproto.base,
  &scc_info_BlockNotification_bchrpc_2eproto.base,
  &scc_info_GetAddressTransactionsRequest_bchrpc_2eproto.base,
  &scc_info_GetAddressTransactionsResponse_bchrpc_2eproto.base,
  &scc_info_GetAddressUnspentOutputsRequest_bchrpc_2eproto.base,
  &scc_info_GetAddressUnspentOutputsResponse_bchrpc_2eproto.base,
  &scc_info_GetBlockFilterRequest_bchrpc_2eproto.base,
  &scc_info_GetBlockFilterResponse_bchrpc_2eproto.base,
  &scc_info_GetBlockInfoRequest_bchrpc_2eproto.base,
  &scc_info_GetBlockInfoResponse_bchrpc_2eproto.base,
  &scc_info_GetBlockRequest_bchrpc_2eproto.base,
  &scc_info_GetBlockResponse_bchrpc_2eproto.base,
  &scc_info_GetBlockchainInfoRequest_bchrpc_2eproto.base,
  &scc_info_GetBlockchainInfoResponse_bchrpc_2eproto.base,
  &scc_info_GetHeadersRequest_bchrpc_2eproto.base,
  &scc_info_GetHeadersResponse_bchrpc_2eproto.base,
  &scc_info_GetMempoolInfoRequest_bchrpc_2eproto.base,
  &scc_info_GetMempoolInfoResponse_bchrpc_2eproto.base,
  &scc_info_GetMempoolRequest_bchrpc_2eproto.base,
  &scc_info_GetMempoolResponse_bchrpc_2eproto.base,
  &scc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto.base,
  &scc_info_GetMerkleProofRequest_bchrpc_2eproto.base,
  &scc_info_GetMerkleProofResponse_bchrpc_2eproto.base,
  &scc_info_GetRawAddressTransactionsRequest_bchrpc_2eproto.base,
  &scc_info_GetRawAddressTransactionsResponse_bchrpc_2eproto.base,
  &scc_info_GetRawBlockRequest_bchrpc_2eproto.base,
  &scc_info_GetRawBlockResponse_bchrpc_2eproto.base,
  &scc_info_GetRawTransactionRequest_bchrpc_2eproto.base,
  &scc_info_GetRawTransactionResponse_bchrpc_2eproto.base,
  &scc_info_GetTransactionRequest_bchrpc_2eproto.base,
  &scc_info_GetTransactionResponse_bchrpc_2eproto.base,
  &scc_info_GetUnspentOutputRequest_bchrpc_2eproto.base,
  &scc_info_GetUnspentOutputResponse_bchrpc_2eproto.base,
  &scc_info_MempoolTransaction_bchrpc_2eproto.base,
  &scc_info_SubmitTransactionRequest_bchrpc_2eproto.base,
  &scc_info_SubmitTransactionResponse_bchrpc_2eproto.base,
  &scc_info_SubscribeBlocksRequest_bchrpc_2eproto.base,
  &scc_info_SubscribeTransactionsRequest_bchrpc_2eproto.base,
  &scc_info_Transaction_bchrpc_2eproto.base,
  &scc_info_Transaction_Input_bchrpc_2eproto.base,
  &scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base,
  &scc_info_Transaction_Output_bchrpc_2eproto.base,
  &scc_info_TransactionFilter_bchrpc_2eproto.base,
  &scc_info_TransactionNotification_bchrpc_2eproto.base,
  &scc_info_UnspentOutput_bchrpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bchrpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bchrpc_2eproto = {
  false, false, descriptor_table_protodef_bchrpc_2eproto, "bchrpc.proto", 6486,
  &descriptor_table_bchrpc_2eproto_once, descriptor_table_bchrpc_2eproto_sccs, descriptor_table_bchrpc_2eproto_deps, 47, 0,
  schemas, file_default_instances, TableStruct_bchrpc_2eproto::offsets,
  file_level_metadata_bchrpc_2eproto, 47, file_level_enum_descriptors_bchrpc_2eproto, file_level_service_descriptors_bchrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bchrpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bchrpc_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetBlockchainInfoResponse_BitcoinNet_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bchrpc_2eproto);
  return file_level_enum_descriptors_bchrpc_2eproto[0];
}
bool GetBlockchainInfoResponse_BitcoinNet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::MAINNET;
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::REGTEST;
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::TESTNET3;
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::SIMNET;
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::BitcoinNet_MIN;
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::BitcoinNet_MAX;
constexpr int GetBlockchainInfoResponse::BitcoinNet_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockNotification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bchrpc_2eproto);
  return file_level_enum_descriptors_bchrpc_2eproto[1];
}
bool BlockNotification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlockNotification_Type BlockNotification::CONNECTED;
constexpr BlockNotification_Type BlockNotification::DISCONNECTED;
constexpr BlockNotification_Type BlockNotification::Type_MIN;
constexpr BlockNotification_Type BlockNotification::Type_MAX;
constexpr int BlockNotification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionNotification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bchrpc_2eproto);
  return file_level_enum_descriptors_bchrpc_2eproto[2];
}
bool TransactionNotification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionNotification_Type TransactionNotification::UNCONFIRMED;
constexpr TransactionNotification_Type TransactionNotification::CONFIRMED;
constexpr TransactionNotification_Type TransactionNotification::Type_MIN;
constexpr TransactionNotification_Type TransactionNotification::Type_MAX;
constexpr int TransactionNotification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetMempoolInfoRequest::InitAsDefaultInstance() {
}
class GetMempoolInfoRequest::_Internal {
 public:
};

GetMempoolInfoRequest::GetMempoolInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMempoolInfoRequest)
}
GetMempoolInfoRequest::GetMempoolInfoRequest(const GetMempoolInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetMempoolInfoRequest)
}

void GetMempoolInfoRequest::SharedCtor() {
}

GetMempoolInfoRequest::~GetMempoolInfoRequest() {
  // @@protoc_insertion_point(destructor:pb.GetMempoolInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMempoolInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMempoolInfoRequest::ArenaDtor(void* object) {
  GetMempoolInfoRequest* _this = reinterpret_cast< GetMempoolInfoRequest* >(object);
  (void)_this;
}
void GetMempoolInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMempoolInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolInfoRequest& GetMempoolInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolInfoRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMempoolInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMempoolInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMempoolInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMempoolInfoRequest)
  return target;
}

size_t GetMempoolInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMempoolInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMempoolInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMempoolInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMempoolInfoRequest)
    MergeFrom(*source);
  }
}

void GetMempoolInfoRequest::MergeFrom(const GetMempoolInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMempoolInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetMempoolInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMempoolInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolInfoRequest::CopyFrom(const GetMempoolInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMempoolInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolInfoRequest::IsInitialized() const {
  return true;
}

void GetMempoolInfoRequest::InternalSwap(GetMempoolInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMempoolInfoResponse::InitAsDefaultInstance() {
}
class GetMempoolInfoResponse::_Internal {
 public:
};

GetMempoolInfoResponse::GetMempoolInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMempoolInfoResponse)
}
GetMempoolInfoResponse::GetMempoolInfoResponse(const GetMempoolInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&size_)) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:pb.GetMempoolInfoResponse)
}

void GetMempoolInfoResponse::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&size_)) + sizeof(bytes_));
}

GetMempoolInfoResponse::~GetMempoolInfoResponse() {
  // @@protoc_insertion_point(destructor:pb.GetMempoolInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMempoolInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMempoolInfoResponse::ArenaDtor(void* object) {
  GetMempoolInfoResponse* _this = reinterpret_cast< GetMempoolInfoResponse* >(object);
  (void)_this;
}
void GetMempoolInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMempoolInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolInfoResponse& GetMempoolInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolInfoResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMempoolInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&size_)) + sizeof(bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMempoolInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMempoolInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  // uint32 bytes = 2;
  if (this->bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMempoolInfoResponse)
  return target;
}

size_t GetMempoolInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMempoolInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // uint32 bytes = 2;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMempoolInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMempoolInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMempoolInfoResponse)
    MergeFrom(*source);
  }
}

void GetMempoolInfoResponse::MergeFrom(const GetMempoolInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMempoolInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
}

void GetMempoolInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMempoolInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolInfoResponse::CopyFrom(const GetMempoolInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMempoolInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolInfoResponse::IsInitialized() const {
  return true;
}

void GetMempoolInfoResponse::InternalSwap(GetMempoolInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMempoolInfoResponse, bytes_)
      + sizeof(GetMempoolInfoResponse::bytes_)
      - PROTOBUF_FIELD_OFFSET(GetMempoolInfoResponse, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMempoolRequest::InitAsDefaultInstance() {
}
class GetMempoolRequest::_Internal {
 public:
};

GetMempoolRequest::GetMempoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMempoolRequest)
}
GetMempoolRequest::GetMempoolRequest(const GetMempoolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_transactions_ = from.full_transactions_;
  // @@protoc_insertion_point(copy_constructor:pb.GetMempoolRequest)
}

void GetMempoolRequest::SharedCtor() {
  full_transactions_ = false;
}

GetMempoolRequest::~GetMempoolRequest() {
  // @@protoc_insertion_point(destructor:pb.GetMempoolRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMempoolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMempoolRequest::ArenaDtor(void* object) {
  GetMempoolRequest* _this = reinterpret_cast< GetMempoolRequest* >(object);
  (void)_this;
}
void GetMempoolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMempoolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolRequest& GetMempoolRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMempoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_transactions_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMempoolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool full_transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          full_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMempoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool full_transactions = 1;
  if (this->full_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_full_transactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMempoolRequest)
  return target;
}

size_t GetMempoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMempoolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool full_transactions = 1;
  if (this->full_transactions() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMempoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMempoolRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMempoolRequest)
    MergeFrom(*source);
  }
}

void GetMempoolRequest::MergeFrom(const GetMempoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMempoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_transactions() != 0) {
    _internal_set_full_transactions(from._internal_full_transactions());
  }
}

void GetMempoolRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMempoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolRequest::CopyFrom(const GetMempoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMempoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolRequest::IsInitialized() const {
  return true;
}

void GetMempoolRequest::InternalSwap(GetMempoolRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(full_transactions_, other->full_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMempoolResponse_TransactionData::InitAsDefaultInstance() {
  ::pb::_GetMempoolResponse_TransactionData_default_instance_.transaction_hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetMempoolResponse_TransactionData_default_instance_.transaction_ = const_cast< ::pb::Transaction*>(
      ::pb::Transaction::internal_default_instance());
}
class GetMempoolResponse_TransactionData::_Internal {
 public:
  static const ::pb::Transaction& transaction(const GetMempoolResponse_TransactionData* msg);
};

const ::pb::Transaction&
GetMempoolResponse_TransactionData::_Internal::transaction(const GetMempoolResponse_TransactionData* msg) {
  return *msg->txids_or_txs_.transaction_;
}
void GetMempoolResponse_TransactionData::set_allocated_transaction(::pb::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_txids_or_txs();
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    set_has_transaction();
    txids_or_txs_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetMempoolResponse.TransactionData.transaction)
}
GetMempoolResponse_TransactionData::GetMempoolResponse_TransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMempoolResponse.TransactionData)
}
GetMempoolResponse_TransactionData::GetMempoolResponse_TransactionData(const GetMempoolResponse_TransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_txids_or_txs();
  switch (from.txids_or_txs_case()) {
    case kTransactionHash: {
      _internal_set_transaction_hash(from._internal_transaction_hash());
      break;
    }
    case kTransaction: {
      _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetMempoolResponse.TransactionData)
}

void GetMempoolResponse_TransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto.base);
  clear_has_txids_or_txs();
}

GetMempoolResponse_TransactionData::~GetMempoolResponse_TransactionData() {
  // @@protoc_insertion_point(destructor:pb.GetMempoolResponse.TransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMempoolResponse_TransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_txids_or_txs()) {
    clear_txids_or_txs();
  }
}

void GetMempoolResponse_TransactionData::ArenaDtor(void* object) {
  GetMempoolResponse_TransactionData* _this = reinterpret_cast< GetMempoolResponse_TransactionData* >(object);
  (void)_this;
}
void GetMempoolResponse_TransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMempoolResponse_TransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolResponse_TransactionData& GetMempoolResponse_TransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolResponse_TransactionData_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolResponse_TransactionData::clear_txids_or_txs() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetMempoolResponse.TransactionData)
  switch (txids_or_txs_case()) {
    case kTransactionHash: {
      txids_or_txs_.transaction_hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kTransaction: {
      if (GetArena() == nullptr) {
        delete txids_or_txs_.transaction_;
      }
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TXIDS_OR_TXS_NOT_SET;
}


void GetMempoolResponse_TransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMempoolResponse.TransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_txids_or_txs();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMempoolResponse_TransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Transaction transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolResponse_TransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMempoolResponse.TransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_hash = 1;
  if (_internal_has_transaction_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_hash(), target);
  }

  // .pb.Transaction transaction = 2;
  if (_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMempoolResponse.TransactionData)
  return target;
}

size_t GetMempoolResponse_TransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMempoolResponse.TransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (txids_or_txs_case()) {
    // bytes transaction_hash = 1;
    case kTransactionHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction_hash());
      break;
    }
    // .pb.Transaction transaction = 2;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *txids_or_txs_.transaction_);
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolResponse_TransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMempoolResponse.TransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolResponse_TransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolResponse_TransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMempoolResponse.TransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMempoolResponse.TransactionData)
    MergeFrom(*source);
  }
}

void GetMempoolResponse_TransactionData::MergeFrom(const GetMempoolResponse_TransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMempoolResponse.TransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.txids_or_txs_case()) {
    case kTransactionHash: {
      _internal_set_transaction_hash(from._internal_transaction_hash());
      break;
    }
    case kTransaction: {
      _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
}

void GetMempoolResponse_TransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMempoolResponse.TransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolResponse_TransactionData::CopyFrom(const GetMempoolResponse_TransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMempoolResponse.TransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolResponse_TransactionData::IsInitialized() const {
  return true;
}

void GetMempoolResponse_TransactionData::InternalSwap(GetMempoolResponse_TransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(txids_or_txs_, other->txids_or_txs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolResponse_TransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMempoolResponse::InitAsDefaultInstance() {
}
class GetMempoolResponse::_Internal {
 public:
};

GetMempoolResponse::GetMempoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transaction_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMempoolResponse)
}
GetMempoolResponse::GetMempoolResponse(const GetMempoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_data_(from.transaction_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetMempoolResponse)
}

void GetMempoolResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMempoolResponse_bchrpc_2eproto.base);
}

GetMempoolResponse::~GetMempoolResponse() {
  // @@protoc_insertion_point(destructor:pb.GetMempoolResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMempoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMempoolResponse::ArenaDtor(void* object) {
  GetMempoolResponse* _this = reinterpret_cast< GetMempoolResponse* >(object);
  (void)_this;
}
void GetMempoolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMempoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolResponse& GetMempoolResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMempoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMempoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.GetMempoolResponse.TransactionData transaction_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMempoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.GetMempoolResponse.TransactionData transaction_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transaction_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMempoolResponse)
  return target;
}

size_t GetMempoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMempoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.GetMempoolResponse.TransactionData transaction_data = 1;
  total_size += 1UL * this->_internal_transaction_data_size();
  for (const auto& msg : this->transaction_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMempoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMempoolResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMempoolResponse)
    MergeFrom(*source);
  }
}

void GetMempoolResponse::MergeFrom(const GetMempoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMempoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_data_.MergeFrom(from.transaction_data_);
}

void GetMempoolResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMempoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolResponse::CopyFrom(const GetMempoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMempoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolResponse::IsInitialized() const {
  return true;
}

void GetMempoolResponse::InternalSwap(GetMempoolResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_data_.InternalSwap(&other->transaction_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockchainInfoRequest::InitAsDefaultInstance() {
}
class GetBlockchainInfoRequest::_Internal {
 public:
};

GetBlockchainInfoRequest::GetBlockchainInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockchainInfoRequest)
}
GetBlockchainInfoRequest::GetBlockchainInfoRequest(const GetBlockchainInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockchainInfoRequest)
}

void GetBlockchainInfoRequest::SharedCtor() {
}

GetBlockchainInfoRequest::~GetBlockchainInfoRequest() {
  // @@protoc_insertion_point(destructor:pb.GetBlockchainInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockchainInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlockchainInfoRequest::ArenaDtor(void* object) {
  GetBlockchainInfoRequest* _this = reinterpret_cast< GetBlockchainInfoRequest* >(object);
  (void)_this;
}
void GetBlockchainInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockchainInfoRequest& GetBlockchainInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockchainInfoRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockchainInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockchainInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockchainInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockchainInfoRequest)
  return target;
}

size_t GetBlockchainInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockchainInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockchainInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockchainInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockchainInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockchainInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockchainInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockchainInfoRequest)
    MergeFrom(*source);
  }
}

void GetBlockchainInfoRequest::MergeFrom(const GetBlockchainInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockchainInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetBlockchainInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockchainInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockchainInfoRequest::CopyFrom(const GetBlockchainInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockchainInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainInfoRequest::IsInitialized() const {
  return true;
}

void GetBlockchainInfoRequest::InternalSwap(GetBlockchainInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockchainInfoResponse::InitAsDefaultInstance() {
}
class GetBlockchainInfoResponse::_Internal {
 public:
};

GetBlockchainInfoResponse::GetBlockchainInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockchainInfoResponse)
}
GetBlockchainInfoResponse::GetBlockchainInfoResponse(const GetBlockchainInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  best_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_best_block_hash().empty()) {
    best_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_best_block_hash(),
      GetArena());
  }
  ::memcpy(&bitcoin_net_, &from.bitcoin_net_,
    static_cast<size_t>(reinterpret_cast<char*>(&addr_index_) -
    reinterpret_cast<char*>(&bitcoin_net_)) + sizeof(addr_index_));
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockchainInfoResponse)
}

void GetBlockchainInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockchainInfoResponse_bchrpc_2eproto.base);
  best_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bitcoin_net_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_index_) -
      reinterpret_cast<char*>(&bitcoin_net_)) + sizeof(addr_index_));
}

GetBlockchainInfoResponse::~GetBlockchainInfoResponse() {
  // @@protoc_insertion_point(destructor:pb.GetBlockchainInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockchainInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  best_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainInfoResponse::ArenaDtor(void* object) {
  GetBlockchainInfoResponse* _this = reinterpret_cast< GetBlockchainInfoResponse* >(object);
  (void)_this;
}
void GetBlockchainInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockchainInfoResponse& GetBlockchainInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockchainInfoResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockchainInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockchainInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  best_block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&bitcoin_net_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_index_) -
      reinterpret_cast<char*>(&bitcoin_net_)) + sizeof(addr_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.GetBlockchainInfoResponse.BitcoinNet bitcoin_net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bitcoin_net(static_cast<::pb::GetBlockchainInfoResponse_BitcoinNet>(val));
        } else goto handle_unusual;
        continue;
      // int32 best_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          best_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes best_block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_best_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double difficulty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 median_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          median_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tx_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool addr_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          addr_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockchainInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.GetBlockchainInfoResponse.BitcoinNet bitcoin_net = 1;
  if (this->bitcoin_net() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bitcoin_net(), target);
  }

  // int32 best_height = 2;
  if (this->best_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_best_height(), target);
  }

  // bytes best_block_hash = 3;
  if (this->best_block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_best_block_hash(), target);
  }

  // double difficulty = 4;
  if (!(this->difficulty() <= 0 && this->difficulty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_difficulty(), target);
  }

  // int64 median_time = 5;
  if (this->median_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_median_time(), target);
  }

  // bool tx_index = 6;
  if (this->tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_tx_index(), target);
  }

  // bool addr_index = 7;
  if (this->addr_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_addr_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockchainInfoResponse)
  return target;
}

size_t GetBlockchainInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockchainInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes best_block_hash = 3;
  if (this->best_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_best_block_hash());
  }

  // .pb.GetBlockchainInfoResponse.BitcoinNet bitcoin_net = 1;
  if (this->bitcoin_net() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bitcoin_net());
  }

  // int32 best_height = 2;
  if (this->best_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_height());
  }

  // double difficulty = 4;
  if (!(this->difficulty() <= 0 && this->difficulty() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 median_time = 5;
  if (this->median_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_median_time());
  }

  // bool tx_index = 6;
  if (this->tx_index() != 0) {
    total_size += 1 + 1;
  }

  // bool addr_index = 7;
  if (this->addr_index() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockchainInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockchainInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockchainInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockchainInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockchainInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockchainInfoResponse)
    MergeFrom(*source);
  }
}

void GetBlockchainInfoResponse::MergeFrom(const GetBlockchainInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockchainInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.best_block_hash().size() > 0) {
    _internal_set_best_block_hash(from._internal_best_block_hash());
  }
  if (from.bitcoin_net() != 0) {
    _internal_set_bitcoin_net(from._internal_bitcoin_net());
  }
  if (from.best_height() != 0) {
    _internal_set_best_height(from._internal_best_height());
  }
  if (!(from.difficulty() <= 0 && from.difficulty() >= 0)) {
    _internal_set_difficulty(from._internal_difficulty());
  }
  if (from.median_time() != 0) {
    _internal_set_median_time(from._internal_median_time());
  }
  if (from.tx_index() != 0) {
    _internal_set_tx_index(from._internal_tx_index());
  }
  if (from.addr_index() != 0) {
    _internal_set_addr_index(from._internal_addr_index());
  }
}

void GetBlockchainInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockchainInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockchainInfoResponse::CopyFrom(const GetBlockchainInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockchainInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainInfoResponse::IsInitialized() const {
  return true;
}

void GetBlockchainInfoResponse::InternalSwap(GetBlockchainInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  best_block_hash_.Swap(&other->best_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockchainInfoResponse, addr_index_)
      + sizeof(GetBlockchainInfoResponse::addr_index_)
      - PROTOBUF_FIELD_OFFSET(GetBlockchainInfoResponse, bitcoin_net_)>(
          reinterpret_cast<char*>(&bitcoin_net_),
          reinterpret_cast<char*>(&other->bitcoin_net_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockInfoRequest::InitAsDefaultInstance() {
  ::pb::_GetBlockInfoRequest_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetBlockInfoRequest_default_instance_.height_ = 0;
}
class GetBlockInfoRequest::_Internal {
 public:
};

GetBlockInfoRequest::GetBlockInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockInfoRequest)
}
GetBlockInfoRequest::GetBlockInfoRequest(const GetBlockInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_hash_or_height();
  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockInfoRequest)
}

void GetBlockInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockInfoRequest_bchrpc_2eproto.base);
  clear_has_hash_or_height();
}

GetBlockInfoRequest::~GetBlockInfoRequest() {
  // @@protoc_insertion_point(destructor:pb.GetBlockInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
}

void GetBlockInfoRequest::ArenaDtor(void* object) {
  GetBlockInfoRequest* _this = reinterpret_cast< GetBlockInfoRequest* >(object);
  (void)_this;
}
void GetBlockInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockInfoRequest& GetBlockInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockInfoRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockInfoRequest::clear_hash_or_height() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetBlockInfoRequest)
  switch (hash_or_height_case()) {
    case kHash: {
      hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kHeight: {
      // No need to clear
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}


void GetBlockInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_hash_or_height();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 height = 2;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockInfoRequest)
  return target;
}

size_t GetBlockInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (hash_or_height_case()) {
    // bytes hash = 1;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    // int32 height = 2;
    case kHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockInfoRequest)
    MergeFrom(*source);
  }
}

void GetBlockInfoRequest::MergeFrom(const GetBlockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
}

void GetBlockInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockInfoRequest::CopyFrom(const GetBlockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockInfoRequest::IsInitialized() const {
  return true;
}

void GetBlockInfoRequest::InternalSwap(GetBlockInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hash_or_height_, other->hash_or_height_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockInfoResponse::InitAsDefaultInstance() {
  ::pb::_GetBlockInfoResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::pb::BlockInfo*>(
      ::pb::BlockInfo::internal_default_instance());
}
class GetBlockInfoResponse::_Internal {
 public:
  static const ::pb::BlockInfo& info(const GetBlockInfoResponse* msg);
};

const ::pb::BlockInfo&
GetBlockInfoResponse::_Internal::info(const GetBlockInfoResponse* msg) {
  return *msg->info_;
}
GetBlockInfoResponse::GetBlockInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockInfoResponse)
}
GetBlockInfoResponse::GetBlockInfoResponse(const GetBlockInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::pb::BlockInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockInfoResponse)
}

void GetBlockInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockInfoResponse_bchrpc_2eproto.base);
  info_ = nullptr;
}

GetBlockInfoResponse::~GetBlockInfoResponse() {
  // @@protoc_insertion_point(destructor:pb.GetBlockInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void GetBlockInfoResponse::ArenaDtor(void* object) {
  GetBlockInfoResponse* _this = reinterpret_cast< GetBlockInfoResponse* >(object);
  (void)_this;
}
void GetBlockInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockInfoResponse& GetBlockInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockInfoResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.BlockInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.BlockInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockInfoResponse)
  return target;
}

size_t GetBlockInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.BlockInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockInfoResponse)
    MergeFrom(*source);
  }
}

void GetBlockInfoResponse::MergeFrom(const GetBlockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::pb::BlockInfo::MergeFrom(from._internal_info());
  }
}

void GetBlockInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockInfoResponse::CopyFrom(const GetBlockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockInfoResponse::IsInitialized() const {
  return true;
}

void GetBlockInfoResponse::InternalSwap(GetBlockInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockRequest::InitAsDefaultInstance() {
  ::pb::_GetBlockRequest_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetBlockRequest_default_instance_.height_ = 0;
}
class GetBlockRequest::_Internal {
 public:
};

GetBlockRequest::GetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockRequest)
}
GetBlockRequest::GetBlockRequest(const GetBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_transactions_ = from.full_transactions_;
  clear_has_hash_or_height();
  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockRequest)
}

void GetBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockRequest_bchrpc_2eproto.base);
  full_transactions_ = false;
  clear_has_hash_or_height();
}

GetBlockRequest::~GetBlockRequest() {
  // @@protoc_insertion_point(destructor:pb.GetBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
}

void GetBlockRequest::ArenaDtor(void* object) {
  GetBlockRequest* _this = reinterpret_cast< GetBlockRequest* >(object);
  (void)_this;
}
void GetBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockRequest& GetBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockRequest::clear_hash_or_height() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetBlockRequest)
  switch (hash_or_height_case()) {
    case kHash: {
      hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kHeight: {
      // No need to clear
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}


void GetBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_transactions_ = false;
  clear_hash_or_height();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool full_transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          full_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 height = 2;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // bool full_transactions = 3;
  if (this->full_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_full_transactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockRequest)
  return target;
}

size_t GetBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool full_transactions = 3;
  if (this->full_transactions() != 0) {
    total_size += 1 + 1;
  }

  switch (hash_or_height_case()) {
    // bytes hash = 1;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    // int32 height = 2;
    case kHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockRequest)
    MergeFrom(*source);
  }
}

void GetBlockRequest::MergeFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_transactions() != 0) {
    _internal_set_full_transactions(from._internal_full_transactions());
  }
  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
}

void GetBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockRequest::CopyFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockRequest::IsInitialized() const {
  return true;
}

void GetBlockRequest::InternalSwap(GetBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(full_transactions_, other->full_transactions_);
  swap(hash_or_height_, other->hash_or_height_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockResponse::InitAsDefaultInstance() {
  ::pb::_GetBlockResponse_default_instance_._instance.get_mutable()->block_ = const_cast< ::pb::Block*>(
      ::pb::Block::internal_default_instance());
}
class GetBlockResponse::_Internal {
 public:
  static const ::pb::Block& block(const GetBlockResponse* msg);
};

const ::pb::Block&
GetBlockResponse::_Internal::block(const GetBlockResponse* msg) {
  return *msg->block_;
}
GetBlockResponse::GetBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockResponse)
}
GetBlockResponse::GetBlockResponse(const GetBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::pb::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockResponse)
}

void GetBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockResponse_bchrpc_2eproto.base);
  block_ = nullptr;
}

GetBlockResponse::~GetBlockResponse() {
  // @@protoc_insertion_point(destructor:pb.GetBlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void GetBlockResponse::ArenaDtor(void* object) {
  GetBlockResponse* _this = reinterpret_cast< GetBlockResponse* >(object);
  (void)_this;
}
void GetBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockResponse& GetBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Block block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockResponse)
  return target;
}

size_t GetBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockResponse)
    MergeFrom(*source);
  }
}

void GetBlockResponse::MergeFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::pb::Block::MergeFrom(from._internal_block());
  }
}

void GetBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockResponse::CopyFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockResponse::IsInitialized() const {
  return true;
}

void GetBlockResponse::InternalSwap(GetBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawBlockRequest::InitAsDefaultInstance() {
  ::pb::_GetRawBlockRequest_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetRawBlockRequest_default_instance_.height_ = 0;
}
class GetRawBlockRequest::_Internal {
 public:
};

GetRawBlockRequest::GetRawBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetRawBlockRequest)
}
GetRawBlockRequest::GetRawBlockRequest(const GetRawBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_hash_or_height();
  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetRawBlockRequest)
}

void GetRawBlockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawBlockRequest_bchrpc_2eproto.base);
  clear_has_hash_or_height();
}

GetRawBlockRequest::~GetRawBlockRequest() {
  // @@protoc_insertion_point(destructor:pb.GetRawBlockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRawBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
}

void GetRawBlockRequest::ArenaDtor(void* object) {
  GetRawBlockRequest* _this = reinterpret_cast< GetRawBlockRequest* >(object);
  (void)_this;
}
void GetRawBlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawBlockRequest& GetRawBlockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawBlockRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRawBlockRequest::clear_hash_or_height() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetRawBlockRequest)
  switch (hash_or_height_case()) {
    case kHash: {
      hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kHeight: {
      // No need to clear
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}


void GetRawBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetRawBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_hash_or_height();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRawBlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawBlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetRawBlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 height = 2;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetRawBlockRequest)
  return target;
}

size_t GetRawBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetRawBlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (hash_or_height_case()) {
    // bytes hash = 1;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    // int32 height = 2;
    case kHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawBlockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetRawBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawBlockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetRawBlockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetRawBlockRequest)
    MergeFrom(*source);
  }
}

void GetRawBlockRequest::MergeFrom(const GetRawBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetRawBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
}

void GetRawBlockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetRawBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawBlockRequest::CopyFrom(const GetRawBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetRawBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawBlockRequest::IsInitialized() const {
  return true;
}

void GetRawBlockRequest::InternalSwap(GetRawBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hash_or_height_, other->hash_or_height_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawBlockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawBlockResponse::InitAsDefaultInstance() {
}
class GetRawBlockResponse::_Internal {
 public:
};

GetRawBlockResponse::GetRawBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetRawBlockResponse)
}
GetRawBlockResponse::GetRawBlockResponse(const GetRawBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block().empty()) {
    block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetRawBlockResponse)
}

void GetRawBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawBlockResponse_bchrpc_2eproto.base);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRawBlockResponse::~GetRawBlockResponse() {
  // @@protoc_insertion_point(destructor:pb.GetRawBlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRawBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRawBlockResponse::ArenaDtor(void* object) {
  GetRawBlockResponse* _this = reinterpret_cast< GetRawBlockResponse* >(object);
  (void)_this;
}
void GetRawBlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawBlockResponse& GetRawBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawBlockResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRawBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetRawBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRawBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetRawBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block = 1;
  if (this->block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetRawBlockResponse)
  return target;
}

size_t GetRawBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetRawBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block = 1;
  if (this->block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetRawBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetRawBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetRawBlockResponse)
    MergeFrom(*source);
  }
}

void GetRawBlockResponse::MergeFrom(const GetRawBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetRawBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block().size() > 0) {
    _internal_set_block(from._internal_block());
  }
}

void GetRawBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetRawBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawBlockResponse::CopyFrom(const GetRawBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetRawBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawBlockResponse::IsInitialized() const {
  return true;
}

void GetRawBlockResponse::InternalSwap(GetRawBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockFilterRequest::InitAsDefaultInstance() {
  ::pb::_GetBlockFilterRequest_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetBlockFilterRequest_default_instance_.height_ = 0;
}
class GetBlockFilterRequest::_Internal {
 public:
};

GetBlockFilterRequest::GetBlockFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockFilterRequest)
}
GetBlockFilterRequest::GetBlockFilterRequest(const GetBlockFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_hash_or_height();
  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockFilterRequest)
}

void GetBlockFilterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockFilterRequest_bchrpc_2eproto.base);
  clear_has_hash_or_height();
}

GetBlockFilterRequest::~GetBlockFilterRequest() {
  // @@protoc_insertion_point(destructor:pb.GetBlockFilterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
}

void GetBlockFilterRequest::ArenaDtor(void* object) {
  GetBlockFilterRequest* _this = reinterpret_cast< GetBlockFilterRequest* >(object);
  (void)_this;
}
void GetBlockFilterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockFilterRequest& GetBlockFilterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockFilterRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockFilterRequest::clear_hash_or_height() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetBlockFilterRequest)
  switch (hash_or_height_case()) {
    case kHash: {
      hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kHeight: {
      // No need to clear
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}


void GetBlockFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockFilterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_hash_or_height();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockFilterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockFilterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockFilterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 height = 2;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockFilterRequest)
  return target;
}

size_t GetBlockFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockFilterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (hash_or_height_case()) {
    // bytes hash = 1;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    // int32 height = 2;
    case kHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockFilterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockFilterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockFilterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockFilterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockFilterRequest)
    MergeFrom(*source);
  }
}

void GetBlockFilterRequest::MergeFrom(const GetBlockFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.hash_or_height_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case HASH_OR_HEIGHT_NOT_SET: {
      break;
    }
  }
}

void GetBlockFilterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockFilterRequest::CopyFrom(const GetBlockFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockFilterRequest::IsInitialized() const {
  return true;
}

void GetBlockFilterRequest::InternalSwap(GetBlockFilterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hash_or_height_, other->hash_or_height_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockFilterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockFilterResponse::InitAsDefaultInstance() {
}
class GetBlockFilterResponse::_Internal {
 public:
};

GetBlockFilterResponse::GetBlockFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetBlockFilterResponse)
}
GetBlockFilterResponse::GetBlockFilterResponse(const GetBlockFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetBlockFilterResponse)
}

void GetBlockFilterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockFilterResponse_bchrpc_2eproto.base);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockFilterResponse::~GetBlockFilterResponse() {
  // @@protoc_insertion_point(destructor:pb.GetBlockFilterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlockFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockFilterResponse::ArenaDtor(void* object) {
  GetBlockFilterResponse* _this = reinterpret_cast< GetBlockFilterResponse* >(object);
  (void)_this;
}
void GetBlockFilterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockFilterResponse& GetBlockFilterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockFilterResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetBlockFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetBlockFilterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockFilterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockFilterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetBlockFilterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes filter = 1;
  if (this->filter().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetBlockFilterResponse)
  return target;
}

size_t GetBlockFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetBlockFilterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes filter = 1;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockFilterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetBlockFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockFilterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockFilterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetBlockFilterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetBlockFilterResponse)
    MergeFrom(*source);
  }
}

void GetBlockFilterResponse::MergeFrom(const GetBlockFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetBlockFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter().size() > 0) {
    _internal_set_filter(from._internal_filter());
  }
}

void GetBlockFilterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetBlockFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockFilterResponse::CopyFrom(const GetBlockFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetBlockFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockFilterResponse::IsInitialized() const {
  return true;
}

void GetBlockFilterResponse::InternalSwap(GetBlockFilterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockFilterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHeadersRequest::InitAsDefaultInstance() {
}
class GetHeadersRequest::_Internal {
 public:
};

GetHeadersRequest::GetHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_locator_hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetHeadersRequest)
}
GetHeadersRequest::GetHeadersRequest(const GetHeadersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_locator_hashes_(from.block_locator_hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stop_hash().empty()) {
    stop_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stop_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetHeadersRequest)
}

void GetHeadersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHeadersRequest_bchrpc_2eproto.base);
  stop_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetHeadersRequest::~GetHeadersRequest() {
  // @@protoc_insertion_point(destructor:pb.GetHeadersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHeadersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stop_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetHeadersRequest::ArenaDtor(void* object) {
  GetHeadersRequest* _this = reinterpret_cast< GetHeadersRequest* >(object);
  (void)_this;
}
void GetHeadersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHeadersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHeadersRequest& GetHeadersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHeadersRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetHeadersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetHeadersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_locator_hashes_.Clear();
  stop_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeadersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes block_locator_hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_block_locator_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes stop_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stop_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHeadersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetHeadersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block_locator_hashes = 1;
  for (int i = 0, n = this->_internal_block_locator_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_block_locator_hashes(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bytes stop_hash = 2;
  if (this->stop_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stop_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetHeadersRequest)
  return target;
}

size_t GetHeadersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetHeadersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_locator_hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_locator_hashes_.size());
  for (int i = 0, n = block_locator_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      block_locator_hashes_.Get(i));
  }

  // bytes stop_hash = 2;
  if (this->stop_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stop_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHeadersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetHeadersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHeadersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHeadersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetHeadersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetHeadersRequest)
    MergeFrom(*source);
  }
}

void GetHeadersRequest::MergeFrom(const GetHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetHeadersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_locator_hashes_.MergeFrom(from.block_locator_hashes_);
  if (from.stop_hash().size() > 0) {
    _internal_set_stop_hash(from._internal_stop_hash());
  }
}

void GetHeadersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHeadersRequest::CopyFrom(const GetHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeadersRequest::IsInitialized() const {
  return true;
}

void GetHeadersRequest::InternalSwap(GetHeadersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_locator_hashes_.InternalSwap(&other->block_locator_hashes_);
  stop_hash_.Swap(&other->stop_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeadersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHeadersResponse::InitAsDefaultInstance() {
}
class GetHeadersResponse::_Internal {
 public:
};

GetHeadersResponse::GetHeadersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetHeadersResponse)
}
GetHeadersResponse::GetHeadersResponse(const GetHeadersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetHeadersResponse)
}

void GetHeadersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHeadersResponse_bchrpc_2eproto.base);
}

GetHeadersResponse::~GetHeadersResponse() {
  // @@protoc_insertion_point(destructor:pb.GetHeadersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHeadersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetHeadersResponse::ArenaDtor(void* object) {
  GetHeadersResponse* _this = reinterpret_cast< GetHeadersResponse* >(object);
  (void)_this;
}
void GetHeadersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHeadersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHeadersResponse& GetHeadersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHeadersResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetHeadersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetHeadersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeadersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BlockInfo headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHeadersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetHeadersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BlockInfo headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetHeadersResponse)
  return target;
}

size_t GetHeadersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetHeadersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BlockInfo headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHeadersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetHeadersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHeadersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHeadersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetHeadersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetHeadersResponse)
    MergeFrom(*source);
  }
}

void GetHeadersResponse::MergeFrom(const GetHeadersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetHeadersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
}

void GetHeadersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetHeadersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHeadersResponse::CopyFrom(const GetHeadersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetHeadersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeadersResponse::IsInitialized() const {
  return true;
}

void GetHeadersResponse::InternalSwap(GetHeadersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeadersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionRequest::InitAsDefaultInstance() {
}
class GetTransactionRequest::_Internal {
 public:
};

GetTransactionRequest::GetTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetTransactionRequest)
}
GetTransactionRequest::GetTransactionRequest(const GetTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetTransactionRequest)
}

void GetTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionRequest_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTransactionRequest::~GetTransactionRequest() {
  // @@protoc_insertion_point(destructor:pb.GetTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionRequest::ArenaDtor(void* object) {
  GetTransactionRequest* _this = reinterpret_cast< GetTransactionRequest* >(object);
  (void)_this;
}
void GetTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionRequest& GetTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetTransactionRequest)
  return target;
}

size_t GetTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetTransactionRequest)
    MergeFrom(*source);
  }
}

void GetTransactionRequest::MergeFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void GetTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionRequest::CopyFrom(const GetTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionRequest::IsInitialized() const {
  return true;
}

void GetTransactionRequest::InternalSwap(GetTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionResponse::InitAsDefaultInstance() {
  ::pb::_GetTransactionResponse_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::pb::Transaction*>(
      ::pb::Transaction::internal_default_instance());
}
class GetTransactionResponse::_Internal {
 public:
  static const ::pb::Transaction& transaction(const GetTransactionResponse* msg);
};

const ::pb::Transaction&
GetTransactionResponse::_Internal::transaction(const GetTransactionResponse* msg) {
  return *msg->transaction_;
}
GetTransactionResponse::GetTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetTransactionResponse)
}
GetTransactionResponse::GetTransactionResponse(const GetTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::pb::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetTransactionResponse)
}

void GetTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionResponse_bchrpc_2eproto.base);
  transaction_ = nullptr;
}

GetTransactionResponse::~GetTransactionResponse() {
  // @@protoc_insertion_point(destructor:pb.GetTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void GetTransactionResponse::ArenaDtor(void* object) {
  GetTransactionResponse* _this = reinterpret_cast< GetTransactionResponse* >(object);
  (void)_this;
}
void GetTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionResponse& GetTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetTransactionResponse)
  return target;
}

size_t GetTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetTransactionResponse)
    MergeFrom(*source);
  }
}

void GetTransactionResponse::MergeFrom(const GetTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
  }
}

void GetTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionResponse::CopyFrom(const GetTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionResponse::IsInitialized() const {
  return true;
}

void GetTransactionResponse::InternalSwap(GetTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawTransactionRequest::InitAsDefaultInstance() {
}
class GetRawTransactionRequest::_Internal {
 public:
};

GetRawTransactionRequest::GetRawTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetRawTransactionRequest)
}
GetRawTransactionRequest::GetRawTransactionRequest(const GetRawTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetRawTransactionRequest)
}

void GetRawTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawTransactionRequest_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRawTransactionRequest::~GetRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:pb.GetRawTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRawTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRawTransactionRequest::ArenaDtor(void* object) {
  GetRawTransactionRequest* _this = reinterpret_cast< GetRawTransactionRequest* >(object);
  (void)_this;
}
void GetRawTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawTransactionRequest& GetRawTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawTransactionRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRawTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetRawTransactionRequest)
  return target;
}

size_t GetRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetRawTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetRawTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetRawTransactionRequest)
    MergeFrom(*source);
  }
}

void GetRawTransactionRequest::MergeFrom(const GetRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void GetRawTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawTransactionRequest::CopyFrom(const GetRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawTransactionRequest::IsInitialized() const {
  return true;
}

void GetRawTransactionRequest::InternalSwap(GetRawTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawTransactionResponse::InitAsDefaultInstance() {
}
class GetRawTransactionResponse::_Internal {
 public:
};

GetRawTransactionResponse::GetRawTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetRawTransactionResponse)
}
GetRawTransactionResponse::GetRawTransactionResponse(const GetRawTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction().empty()) {
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetRawTransactionResponse)
}

void GetRawTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawTransactionResponse_bchrpc_2eproto.base);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRawTransactionResponse::~GetRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:pb.GetRawTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRawTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRawTransactionResponse::ArenaDtor(void* object) {
  GetRawTransactionResponse* _this = reinterpret_cast< GetRawTransactionResponse* >(object);
  (void)_this;
}
void GetRawTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawTransactionResponse& GetRawTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawTransactionResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRawTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetRawTransactionResponse)
  return target;
}

size_t GetRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetRawTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetRawTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetRawTransactionResponse)
    MergeFrom(*source);
  }
}

void GetRawTransactionResponse::MergeFrom(const GetRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {
    _internal_set_transaction(from._internal_transaction());
  }
}

void GetRawTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawTransactionResponse::CopyFrom(const GetRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawTransactionResponse::IsInitialized() const {
  return true;
}

void GetRawTransactionResponse::InternalSwap(GetRawTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_.Swap(&other->transaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddressTransactionsRequest::InitAsDefaultInstance() {
  ::pb::_GetAddressTransactionsRequest_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetAddressTransactionsRequest_default_instance_.height_ = 0;
}
class GetAddressTransactionsRequest::_Internal {
 public:
};

GetAddressTransactionsRequest::GetAddressTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetAddressTransactionsRequest)
}
GetAddressTransactionsRequest::GetAddressTransactionsRequest(const GetAddressTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&nb_skip_, &from.nb_skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&nb_fetch_) -
    reinterpret_cast<char*>(&nb_skip_)) + sizeof(nb_fetch_));
  clear_has_start_block();
  switch (from.start_block_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetAddressTransactionsRequest)
}

void GetAddressTransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAddressTransactionsRequest_bchrpc_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nb_skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_fetch_) -
      reinterpret_cast<char*>(&nb_skip_)) + sizeof(nb_fetch_));
  clear_has_start_block();
}

GetAddressTransactionsRequest::~GetAddressTransactionsRequest() {
  // @@protoc_insertion_point(destructor:pb.GetAddressTransactionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAddressTransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_start_block()) {
    clear_start_block();
  }
}

void GetAddressTransactionsRequest::ArenaDtor(void* object) {
  GetAddressTransactionsRequest* _this = reinterpret_cast< GetAddressTransactionsRequest* >(object);
  (void)_this;
}
void GetAddressTransactionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAddressTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddressTransactionsRequest& GetAddressTransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddressTransactionsRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddressTransactionsRequest::clear_start_block() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetAddressTransactionsRequest)
  switch (start_block_case()) {
    case kHash: {
      start_block_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kHeight: {
      // No need to clear
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_BLOCK_NOT_SET;
}


void GetAddressTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetAddressTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&nb_skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_fetch_) -
      reinterpret_cast<char*>(&nb_skip_)) + sizeof(nb_fetch_));
  clear_start_block();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAddressTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GetAddressTransactionsRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nb_skip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nb_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nb_fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nb_fetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddressTransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetAddressTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GetAddressTransactionsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 nb_skip = 2;
  if (this->nb_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nb_skip(), target);
  }

  // uint32 nb_fetch = 3;
  if (this->nb_fetch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nb_fetch(), target);
  }

  // bytes hash = 4;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // int32 height = 5;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetAddressTransactionsRequest)
  return target;
}

size_t GetAddressTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetAddressTransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 nb_skip = 2;
  if (this->nb_skip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nb_skip());
  }

  // uint32 nb_fetch = 3;
  if (this->nb_fetch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nb_fetch());
  }

  switch (start_block_case()) {
    // bytes hash = 4;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    // int32 height = 5;
    case kHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddressTransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetAddressTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressTransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddressTransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetAddressTransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetAddressTransactionsRequest)
    MergeFrom(*source);
  }
}

void GetAddressTransactionsRequest::MergeFrom(const GetAddressTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetAddressTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.nb_skip() != 0) {
    _internal_set_nb_skip(from._internal_nb_skip());
  }
  if (from.nb_fetch() != 0) {
    _internal_set_nb_fetch(from._internal_nb_fetch());
  }
  switch (from.start_block_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
}

void GetAddressTransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetAddressTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressTransactionsRequest::CopyFrom(const GetAddressTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetAddressTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressTransactionsRequest::IsInitialized() const {
  return true;
}

void GetAddressTransactionsRequest::InternalSwap(GetAddressTransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAddressTransactionsRequest, nb_fetch_)
      + sizeof(GetAddressTransactionsRequest::nb_fetch_)
      - PROTOBUF_FIELD_OFFSET(GetAddressTransactionsRequest, nb_skip_)>(
          reinterpret_cast<char*>(&nb_skip_),
          reinterpret_cast<char*>(&other->nb_skip_));
  swap(start_block_, other->start_block_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressTransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddressTransactionsResponse::InitAsDefaultInstance() {
}
class GetAddressTransactionsResponse::_Internal {
 public:
};

GetAddressTransactionsResponse::GetAddressTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  confirmed_transactions_(arena),
  unconfirmed_transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetAddressTransactionsResponse)
}
GetAddressTransactionsResponse::GetAddressTransactionsResponse(const GetAddressTransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      confirmed_transactions_(from.confirmed_transactions_),
      unconfirmed_transactions_(from.unconfirmed_transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetAddressTransactionsResponse)
}

void GetAddressTransactionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAddressTransactionsResponse_bchrpc_2eproto.base);
}

GetAddressTransactionsResponse::~GetAddressTransactionsResponse() {
  // @@protoc_insertion_point(destructor:pb.GetAddressTransactionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAddressTransactionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAddressTransactionsResponse::ArenaDtor(void* object) {
  GetAddressTransactionsResponse* _this = reinterpret_cast< GetAddressTransactionsResponse* >(object);
  (void)_this;
}
void GetAddressTransactionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAddressTransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddressTransactionsResponse& GetAddressTransactionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddressTransactionsResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddressTransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetAddressTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confirmed_transactions_.Clear();
  unconfirmed_transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAddressTransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.Transaction confirmed_transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_confirmed_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.MempoolTransaction unconfirmed_transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unconfirmed_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddressTransactionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetAddressTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Transaction confirmed_transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_confirmed_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_confirmed_transactions(i), target, stream);
  }

  // repeated .pb.MempoolTransaction unconfirmed_transactions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unconfirmed_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_unconfirmed_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetAddressTransactionsResponse)
  return target;
}

size_t GetAddressTransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetAddressTransactionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Transaction confirmed_transactions = 1;
  total_size += 1UL * this->_internal_confirmed_transactions_size();
  for (const auto& msg : this->confirmed_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.MempoolTransaction unconfirmed_transactions = 2;
  total_size += 1UL * this->_internal_unconfirmed_transactions_size();
  for (const auto& msg : this->unconfirmed_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddressTransactionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetAddressTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressTransactionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddressTransactionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetAddressTransactionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetAddressTransactionsResponse)
    MergeFrom(*source);
  }
}

void GetAddressTransactionsResponse::MergeFrom(const GetAddressTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetAddressTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  confirmed_transactions_.MergeFrom(from.confirmed_transactions_);
  unconfirmed_transactions_.MergeFrom(from.unconfirmed_transactions_);
}

void GetAddressTransactionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetAddressTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressTransactionsResponse::CopyFrom(const GetAddressTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetAddressTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressTransactionsResponse::IsInitialized() const {
  return true;
}

void GetAddressTransactionsResponse::InternalSwap(GetAddressTransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  confirmed_transactions_.InternalSwap(&other->confirmed_transactions_);
  unconfirmed_transactions_.InternalSwap(&other->unconfirmed_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressTransactionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawAddressTransactionsRequest::InitAsDefaultInstance() {
  ::pb::_GetRawAddressTransactionsRequest_default_instance_.hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_GetRawAddressTransactionsRequest_default_instance_.height_ = 0;
}
class GetRawAddressTransactionsRequest::_Internal {
 public:
};

GetRawAddressTransactionsRequest::GetRawAddressTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetRawAddressTransactionsRequest)
}
GetRawAddressTransactionsRequest::GetRawAddressTransactionsRequest(const GetRawAddressTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&nb_skip_, &from.nb_skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&nb_fetch_) -
    reinterpret_cast<char*>(&nb_skip_)) + sizeof(nb_fetch_));
  clear_has_start_block();
  switch (from.start_block_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetRawAddressTransactionsRequest)
}

void GetRawAddressTransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawAddressTransactionsRequest_bchrpc_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nb_skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_fetch_) -
      reinterpret_cast<char*>(&nb_skip_)) + sizeof(nb_fetch_));
  clear_has_start_block();
}

GetRawAddressTransactionsRequest::~GetRawAddressTransactionsRequest() {
  // @@protoc_insertion_point(destructor:pb.GetRawAddressTransactionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRawAddressTransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_start_block()) {
    clear_start_block();
  }
}

void GetRawAddressTransactionsRequest::ArenaDtor(void* object) {
  GetRawAddressTransactionsRequest* _this = reinterpret_cast< GetRawAddressTransactionsRequest* >(object);
  (void)_this;
}
void GetRawAddressTransactionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawAddressTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawAddressTransactionsRequest& GetRawAddressTransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawAddressTransactionsRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRawAddressTransactionsRequest::clear_start_block() {
// @@protoc_insertion_point(one_of_clear_start:pb.GetRawAddressTransactionsRequest)
  switch (start_block_case()) {
    case kHash: {
      start_block_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kHeight: {
      // No need to clear
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_BLOCK_NOT_SET;
}


void GetRawAddressTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetRawAddressTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&nb_skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_fetch_) -
      reinterpret_cast<char*>(&nb_skip_)) + sizeof(nb_fetch_));
  clear_start_block();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRawAddressTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GetRawAddressTransactionsRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nb_skip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nb_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nb_fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nb_fetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawAddressTransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetRawAddressTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GetRawAddressTransactionsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 nb_skip = 2;
  if (this->nb_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nb_skip(), target);
  }

  // uint32 nb_fetch = 3;
  if (this->nb_fetch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nb_fetch(), target);
  }

  // bytes hash = 4;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // int32 height = 5;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetRawAddressTransactionsRequest)
  return target;
}

size_t GetRawAddressTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetRawAddressTransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 nb_skip = 2;
  if (this->nb_skip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nb_skip());
  }

  // uint32 nb_fetch = 3;
  if (this->nb_fetch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nb_fetch());
  }

  switch (start_block_case()) {
    // bytes hash = 4;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    // int32 height = 5;
    case kHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawAddressTransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetRawAddressTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawAddressTransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawAddressTransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetRawAddressTransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetRawAddressTransactionsRequest)
    MergeFrom(*source);
  }
}

void GetRawAddressTransactionsRequest::MergeFrom(const GetRawAddressTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetRawAddressTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.nb_skip() != 0) {
    _internal_set_nb_skip(from._internal_nb_skip());
  }
  if (from.nb_fetch() != 0) {
    _internal_set_nb_fetch(from._internal_nb_fetch());
  }
  switch (from.start_block_case()) {
    case kHash: {
      _internal_set_hash(from._internal_hash());
      break;
    }
    case kHeight: {
      _internal_set_height(from._internal_height());
      break;
    }
    case START_BLOCK_NOT_SET: {
      break;
    }
  }
}

void GetRawAddressTransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetRawAddressTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawAddressTransactionsRequest::CopyFrom(const GetRawAddressTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetRawAddressTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawAddressTransactionsRequest::IsInitialized() const {
  return true;
}

void GetRawAddressTransactionsRequest::InternalSwap(GetRawAddressTransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRawAddressTransactionsRequest, nb_fetch_)
      + sizeof(GetRawAddressTransactionsRequest::nb_fetch_)
      - PROTOBUF_FIELD_OFFSET(GetRawAddressTransactionsRequest, nb_skip_)>(
          reinterpret_cast<char*>(&nb_skip_),
          reinterpret_cast<char*>(&other->nb_skip_));
  swap(start_block_, other->start_block_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawAddressTransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawAddressTransactionsResponse::InitAsDefaultInstance() {
}
class GetRawAddressTransactionsResponse::_Internal {
 public:
};

GetRawAddressTransactionsResponse::GetRawAddressTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  confirmed_transactions_(arena),
  unconfirmed_transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetRawAddressTransactionsResponse)
}
GetRawAddressTransactionsResponse::GetRawAddressTransactionsResponse(const GetRawAddressTransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      confirmed_transactions_(from.confirmed_transactions_),
      unconfirmed_transactions_(from.unconfirmed_transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetRawAddressTransactionsResponse)
}

void GetRawAddressTransactionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawAddressTransactionsResponse_bchrpc_2eproto.base);
}

GetRawAddressTransactionsResponse::~GetRawAddressTransactionsResponse() {
  // @@protoc_insertion_point(destructor:pb.GetRawAddressTransactionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRawAddressTransactionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetRawAddressTransactionsResponse::ArenaDtor(void* object) {
  GetRawAddressTransactionsResponse* _this = reinterpret_cast< GetRawAddressTransactionsResponse* >(object);
  (void)_this;
}
void GetRawAddressTransactionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRawAddressTransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawAddressTransactionsResponse& GetRawAddressTransactionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawAddressTransactionsResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetRawAddressTransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetRawAddressTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confirmed_transactions_.Clear();
  unconfirmed_transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRawAddressTransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes confirmed_transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_confirmed_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes unconfirmed_transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unconfirmed_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawAddressTransactionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetRawAddressTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes confirmed_transactions = 1;
  for (int i = 0, n = this->_internal_confirmed_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_confirmed_transactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes unconfirmed_transactions = 2;
  for (int i = 0, n = this->_internal_unconfirmed_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_unconfirmed_transactions(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetRawAddressTransactionsResponse)
  return target;
}

size_t GetRawAddressTransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetRawAddressTransactionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes confirmed_transactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(confirmed_transactions_.size());
  for (int i = 0, n = confirmed_transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      confirmed_transactions_.Get(i));
  }

  // repeated bytes unconfirmed_transactions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unconfirmed_transactions_.size());
  for (int i = 0, n = unconfirmed_transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      unconfirmed_transactions_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawAddressTransactionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetRawAddressTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawAddressTransactionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawAddressTransactionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetRawAddressTransactionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetRawAddressTransactionsResponse)
    MergeFrom(*source);
  }
}

void GetRawAddressTransactionsResponse::MergeFrom(const GetRawAddressTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetRawAddressTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  confirmed_transactions_.MergeFrom(from.confirmed_transactions_);
  unconfirmed_transactions_.MergeFrom(from.unconfirmed_transactions_);
}

void GetRawAddressTransactionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetRawAddressTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawAddressTransactionsResponse::CopyFrom(const GetRawAddressTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetRawAddressTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawAddressTransactionsResponse::IsInitialized() const {
  return true;
}

void GetRawAddressTransactionsResponse::InternalSwap(GetRawAddressTransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  confirmed_transactions_.InternalSwap(&other->confirmed_transactions_);
  unconfirmed_transactions_.InternalSwap(&other->unconfirmed_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawAddressTransactionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddressUnspentOutputsRequest::InitAsDefaultInstance() {
}
class GetAddressUnspentOutputsRequest::_Internal {
 public:
};

GetAddressUnspentOutputsRequest::GetAddressUnspentOutputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetAddressUnspentOutputsRequest)
}
GetAddressUnspentOutputsRequest::GetAddressUnspentOutputsRequest(const GetAddressUnspentOutputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  include_mempool_ = from.include_mempool_;
  // @@protoc_insertion_point(copy_constructor:pb.GetAddressUnspentOutputsRequest)
}

void GetAddressUnspentOutputsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAddressUnspentOutputsRequest_bchrpc_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_mempool_ = false;
}

GetAddressUnspentOutputsRequest::~GetAddressUnspentOutputsRequest() {
  // @@protoc_insertion_point(destructor:pb.GetAddressUnspentOutputsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAddressUnspentOutputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAddressUnspentOutputsRequest::ArenaDtor(void* object) {
  GetAddressUnspentOutputsRequest* _this = reinterpret_cast< GetAddressUnspentOutputsRequest* >(object);
  (void)_this;
}
void GetAddressUnspentOutputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAddressUnspentOutputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddressUnspentOutputsRequest& GetAddressUnspentOutputsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddressUnspentOutputsRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddressUnspentOutputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetAddressUnspentOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  include_mempool_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAddressUnspentOutputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GetAddressUnspentOutputsRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_mempool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_mempool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddressUnspentOutputsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetAddressUnspentOutputsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GetAddressUnspentOutputsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool include_mempool = 2;
  if (this->include_mempool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_mempool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetAddressUnspentOutputsRequest)
  return target;
}

size_t GetAddressUnspentOutputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetAddressUnspentOutputsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool include_mempool = 2;
  if (this->include_mempool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddressUnspentOutputsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetAddressUnspentOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressUnspentOutputsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddressUnspentOutputsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetAddressUnspentOutputsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetAddressUnspentOutputsRequest)
    MergeFrom(*source);
  }
}

void GetAddressUnspentOutputsRequest::MergeFrom(const GetAddressUnspentOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetAddressUnspentOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.include_mempool() != 0) {
    _internal_set_include_mempool(from._internal_include_mempool());
  }
}

void GetAddressUnspentOutputsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetAddressUnspentOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressUnspentOutputsRequest::CopyFrom(const GetAddressUnspentOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetAddressUnspentOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressUnspentOutputsRequest::IsInitialized() const {
  return true;
}

void GetAddressUnspentOutputsRequest::InternalSwap(GetAddressUnspentOutputsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(include_mempool_, other->include_mempool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressUnspentOutputsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddressUnspentOutputsResponse::InitAsDefaultInstance() {
}
class GetAddressUnspentOutputsResponse::_Internal {
 public:
};

GetAddressUnspentOutputsResponse::GetAddressUnspentOutputsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetAddressUnspentOutputsResponse)
}
GetAddressUnspentOutputsResponse::GetAddressUnspentOutputsResponse(const GetAddressUnspentOutputsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.GetAddressUnspentOutputsResponse)
}

void GetAddressUnspentOutputsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAddressUnspentOutputsResponse_bchrpc_2eproto.base);
}

GetAddressUnspentOutputsResponse::~GetAddressUnspentOutputsResponse() {
  // @@protoc_insertion_point(destructor:pb.GetAddressUnspentOutputsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAddressUnspentOutputsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAddressUnspentOutputsResponse::ArenaDtor(void* object) {
  GetAddressUnspentOutputsResponse* _this = reinterpret_cast< GetAddressUnspentOutputsResponse* >(object);
  (void)_this;
}
void GetAddressUnspentOutputsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAddressUnspentOutputsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddressUnspentOutputsResponse& GetAddressUnspentOutputsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddressUnspentOutputsResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddressUnspentOutputsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetAddressUnspentOutputsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAddressUnspentOutputsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.UnspentOutput outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddressUnspentOutputsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetAddressUnspentOutputsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.UnspentOutput outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetAddressUnspentOutputsResponse)
  return target;
}

size_t GetAddressUnspentOutputsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetAddressUnspentOutputsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.UnspentOutput outputs = 1;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddressUnspentOutputsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetAddressUnspentOutputsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressUnspentOutputsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddressUnspentOutputsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetAddressUnspentOutputsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetAddressUnspentOutputsResponse)
    MergeFrom(*source);
  }
}

void GetAddressUnspentOutputsResponse::MergeFrom(const GetAddressUnspentOutputsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetAddressUnspentOutputsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
}

void GetAddressUnspentOutputsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetAddressUnspentOutputsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressUnspentOutputsResponse::CopyFrom(const GetAddressUnspentOutputsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetAddressUnspentOutputsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressUnspentOutputsResponse::IsInitialized() const {
  return true;
}

void GetAddressUnspentOutputsResponse::InternalSwap(GetAddressUnspentOutputsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressUnspentOutputsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUnspentOutputRequest::InitAsDefaultInstance() {
}
class GetUnspentOutputRequest::_Internal {
 public:
};

GetUnspentOutputRequest::GetUnspentOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetUnspentOutputRequest)
}
GetUnspentOutputRequest::GetUnspentOutputRequest(const GetUnspentOutputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_mempool_) -
    reinterpret_cast<char*>(&index_)) + sizeof(include_mempool_));
  // @@protoc_insertion_point(copy_constructor:pb.GetUnspentOutputRequest)
}

void GetUnspentOutputRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUnspentOutputRequest_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_mempool_) -
      reinterpret_cast<char*>(&index_)) + sizeof(include_mempool_));
}

GetUnspentOutputRequest::~GetUnspentOutputRequest() {
  // @@protoc_insertion_point(destructor:pb.GetUnspentOutputRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUnspentOutputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetUnspentOutputRequest::ArenaDtor(void* object) {
  GetUnspentOutputRequest* _this = reinterpret_cast< GetUnspentOutputRequest* >(object);
  (void)_this;
}
void GetUnspentOutputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUnspentOutputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUnspentOutputRequest& GetUnspentOutputRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUnspentOutputRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetUnspentOutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetUnspentOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_mempool_) -
      reinterpret_cast<char*>(&index_)) + sizeof(include_mempool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUnspentOutputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_mempool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_mempool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUnspentOutputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetUnspentOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bool include_mempool = 3;
  if (this->include_mempool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_mempool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetUnspentOutputRequest)
  return target;
}

size_t GetUnspentOutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetUnspentOutputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // bool include_mempool = 3;
  if (this->include_mempool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUnspentOutputRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetUnspentOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUnspentOutputRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUnspentOutputRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetUnspentOutputRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetUnspentOutputRequest)
    MergeFrom(*source);
  }
}

void GetUnspentOutputRequest::MergeFrom(const GetUnspentOutputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetUnspentOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.include_mempool() != 0) {
    _internal_set_include_mempool(from._internal_include_mempool());
  }
}

void GetUnspentOutputRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetUnspentOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnspentOutputRequest::CopyFrom(const GetUnspentOutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetUnspentOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnspentOutputRequest::IsInitialized() const {
  return true;
}

void GetUnspentOutputRequest::InternalSwap(GetUnspentOutputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUnspentOutputRequest, include_mempool_)
      + sizeof(GetUnspentOutputRequest::include_mempool_)
      - PROTOBUF_FIELD_OFFSET(GetUnspentOutputRequest, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUnspentOutputRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUnspentOutputResponse::InitAsDefaultInstance() {
  ::pb::_GetUnspentOutputResponse_default_instance_._instance.get_mutable()->outpoint_ = const_cast< ::pb::Transaction_Input_Outpoint*>(
      ::pb::Transaction_Input_Outpoint::internal_default_instance());
}
class GetUnspentOutputResponse::_Internal {
 public:
  static const ::pb::Transaction_Input_Outpoint& outpoint(const GetUnspentOutputResponse* msg);
};

const ::pb::Transaction_Input_Outpoint&
GetUnspentOutputResponse::_Internal::outpoint(const GetUnspentOutputResponse* msg) {
  return *msg->outpoint_;
}
GetUnspentOutputResponse::GetUnspentOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetUnspentOutputResponse)
}
GetUnspentOutputResponse::GetUnspentOutputResponse(const GetUnspentOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey_script().empty()) {
    pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pubkey_script(),
      GetArena());
  }
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::pb::Transaction_Input_Outpoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&value_)) + sizeof(block_height_));
  // @@protoc_insertion_point(copy_constructor:pb.GetUnspentOutputResponse)
}

void GetUnspentOutputResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUnspentOutputResponse_bchrpc_2eproto.base);
  pubkey_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&outpoint_)) + sizeof(block_height_));
}

GetUnspentOutputResponse::~GetUnspentOutputResponse() {
  // @@protoc_insertion_point(destructor:pb.GetUnspentOutputResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUnspentOutputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpoint_;
}

void GetUnspentOutputResponse::ArenaDtor(void* object) {
  GetUnspentOutputResponse* _this = reinterpret_cast< GetUnspentOutputResponse* >(object);
  (void)_this;
}
void GetUnspentOutputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUnspentOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUnspentOutputResponse& GetUnspentOutputResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUnspentOutputResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetUnspentOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetUnspentOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&value_)) + sizeof(block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUnspentOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Transaction.Input.Outpoint outpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubkey_script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pubkey_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_coinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_coinbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUnspentOutputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetUnspentOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Transaction.Input.Outpoint outpoint = 1;
  if (this->has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::outpoint(this), target, stream);
  }

  // bytes pubkey_script = 2;
  if (this->pubkey_script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pubkey_script(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // bool is_coinbase = 4;
  if (this->is_coinbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_coinbase(), target);
  }

  // int32 block_height = 5;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetUnspentOutputResponse)
  return target;
}

size_t GetUnspentOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetUnspentOutputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey_script = 2;
  if (this->pubkey_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey_script());
  }

  // .pb.Transaction.Input.Outpoint outpoint = 1;
  if (this->has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // bool is_coinbase = 4;
  if (this->is_coinbase() != 0) {
    total_size += 1 + 1;
  }

  // int32 block_height = 5;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUnspentOutputResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetUnspentOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUnspentOutputResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUnspentOutputResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetUnspentOutputResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetUnspentOutputResponse)
    MergeFrom(*source);
  }
}

void GetUnspentOutputResponse::MergeFrom(const GetUnspentOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetUnspentOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey_script().size() > 0) {
    _internal_set_pubkey_script(from._internal_pubkey_script());
  }
  if (from.has_outpoint()) {
    _internal_mutable_outpoint()->::pb::Transaction_Input_Outpoint::MergeFrom(from._internal_outpoint());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.is_coinbase() != 0) {
    _internal_set_is_coinbase(from._internal_is_coinbase());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void GetUnspentOutputResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetUnspentOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnspentOutputResponse::CopyFrom(const GetUnspentOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetUnspentOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnspentOutputResponse::IsInitialized() const {
  return true;
}

void GetUnspentOutputResponse::InternalSwap(GetUnspentOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_script_.Swap(&other->pubkey_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUnspentOutputResponse, block_height_)
      + sizeof(GetUnspentOutputResponse::block_height_)
      - PROTOBUF_FIELD_OFFSET(GetUnspentOutputResponse, outpoint_)>(
          reinterpret_cast<char*>(&outpoint_),
          reinterpret_cast<char*>(&other->outpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUnspentOutputResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMerkleProofRequest::InitAsDefaultInstance() {
}
class GetMerkleProofRequest::_Internal {
 public:
};

GetMerkleProofRequest::GetMerkleProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMerkleProofRequest)
}
GetMerkleProofRequest::GetMerkleProofRequest(const GetMerkleProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_hash().empty()) {
    transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetMerkleProofRequest)
}

void GetMerkleProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMerkleProofRequest_bchrpc_2eproto.base);
  transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetMerkleProofRequest::~GetMerkleProofRequest() {
  // @@protoc_insertion_point(destructor:pb.GetMerkleProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMerkleProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMerkleProofRequest::ArenaDtor(void* object) {
  GetMerkleProofRequest* _this = reinterpret_cast< GetMerkleProofRequest* >(object);
  (void)_this;
}
void GetMerkleProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMerkleProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMerkleProofRequest& GetMerkleProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMerkleProofRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMerkleProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMerkleProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMerkleProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMerkleProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMerkleProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_hash = 1;
  if (this->transaction_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMerkleProofRequest)
  return target;
}

size_t GetMerkleProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMerkleProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction_hash = 1;
  if (this->transaction_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMerkleProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMerkleProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMerkleProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMerkleProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMerkleProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMerkleProofRequest)
    MergeFrom(*source);
  }
}

void GetMerkleProofRequest::MergeFrom(const GetMerkleProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMerkleProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_hash().size() > 0) {
    _internal_set_transaction_hash(from._internal_transaction_hash());
  }
}

void GetMerkleProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMerkleProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMerkleProofRequest::CopyFrom(const GetMerkleProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMerkleProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMerkleProofRequest::IsInitialized() const {
  return true;
}

void GetMerkleProofRequest::InternalSwap(GetMerkleProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_hash_.Swap(&other->transaction_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMerkleProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMerkleProofResponse::InitAsDefaultInstance() {
  ::pb::_GetMerkleProofResponse_default_instance_._instance.get_mutable()->block_ = const_cast< ::pb::BlockInfo*>(
      ::pb::BlockInfo::internal_default_instance());
}
class GetMerkleProofResponse::_Internal {
 public:
  static const ::pb::BlockInfo& block(const GetMerkleProofResponse* msg);
};

const ::pb::BlockInfo&
GetMerkleProofResponse::_Internal::block(const GetMerkleProofResponse* msg) {
  return *msg->block_;
}
GetMerkleProofResponse::GetMerkleProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GetMerkleProofResponse)
}
GetMerkleProofResponse::GetMerkleProofResponse(const GetMerkleProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flags().empty()) {
    flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flags(),
      GetArena());
  }
  if (from._internal_has_block()) {
    block_ = new ::pb::BlockInfo(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.GetMerkleProofResponse)
}

void GetMerkleProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMerkleProofResponse_bchrpc_2eproto.base);
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_ = nullptr;
}

GetMerkleProofResponse::~GetMerkleProofResponse() {
  // @@protoc_insertion_point(destructor:pb.GetMerkleProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMerkleProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_;
}

void GetMerkleProofResponse::ArenaDtor(void* object) {
  GetMerkleProofResponse* _this = reinterpret_cast< GetMerkleProofResponse* >(object);
  (void)_this;
}
void GetMerkleProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMerkleProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMerkleProofResponse& GetMerkleProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMerkleProofResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void GetMerkleProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GetMerkleProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  flags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMerkleProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.BlockInfo block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMerkleProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GetMerkleProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.BlockInfo block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // repeated bytes hashes = 2;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes flags = 3;
  if (this->flags().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GetMerkleProofResponse)
  return target;
}

size_t GetMerkleProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GetMerkleProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hashes_.size());
  for (int i = 0, n = hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hashes_.Get(i));
  }

  // bytes flags = 3;
  if (this->flags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flags());
  }

  // .pb.BlockInfo block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMerkleProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GetMerkleProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMerkleProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMerkleProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GetMerkleProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GetMerkleProofResponse)
    MergeFrom(*source);
  }
}

void GetMerkleProofResponse::MergeFrom(const GetMerkleProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GetMerkleProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  if (from.flags().size() > 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.has_block()) {
    _internal_mutable_block()->::pb::BlockInfo::MergeFrom(from._internal_block());
  }
}

void GetMerkleProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GetMerkleProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMerkleProofResponse::CopyFrom(const GetMerkleProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GetMerkleProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMerkleProofResponse::IsInitialized() const {
  return true;
}

void GetMerkleProofResponse::InternalSwap(GetMerkleProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
  flags_.Swap(&other->flags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMerkleProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitTransactionRequest::InitAsDefaultInstance() {
}
class SubmitTransactionRequest::_Internal {
 public:
};

SubmitTransactionRequest::SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SubmitTransactionRequest)
}
SubmitTransactionRequest::SubmitTransactionRequest(const SubmitTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction().empty()) {
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.SubmitTransactionRequest)
}

void SubmitTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionRequest_bchrpc_2eproto.base);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubmitTransactionRequest::~SubmitTransactionRequest() {
  // @@protoc_insertion_point(destructor:pb.SubmitTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitTransactionRequest::ArenaDtor(void* object) {
  SubmitTransactionRequest* _this = reinterpret_cast< SubmitTransactionRequest* >(object);
  (void)_this;
}
void SubmitTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionRequest& SubmitTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubmitTransactionRequest)
  return target;
}

size_t SubmitTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubmitTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SubmitTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SubmitTransactionRequest)
    MergeFrom(*source);
  }
}

void SubmitTransactionRequest::MergeFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {
    _internal_set_transaction(from._internal_transaction());
  }
}

void SubmitTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionRequest::CopyFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionRequest::IsInitialized() const {
  return true;
}

void SubmitTransactionRequest::InternalSwap(SubmitTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_.Swap(&other->transaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubmitTransactionResponse::InitAsDefaultInstance() {
}
class SubmitTransactionResponse::_Internal {
 public:
};

SubmitTransactionResponse::SubmitTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SubmitTransactionResponse)
}
SubmitTransactionResponse::SubmitTransactionResponse(const SubmitTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.SubmitTransactionResponse)
}

void SubmitTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionResponse_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubmitTransactionResponse::~SubmitTransactionResponse() {
  // @@protoc_insertion_point(destructor:pb.SubmitTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubmitTransactionResponse::ArenaDtor(void* object) {
  SubmitTransactionResponse* _this = reinterpret_cast< SubmitTransactionResponse* >(object);
  (void)_this;
}
void SubmitTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionResponse& SubmitTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionResponse_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubmitTransactionResponse)
  return target;
}

size_t SubmitTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubmitTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SubmitTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SubmitTransactionResponse)
    MergeFrom(*source);
  }
}

void SubmitTransactionResponse::MergeFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void SubmitTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionResponse::CopyFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionResponse::IsInitialized() const {
  return true;
}

void SubmitTransactionResponse::InternalSwap(SubmitTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeTransactionsRequest::InitAsDefaultInstance() {
  ::pb::_SubscribeTransactionsRequest_default_instance_._instance.get_mutable()->subscribe_ = const_cast< ::pb::TransactionFilter*>(
      ::pb::TransactionFilter::internal_default_instance());
  ::pb::_SubscribeTransactionsRequest_default_instance_._instance.get_mutable()->unsubscribe_ = const_cast< ::pb::TransactionFilter*>(
      ::pb::TransactionFilter::internal_default_instance());
}
class SubscribeTransactionsRequest::_Internal {
 public:
  static const ::pb::TransactionFilter& subscribe(const SubscribeTransactionsRequest* msg);
  static const ::pb::TransactionFilter& unsubscribe(const SubscribeTransactionsRequest* msg);
};

const ::pb::TransactionFilter&
SubscribeTransactionsRequest::_Internal::subscribe(const SubscribeTransactionsRequest* msg) {
  return *msg->subscribe_;
}
const ::pb::TransactionFilter&
SubscribeTransactionsRequest::_Internal::unsubscribe(const SubscribeTransactionsRequest* msg) {
  return *msg->unsubscribe_;
}
SubscribeTransactionsRequest::SubscribeTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SubscribeTransactionsRequest)
}
SubscribeTransactionsRequest::SubscribeTransactionsRequest(const SubscribeTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscribe()) {
    subscribe_ = new ::pb::TransactionFilter(*from.subscribe_);
  } else {
    subscribe_ = nullptr;
  }
  if (from._internal_has_unsubscribe()) {
    unsubscribe_ = new ::pb::TransactionFilter(*from.unsubscribe_);
  } else {
    unsubscribe_ = nullptr;
  }
  ::memcpy(&include_mempool_, &from.include_mempool_,
    static_cast<size_t>(reinterpret_cast<char*>(&serialize_tx_) -
    reinterpret_cast<char*>(&include_mempool_)) + sizeof(serialize_tx_));
  // @@protoc_insertion_point(copy_constructor:pb.SubscribeTransactionsRequest)
}

void SubscribeTransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeTransactionsRequest_bchrpc_2eproto.base);
  ::memset(&subscribe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serialize_tx_) -
      reinterpret_cast<char*>(&subscribe_)) + sizeof(serialize_tx_));
}

SubscribeTransactionsRequest::~SubscribeTransactionsRequest() {
  // @@protoc_insertion_point(destructor:pb.SubscribeTransactionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeTransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete subscribe_;
  if (this != internal_default_instance()) delete unsubscribe_;
}

void SubscribeTransactionsRequest::ArenaDtor(void* object) {
  SubscribeTransactionsRequest* _this = reinterpret_cast< SubscribeTransactionsRequest* >(object);
  (void)_this;
}
void SubscribeTransactionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeTransactionsRequest& SubscribeTransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeTransactionsRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void SubscribeTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubscribeTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && subscribe_ != nullptr) {
    delete subscribe_;
  }
  subscribe_ = nullptr;
  if (GetArena() == nullptr && unsubscribe_ != nullptr) {
    delete unsubscribe_;
  }
  unsubscribe_ = nullptr;
  ::memset(&include_mempool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serialize_tx_) -
      reinterpret_cast<char*>(&include_mempool_)) + sizeof(serialize_tx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.TransactionFilter subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.TransactionFilter unsubscribe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsubscribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_mempool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_mempool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_in_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          include_in_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool serialize_tx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          serialize_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeTransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubscribeTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TransactionFilter subscribe = 1;
  if (this->has_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscribe(this), target, stream);
  }

  // .pb.TransactionFilter unsubscribe = 2;
  if (this->has_unsubscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unsubscribe(this), target, stream);
  }

  // bool include_mempool = 3;
  if (this->include_mempool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_mempool(), target);
  }

  // bool include_in_block = 4;
  if (this->include_in_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_include_in_block(), target);
  }

  // bool serialize_tx = 5;
  if (this->serialize_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_serialize_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubscribeTransactionsRequest)
  return target;
}

size_t SubscribeTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubscribeTransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.TransactionFilter subscribe = 1;
  if (this->has_subscribe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscribe_);
  }

  // .pb.TransactionFilter unsubscribe = 2;
  if (this->has_unsubscribe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unsubscribe_);
  }

  // bool include_mempool = 3;
  if (this->include_mempool() != 0) {
    total_size += 1 + 1;
  }

  // bool include_in_block = 4;
  if (this->include_in_block() != 0) {
    total_size += 1 + 1;
  }

  // bool serialize_tx = 5;
  if (this->serialize_tx() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeTransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SubscribeTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeTransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeTransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SubscribeTransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SubscribeTransactionsRequest)
    MergeFrom(*source);
  }
}

void SubscribeTransactionsRequest::MergeFrom(const SubscribeTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubscribeTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscribe()) {
    _internal_mutable_subscribe()->::pb::TransactionFilter::MergeFrom(from._internal_subscribe());
  }
  if (from.has_unsubscribe()) {
    _internal_mutable_unsubscribe()->::pb::TransactionFilter::MergeFrom(from._internal_unsubscribe());
  }
  if (from.include_mempool() != 0) {
    _internal_set_include_mempool(from._internal_include_mempool());
  }
  if (from.include_in_block() != 0) {
    _internal_set_include_in_block(from._internal_include_in_block());
  }
  if (from.serialize_tx() != 0) {
    _internal_set_serialize_tx(from._internal_serialize_tx());
  }
}

void SubscribeTransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SubscribeTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeTransactionsRequest::CopyFrom(const SubscribeTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubscribeTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeTransactionsRequest::IsInitialized() const {
  return true;
}

void SubscribeTransactionsRequest::InternalSwap(SubscribeTransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeTransactionsRequest, serialize_tx_)
      + sizeof(SubscribeTransactionsRequest::serialize_tx_)
      - PROTOBUF_FIELD_OFFSET(SubscribeTransactionsRequest, subscribe_)>(
          reinterpret_cast<char*>(&subscribe_),
          reinterpret_cast<char*>(&other->subscribe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeBlocksRequest::InitAsDefaultInstance() {
}
class SubscribeBlocksRequest::_Internal {
 public:
};

SubscribeBlocksRequest::SubscribeBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.SubscribeBlocksRequest)
}
SubscribeBlocksRequest::SubscribeBlocksRequest(const SubscribeBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&full_block_, &from.full_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&serialize_block_) -
    reinterpret_cast<char*>(&full_block_)) + sizeof(serialize_block_));
  // @@protoc_insertion_point(copy_constructor:pb.SubscribeBlocksRequest)
}

void SubscribeBlocksRequest::SharedCtor() {
  ::memset(&full_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serialize_block_) -
      reinterpret_cast<char*>(&full_block_)) + sizeof(serialize_block_));
}

SubscribeBlocksRequest::~SubscribeBlocksRequest() {
  // @@protoc_insertion_point(destructor:pb.SubscribeBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeBlocksRequest::ArenaDtor(void* object) {
  SubscribeBlocksRequest* _this = reinterpret_cast< SubscribeBlocksRequest* >(object);
  (void)_this;
}
void SubscribeBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeBlocksRequest& SubscribeBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeBlocksRequest_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void SubscribeBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SubscribeBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&full_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serialize_block_) -
      reinterpret_cast<char*>(&full_block_)) + sizeof(serialize_block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool full_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          full_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool full_transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          full_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool serialize_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serialize_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SubscribeBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool full_block = 1;
  if (this->full_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_full_block(), target);
  }

  // bool full_transactions = 2;
  if (this->full_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_full_transactions(), target);
  }

  // bool serialize_block = 3;
  if (this->serialize_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_serialize_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SubscribeBlocksRequest)
  return target;
}

size_t SubscribeBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SubscribeBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool full_block = 1;
  if (this->full_block() != 0) {
    total_size += 1 + 1;
  }

  // bool full_transactions = 2;
  if (this->full_transactions() != 0) {
    total_size += 1 + 1;
  }

  // bool serialize_block = 3;
  if (this->serialize_block() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SubscribeBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SubscribeBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SubscribeBlocksRequest)
    MergeFrom(*source);
  }
}

void SubscribeBlocksRequest::MergeFrom(const SubscribeBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SubscribeBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_block() != 0) {
    _internal_set_full_block(from._internal_full_block());
  }
  if (from.full_transactions() != 0) {
    _internal_set_full_transactions(from._internal_full_transactions());
  }
  if (from.serialize_block() != 0) {
    _internal_set_serialize_block(from._internal_serialize_block());
  }
}

void SubscribeBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SubscribeBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeBlocksRequest::CopyFrom(const SubscribeBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SubscribeBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBlocksRequest::IsInitialized() const {
  return true;
}

void SubscribeBlocksRequest::InternalSwap(SubscribeBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeBlocksRequest, serialize_block_)
      + sizeof(SubscribeBlocksRequest::serialize_block_)
      - PROTOBUF_FIELD_OFFSET(SubscribeBlocksRequest, full_block_)>(
          reinterpret_cast<char*>(&full_block_),
          reinterpret_cast<char*>(&other->full_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockNotification::InitAsDefaultInstance() {
  ::pb::_BlockNotification_default_instance_.block_info_ = const_cast< ::pb::BlockInfo*>(
      ::pb::BlockInfo::internal_default_instance());
  ::pb::_BlockNotification_default_instance_.marshaled_block_ = const_cast< ::pb::Block*>(
      ::pb::Block::internal_default_instance());
  ::pb::_BlockNotification_default_instance_.serialized_block_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class BlockNotification::_Internal {
 public:
  static const ::pb::BlockInfo& block_info(const BlockNotification* msg);
  static const ::pb::Block& marshaled_block(const BlockNotification* msg);
};

const ::pb::BlockInfo&
BlockNotification::_Internal::block_info(const BlockNotification* msg) {
  return *msg->block_.block_info_;
}
const ::pb::Block&
BlockNotification::_Internal::marshaled_block(const BlockNotification* msg) {
  return *msg->block_.marshaled_block_;
}
void BlockNotification::set_allocated_block_info(::pb::BlockInfo* block_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_block();
  if (block_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_info);
    if (message_arena != submessage_arena) {
      block_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_info, submessage_arena);
    }
    set_has_block_info();
    block_.block_info_ = block_info;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BlockNotification.block_info)
}
void BlockNotification::set_allocated_marshaled_block(::pb::Block* marshaled_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_block();
  if (marshaled_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(marshaled_block);
    if (message_arena != submessage_arena) {
      marshaled_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marshaled_block, submessage_arena);
    }
    set_has_marshaled_block();
    block_.marshaled_block_ = marshaled_block;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BlockNotification.marshaled_block)
}
BlockNotification::BlockNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.BlockNotification)
}
BlockNotification::BlockNotification(const BlockNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_block();
  switch (from.block_case()) {
    case kBlockInfo: {
      _internal_mutable_block_info()->::pb::BlockInfo::MergeFrom(from._internal_block_info());
      break;
    }
    case kMarshaledBlock: {
      _internal_mutable_marshaled_block()->::pb::Block::MergeFrom(from._internal_marshaled_block());
      break;
    }
    case kSerializedBlock: {
      _internal_set_serialized_block(from._internal_serialized_block());
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.BlockNotification)
}

void BlockNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockNotification_bchrpc_2eproto.base);
  type_ = 0;
  clear_has_block();
}

BlockNotification::~BlockNotification() {
  // @@protoc_insertion_point(destructor:pb.BlockNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_block()) {
    clear_block();
  }
}

void BlockNotification::ArenaDtor(void* object) {
  BlockNotification* _this = reinterpret_cast< BlockNotification* >(object);
  (void)_this;
}
void BlockNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockNotification& BlockNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockNotification_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void BlockNotification::clear_block() {
// @@protoc_insertion_point(one_of_clear_start:pb.BlockNotification)
  switch (block_case()) {
    case kBlockInfo: {
      if (GetArena() == nullptr) {
        delete block_.block_info_;
      }
      break;
    }
    case kMarshaledBlock: {
      if (GetArena() == nullptr) {
        delete block_.marshaled_block_;
      }
      break;
    }
    case kSerializedBlock: {
      block_.serialized_block_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BLOCK_NOT_SET;
}


void BlockNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BlockNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_block();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.BlockNotification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::BlockNotification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .pb.BlockInfo block_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Block marshaled_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_marshaled_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serialized_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.BlockNotification.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .pb.BlockInfo block_info = 2;
  if (_internal_has_block_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_info(this), target, stream);
  }

  // .pb.Block marshaled_block = 3;
  if (_internal_has_marshaled_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::marshaled_block(this), target, stream);
  }

  // bytes serialized_block = 4;
  if (_internal_has_serialized_block()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serialized_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockNotification)
  return target;
}

size_t BlockNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BlockNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.BlockNotification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (block_case()) {
    // .pb.BlockInfo block_info = 2;
    case kBlockInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *block_.block_info_);
      break;
    }
    // .pb.Block marshaled_block = 3;
    case kMarshaledBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *block_.marshaled_block_);
      break;
    }
    // bytes serialized_block = 4;
    case kSerializedBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_block());
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BlockNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BlockNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BlockNotification)
    MergeFrom(*source);
  }
}

void BlockNotification::MergeFrom(const BlockNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BlockNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.block_case()) {
    case kBlockInfo: {
      _internal_mutable_block_info()->::pb::BlockInfo::MergeFrom(from._internal_block_info());
      break;
    }
    case kMarshaledBlock: {
      _internal_mutable_marshaled_block()->::pb::Block::MergeFrom(from._internal_marshaled_block());
      break;
    }
    case kSerializedBlock: {
      _internal_set_serialized_block(from._internal_serialized_block());
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
}

void BlockNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BlockNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockNotification::CopyFrom(const BlockNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BlockNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockNotification::IsInitialized() const {
  return true;
}

void BlockNotification::InternalSwap(BlockNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(block_, other->block_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionNotification::InitAsDefaultInstance() {
  ::pb::_TransactionNotification_default_instance_.confirmed_transaction_ = const_cast< ::pb::Transaction*>(
      ::pb::Transaction::internal_default_instance());
  ::pb::_TransactionNotification_default_instance_.unconfirmed_transaction_ = const_cast< ::pb::MempoolTransaction*>(
      ::pb::MempoolTransaction::internal_default_instance());
  ::pb::_TransactionNotification_default_instance_.serialized_transaction_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TransactionNotification::_Internal {
 public:
  static const ::pb::Transaction& confirmed_transaction(const TransactionNotification* msg);
  static const ::pb::MempoolTransaction& unconfirmed_transaction(const TransactionNotification* msg);
};

const ::pb::Transaction&
TransactionNotification::_Internal::confirmed_transaction(const TransactionNotification* msg) {
  return *msg->transaction_.confirmed_transaction_;
}
const ::pb::MempoolTransaction&
TransactionNotification::_Internal::unconfirmed_transaction(const TransactionNotification* msg) {
  return *msg->transaction_.unconfirmed_transaction_;
}
void TransactionNotification::set_allocated_confirmed_transaction(::pb::Transaction* confirmed_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (confirmed_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(confirmed_transaction);
    if (message_arena != submessage_arena) {
      confirmed_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmed_transaction, submessage_arena);
    }
    set_has_confirmed_transaction();
    transaction_.confirmed_transaction_ = confirmed_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TransactionNotification.confirmed_transaction)
}
void TransactionNotification::set_allocated_unconfirmed_transaction(::pb::MempoolTransaction* unconfirmed_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_transaction();
  if (unconfirmed_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unconfirmed_transaction);
    if (message_arena != submessage_arena) {
      unconfirmed_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unconfirmed_transaction, submessage_arena);
    }
    set_has_unconfirmed_transaction();
    transaction_.unconfirmed_transaction_ = unconfirmed_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TransactionNotification.unconfirmed_transaction)
}
TransactionNotification::TransactionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TransactionNotification)
}
TransactionNotification::TransactionNotification(const TransactionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_transaction();
  switch (from.transaction_case()) {
    case kConfirmedTransaction: {
      _internal_mutable_confirmed_transaction()->::pb::Transaction::MergeFrom(from._internal_confirmed_transaction());
      break;
    }
    case kUnconfirmedTransaction: {
      _internal_mutable_unconfirmed_transaction()->::pb::MempoolTransaction::MergeFrom(from._internal_unconfirmed_transaction());
      break;
    }
    case kSerializedTransaction: {
      _internal_set_serialized_transaction(from._internal_serialized_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.TransactionNotification)
}

void TransactionNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionNotification_bchrpc_2eproto.base);
  type_ = 0;
  clear_has_transaction();
}

TransactionNotification::~TransactionNotification() {
  // @@protoc_insertion_point(destructor:pb.TransactionNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_transaction()) {
    clear_transaction();
  }
}

void TransactionNotification::ArenaDtor(void* object) {
  TransactionNotification* _this = reinterpret_cast< TransactionNotification* >(object);
  (void)_this;
}
void TransactionNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionNotification& TransactionNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionNotification_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void TransactionNotification::clear_transaction() {
// @@protoc_insertion_point(one_of_clear_start:pb.TransactionNotification)
  switch (transaction_case()) {
    case kConfirmedTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_.confirmed_transaction_;
      }
      break;
    }
    case kUnconfirmedTransaction: {
      if (GetArena() == nullptr) {
        delete transaction_.unconfirmed_transaction_;
      }
      break;
    }
    case kSerializedTransaction: {
      transaction_.serialized_transaction_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}


void TransactionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TransactionNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_transaction();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.TransactionNotification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::TransactionNotification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .pb.Transaction confirmed_transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmed_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.MempoolTransaction unconfirmed_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unconfirmed_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized_transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serialized_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TransactionNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TransactionNotification.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .pb.Transaction confirmed_transaction = 2;
  if (_internal_has_confirmed_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::confirmed_transaction(this), target, stream);
  }

  // .pb.MempoolTransaction unconfirmed_transaction = 3;
  if (_internal_has_unconfirmed_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::unconfirmed_transaction(this), target, stream);
  }

  // bytes serialized_transaction = 4;
  if (_internal_has_serialized_transaction()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serialized_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TransactionNotification)
  return target;
}

size_t TransactionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TransactionNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.TransactionNotification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (transaction_case()) {
    // .pb.Transaction confirmed_transaction = 2;
    case kConfirmedTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.confirmed_transaction_);
      break;
    }
    // .pb.MempoolTransaction unconfirmed_transaction = 3;
    case kUnconfirmedTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transaction_.unconfirmed_transaction_);
      break;
    }
    // bytes serialized_transaction = 4;
    case kSerializedTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TransactionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TransactionNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TransactionNotification)
    MergeFrom(*source);
  }
}

void TransactionNotification::MergeFrom(const TransactionNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TransactionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.transaction_case()) {
    case kConfirmedTransaction: {
      _internal_mutable_confirmed_transaction()->::pb::Transaction::MergeFrom(from._internal_confirmed_transaction());
      break;
    }
    case kUnconfirmedTransaction: {
      _internal_mutable_unconfirmed_transaction()->::pb::MempoolTransaction::MergeFrom(from._internal_unconfirmed_transaction());
      break;
    }
    case kSerializedTransaction: {
      _internal_set_serialized_transaction(from._internal_serialized_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
}

void TransactionNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TransactionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionNotification::CopyFrom(const TransactionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TransactionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionNotification::IsInitialized() const {
  return true;
}

void TransactionNotification::InternalSwap(TransactionNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(transaction_, other->transaction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockInfo::InitAsDefaultInstance() {
}
class BlockInfo::_Internal {
 public:
};

BlockInfo::BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.BlockInfo)
}
BlockInfo::BlockInfo(const BlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  previous_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_block().empty()) {
    previous_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previous_block(),
      GetArena());
  }
  merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_merkle_root().empty()) {
    merkle_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_merkle_root(),
      GetArena());
  }
  next_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_block_hash().empty()) {
    next_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_block_hash(),
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&median_time_) -
    reinterpret_cast<char*>(&height_)) + sizeof(median_time_));
  // @@protoc_insertion_point(copy_constructor:pb.BlockInfo)
}

void BlockInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockInfo_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&median_time_) -
      reinterpret_cast<char*>(&height_)) + sizeof(median_time_));
}

BlockInfo::~BlockInfo() {
  // @@protoc_insertion_point(destructor:pb.BlockInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockInfo::ArenaDtor(void* object) {
  BlockInfo* _this = reinterpret_cast< BlockInfo* >(object);
  (void)_this;
}
void BlockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockInfo& BlockInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockInfo_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void BlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BlockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  merkle_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&median_time_) -
      reinterpret_cast<char*>(&height_)) + sizeof(median_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes merkle_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nonce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confirmations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double difficulty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes next_block_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_next_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 median_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          median_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // bytes previous_block = 4;
  if (this->previous_block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_previous_block(), target);
  }

  // bytes merkle_root = 5;
  if (this->merkle_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_merkle_root(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // uint32 bits = 7;
  if (this->bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bits(), target);
  }

  // uint32 nonce = 8;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_nonce(), target);
  }

  // int32 confirmations = 9;
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_confirmations(), target);
  }

  // double difficulty = 10;
  if (!(this->difficulty() <= 0 && this->difficulty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_difficulty(), target);
  }

  // bytes next_block_hash = 11;
  if (this->next_block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_next_block_hash(), target);
  }

  // int32 size = 12;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_size(), target);
  }

  // int64 median_time = 13;
  if (this->median_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_median_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockInfo)
  return target;
}

size_t BlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BlockInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes previous_block = 4;
  if (this->previous_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_block());
  }

  // bytes merkle_root = 5;
  if (this->merkle_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_merkle_root());
  }

  // bytes next_block_hash = 11;
  if (this->next_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_block_hash());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint32 bits = 7;
  if (this->bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bits());
  }

  // uint32 nonce = 8;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nonce());
  }

  // double difficulty = 10;
  if (!(this->difficulty() <= 0 && this->difficulty() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 confirmations = 9;
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confirmations());
  }

  // int32 size = 12;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int64 median_time = 13;
  if (this->median_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_median_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BlockInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BlockInfo)
    MergeFrom(*source);
  }
}

void BlockInfo::MergeFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.previous_block().size() > 0) {
    _internal_set_previous_block(from._internal_previous_block());
  }
  if (from.merkle_root().size() > 0) {
    _internal_set_merkle_root(from._internal_merkle_root());
  }
  if (from.next_block_hash().size() > 0) {
    _internal_set_next_block_hash(from._internal_next_block_hash());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.bits() != 0) {
    _internal_set_bits(from._internal_bits());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (!(from.difficulty() <= 0 && from.difficulty() >= 0)) {
    _internal_set_difficulty(from._internal_difficulty());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.median_time() != 0) {
    _internal_set_median_time(from._internal_median_time());
  }
}

void BlockInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  return true;
}

void BlockInfo::InternalSwap(BlockInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_block_.Swap(&other->previous_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  merkle_root_.Swap(&other->merkle_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  next_block_hash_.Swap(&other->next_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockInfo, median_time_)
      + sizeof(BlockInfo::median_time_)
      - PROTOBUF_FIELD_OFFSET(BlockInfo, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block_TransactionData::InitAsDefaultInstance() {
  ::pb::_Block_TransactionData_default_instance_.transaction_hash_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::pb::_Block_TransactionData_default_instance_.transaction_ = const_cast< ::pb::Transaction*>(
      ::pb::Transaction::internal_default_instance());
}
class Block_TransactionData::_Internal {
 public:
  static const ::pb::Transaction& transaction(const Block_TransactionData* msg);
};

const ::pb::Transaction&
Block_TransactionData::_Internal::transaction(const Block_TransactionData* msg) {
  return *msg->txids_or_txs_.transaction_;
}
void Block_TransactionData::set_allocated_transaction(::pb::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_txids_or_txs();
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    set_has_transaction();
    txids_or_txs_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Block.TransactionData.transaction)
}
Block_TransactionData::Block_TransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Block.TransactionData)
}
Block_TransactionData::Block_TransactionData(const Block_TransactionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_txids_or_txs();
  switch (from.txids_or_txs_case()) {
    case kTransactionHash: {
      _internal_set_transaction_hash(from._internal_transaction_hash());
      break;
    }
    case kTransaction: {
      _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pb.Block.TransactionData)
}

void Block_TransactionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_TransactionData_bchrpc_2eproto.base);
  clear_has_txids_or_txs();
}

Block_TransactionData::~Block_TransactionData() {
  // @@protoc_insertion_point(destructor:pb.Block.TransactionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block_TransactionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_txids_or_txs()) {
    clear_txids_or_txs();
  }
}

void Block_TransactionData::ArenaDtor(void* object) {
  Block_TransactionData* _this = reinterpret_cast< Block_TransactionData* >(object);
  (void)_this;
}
void Block_TransactionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block_TransactionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block_TransactionData& Block_TransactionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_TransactionData_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void Block_TransactionData::clear_txids_or_txs() {
// @@protoc_insertion_point(one_of_clear_start:pb.Block.TransactionData)
  switch (txids_or_txs_case()) {
    case kTransactionHash: {
      txids_or_txs_.transaction_hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kTransaction: {
      if (GetArena() == nullptr) {
        delete txids_or_txs_.transaction_;
      }
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TXIDS_OR_TXS_NOT_SET;
}


void Block_TransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Block.TransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_txids_or_txs();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block_TransactionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Transaction transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block_TransactionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Block.TransactionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_hash = 1;
  if (_internal_has_transaction_hash()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_hash(), target);
  }

  // .pb.Transaction transaction = 2;
  if (_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Block.TransactionData)
  return target;
}

size_t Block_TransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Block.TransactionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (txids_or_txs_case()) {
    // bytes transaction_hash = 1;
    case kTransactionHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction_hash());
      break;
    }
    // .pb.Transaction transaction = 2;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *txids_or_txs_.transaction_);
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block_TransactionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Block.TransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  const Block_TransactionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block_TransactionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Block.TransactionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Block.TransactionData)
    MergeFrom(*source);
  }
}

void Block_TransactionData::MergeFrom(const Block_TransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Block.TransactionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.txids_or_txs_case()) {
    case kTransactionHash: {
      _internal_set_transaction_hash(from._internal_transaction_hash());
      break;
    }
    case kTransaction: {
      _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
      break;
    }
    case TXIDS_OR_TXS_NOT_SET: {
      break;
    }
  }
}

void Block_TransactionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Block.TransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block_TransactionData::CopyFrom(const Block_TransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Block.TransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_TransactionData::IsInitialized() const {
  return true;
}

void Block_TransactionData::InternalSwap(Block_TransactionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(txids_or_txs_, other->txids_or_txs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block_TransactionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::pb::_Block_default_instance_._instance.get_mutable()->info_ = const_cast< ::pb::BlockInfo*>(
      ::pb::BlockInfo::internal_default_instance());
}
class Block::_Internal {
 public:
  static const ::pb::BlockInfo& info(const Block* msg);
};

const ::pb::BlockInfo&
Block::_Internal::info(const Block* msg) {
  return *msg->info_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transaction_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_data_(from.transaction_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::pb::BlockInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_bchrpc_2eproto.base);
  info_ = nullptr;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:pb.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_data_.Clear();
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.BlockInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Block.TransactionData transaction_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.BlockInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // repeated .pb.Block.TransactionData transaction_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transaction_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Block.TransactionData transaction_data = 2;
  total_size += 1UL * this->_internal_transaction_data_size();
  for (const auto& msg : this->transaction_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.BlockInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_data_.MergeFrom(from.transaction_data_);
  if (from.has_info()) {
    _internal_mutable_info()->::pb::BlockInfo::MergeFrom(from._internal_info());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_data_.InternalSwap(&other->transaction_data_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_Input_Outpoint::InitAsDefaultInstance() {
}
class Transaction_Input_Outpoint::_Internal {
 public:
};

Transaction_Input_Outpoint::Transaction_Input_Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Transaction.Input.Outpoint)
}
Transaction_Input_Outpoint::Transaction_Input_Outpoint(const Transaction_Input_Outpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:pb.Transaction.Input.Outpoint)
}

void Transaction_Input_Outpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

Transaction_Input_Outpoint::~Transaction_Input_Outpoint() {
  // @@protoc_insertion_point(destructor:pb.Transaction.Input.Outpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Input_Outpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Input_Outpoint::ArenaDtor(void* object) {
  Transaction_Input_Outpoint* _this = reinterpret_cast< Transaction_Input_Outpoint* >(object);
  (void)_this;
}
void Transaction_Input_Outpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Input_Outpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Input_Outpoint& Transaction_Input_Outpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Input_Outpoint_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Input_Outpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transaction.Input.Outpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Input_Outpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Input_Outpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transaction.Input.Outpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transaction.Input.Outpoint)
  return target;
}

size_t Transaction_Input_Outpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transaction.Input.Outpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Input_Outpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Transaction.Input.Outpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Input_Outpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Input_Outpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Transaction.Input.Outpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Transaction.Input.Outpoint)
    MergeFrom(*source);
  }
}

void Transaction_Input_Outpoint::MergeFrom(const Transaction_Input_Outpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Transaction.Input.Outpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Transaction_Input_Outpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Transaction.Input.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Input_Outpoint::CopyFrom(const Transaction_Input_Outpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transaction.Input.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Input_Outpoint::IsInitialized() const {
  return true;
}

void Transaction_Input_Outpoint::InternalSwap(Transaction_Input_Outpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Input_Outpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_Input::InitAsDefaultInstance() {
  ::pb::_Transaction_Input_default_instance_._instance.get_mutable()->outpoint_ = const_cast< ::pb::Transaction_Input_Outpoint*>(
      ::pb::Transaction_Input_Outpoint::internal_default_instance());
}
class Transaction_Input::_Internal {
 public:
  static const ::pb::Transaction_Input_Outpoint& outpoint(const Transaction_Input* msg);
};

const ::pb::Transaction_Input_Outpoint&
Transaction_Input::_Internal::outpoint(const Transaction_Input* msg) {
  return *msg->outpoint_;
}
Transaction_Input::Transaction_Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Transaction.Input)
}
Transaction_Input::Transaction_Input(const Transaction_Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_script().empty()) {
    signature_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature_script(),
      GetArena());
  }
  previous_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_script().empty()) {
    previous_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previous_script(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::pb::Transaction_Input_Outpoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:pb.Transaction.Input)
}

void Transaction_Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Input_bchrpc_2eproto.base);
  signature_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&outpoint_)) + sizeof(value_));
}

Transaction_Input::~Transaction_Input() {
  // @@protoc_insertion_point(destructor:pb.Transaction.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpoint_;
}

void Transaction_Input::ArenaDtor(void* object) {
  Transaction_Input* _this = reinterpret_cast< Transaction_Input* >(object);
  (void)_this;
}
void Transaction_Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Input& Transaction_Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Input_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transaction.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.Transaction.Input.Outpoint outpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature_script = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_script = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_previous_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Transaction.Input.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transaction.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .pb.Transaction.Input.Outpoint outpoint = 2;
  if (this->has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::outpoint(this), target, stream);
  }

  // bytes signature_script = 3;
  if (this->signature_script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature_script(), target);
  }

  // uint32 sequence = 4;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence(), target);
  }

  // int64 value = 5;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_value(), target);
  }

  // bytes previous_script = 6;
  if (this->previous_script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_previous_script(), target);
  }

  // string address = 7;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.Input.address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transaction.Input)
  return target;
}

size_t Transaction_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transaction.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_script = 3;
  if (this->signature_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_script());
  }

  // bytes previous_script = 6;
  if (this->previous_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_script());
  }

  // string address = 7;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .pb.Transaction.Input.Outpoint outpoint = 2;
  if (this->has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // uint32 sequence = 4;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  // int64 value = 5;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Transaction.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Transaction.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Transaction.Input)
    MergeFrom(*source);
  }
}

void Transaction_Input::MergeFrom(const Transaction_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Transaction.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature_script().size() > 0) {
    _internal_set_signature_script(from._internal_signature_script());
  }
  if (from.previous_script().size() > 0) {
    _internal_set_previous_script(from._internal_previous_script());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.has_outpoint()) {
    _internal_mutable_outpoint()->::pb::Transaction_Input_Outpoint::MergeFrom(from._internal_outpoint());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Transaction_Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Transaction.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Input::CopyFrom(const Transaction_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transaction.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Input::IsInitialized() const {
  return true;
}

void Transaction_Input::InternalSwap(Transaction_Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_script_.Swap(&other->signature_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_script_.Swap(&other->previous_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Input, value_)
      + sizeof(Transaction_Input::value_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Input, outpoint_)>(
          reinterpret_cast<char*>(&outpoint_),
          reinterpret_cast<char*>(&other->outpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_Output::InitAsDefaultInstance() {
}
class Transaction_Output::_Internal {
 public:
};

Transaction_Output::Transaction_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Transaction.Output)
}
Transaction_Output::Transaction_Output(const Transaction_Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey_script().empty()) {
    pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pubkey_script(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  script_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_script_class().empty()) {
    script_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_script_class(),
      GetArena());
  }
  disassembled_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_disassembled_script().empty()) {
    disassembled_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_disassembled_script(),
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:pb.Transaction.Output)
}

void Transaction_Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Output_bchrpc_2eproto.base);
  pubkey_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disassembled_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(index_));
}

Transaction_Output::~Transaction_Output() {
  // @@protoc_insertion_point(destructor:pb.Transaction.Output)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Output::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  script_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  disassembled_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Output::ArenaDtor(void* object) {
  Transaction_Output* _this = reinterpret_cast< Transaction_Output* >(object);
  (void)_this;
}
void Transaction_Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Output& Transaction_Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Output_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transaction.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  disassembled_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubkey_script = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pubkey_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Transaction.Output.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string script_class = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_script_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Transaction.Output.script_class"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string disassembled_script = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_disassembled_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Transaction.Output.disassembled_script"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transaction.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  // bytes pubkey_script = 3;
  if (this->pubkey_script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pubkey_script(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.Output.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // string script_class = 5;
  if (this->script_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_script_class().data(), static_cast<int>(this->_internal_script_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.Output.script_class");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_script_class(), target);
  }

  // string disassembled_script = 6;
  if (this->disassembled_script().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_disassembled_script().data(), static_cast<int>(this->_internal_disassembled_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Transaction.Output.disassembled_script");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_disassembled_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transaction.Output)
  return target;
}

size_t Transaction_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transaction.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey_script = 3;
  if (this->pubkey_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey_script());
  }

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string script_class = 5;
  if (this->script_class().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_script_class());
  }

  // string disassembled_script = 6;
  if (this->disassembled_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_disassembled_script());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Transaction.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Transaction.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Transaction.Output)
    MergeFrom(*source);
  }
}

void Transaction_Output::MergeFrom(const Transaction_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Transaction.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey_script().size() > 0) {
    _internal_set_pubkey_script(from._internal_pubkey_script());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.script_class().size() > 0) {
    _internal_set_script_class(from._internal_script_class());
  }
  if (from.disassembled_script().size() > 0) {
    _internal_set_disassembled_script(from._internal_disassembled_script());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Transaction_Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Transaction.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Output::CopyFrom(const Transaction_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transaction.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Output::IsInitialized() const {
  return true;
}

void Transaction_Output::InternalSwap(Transaction_Output* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_script_.Swap(&other->pubkey_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  script_class_.Swap(&other->script_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  disassembled_script_.Swap(&other->disassembled_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Output, index_)
      + sizeof(Transaction_Output::index_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Output, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
class Transaction::_Internal {
 public:
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(block_height_));
  // @@protoc_insertion_point(copy_constructor:pb.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_bchrpc_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&version_)) + sizeof(block_height_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:pb.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&version_)) + sizeof(block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.Transaction.Input inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.Transaction.Output outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 lock_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confirmations = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // repeated .pb.Transaction.Input inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inputs(i), target, stream);
  }

  // repeated .pb.Transaction.Output outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_outputs(i), target, stream);
  }

  // uint32 lock_time = 5;
  if (this->lock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lock_time(), target);
  }

  // int32 size = 8;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_size(), target);
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_timestamp(), target);
  }

  // int32 confirmations = 10;
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_confirmations(), target);
  }

  // int32 block_height = 11;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_block_height(), target);
  }

  // bytes block_hash = 12;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_block_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Transaction.Input inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.Transaction.Output outputs = 4;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes block_hash = 12;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // uint32 lock_time = 5;
  if (this->lock_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lock_time());
  }

  // int64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 size = 8;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // int32 confirmations = 10;
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confirmations());
  }

  // int32 block_height = 11;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.lock_time() != 0) {
    _internal_set_lock_time(from._internal_lock_time());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, block_height_)
      + sizeof(Transaction::block_height_)
      - PROTOBUF_FIELD_OFFSET(Transaction, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MempoolTransaction::InitAsDefaultInstance() {
  ::pb::_MempoolTransaction_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::pb::Transaction*>(
      ::pb::Transaction::internal_default_instance());
}
class MempoolTransaction::_Internal {
 public:
  static const ::pb::Transaction& transaction(const MempoolTransaction* msg);
};

const ::pb::Transaction&
MempoolTransaction::_Internal::transaction(const MempoolTransaction* msg) {
  return *msg->transaction_;
}
MempoolTransaction::MempoolTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.MempoolTransaction)
}
MempoolTransaction::MempoolTransaction(const MempoolTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::pb::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ::memcpy(&added_time_, &from.added_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&added_height_) -
    reinterpret_cast<char*>(&added_time_)) + sizeof(added_height_));
  // @@protoc_insertion_point(copy_constructor:pb.MempoolTransaction)
}

void MempoolTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MempoolTransaction_bchrpc_2eproto.base);
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&added_height_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(added_height_));
}

MempoolTransaction::~MempoolTransaction() {
  // @@protoc_insertion_point(destructor:pb.MempoolTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MempoolTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void MempoolTransaction::ArenaDtor(void* object) {
  MempoolTransaction* _this = reinterpret_cast< MempoolTransaction* >(object);
  (void)_this;
}
void MempoolTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MempoolTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MempoolTransaction& MempoolTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MempoolTransaction_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void MempoolTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MempoolTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ::memset(&added_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&added_height_) -
      reinterpret_cast<char*>(&added_time_)) + sizeof(added_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MempoolTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 added_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          added_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 added_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          added_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_per_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fee_per_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double starting_priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          starting_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MempoolTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MempoolTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // int64 added_time = 2;
  if (this->added_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_added_time(), target);
  }

  // int32 added_height = 3;
  if (this->added_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_added_height(), target);
  }

  // int64 fee = 4;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fee(), target);
  }

  // int64 fee_per_kb = 5;
  if (this->fee_per_kb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_fee_per_kb(), target);
  }

  // double starting_priority = 6;
  if (!(this->starting_priority() <= 0 && this->starting_priority() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_starting_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MempoolTransaction)
  return target;
}

size_t MempoolTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MempoolTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // int64 added_time = 2;
  if (this->added_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_added_time());
  }

  // int64 fee = 4;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // int64 fee_per_kb = 5;
  if (this->fee_per_kb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_per_kb());
  }

  // double starting_priority = 6;
  if (!(this->starting_priority() <= 0 && this->starting_priority() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 added_height = 3;
  if (this->added_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_added_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MempoolTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MempoolTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const MempoolTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MempoolTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MempoolTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MempoolTransaction)
    MergeFrom(*source);
  }
}

void MempoolTransaction::MergeFrom(const MempoolTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MempoolTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::pb::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from.added_time() != 0) {
    _internal_set_added_time(from._internal_added_time());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.fee_per_kb() != 0) {
    _internal_set_fee_per_kb(from._internal_fee_per_kb());
  }
  if (!(from.starting_priority() <= 0 && from.starting_priority() >= 0)) {
    _internal_set_starting_priority(from._internal_starting_priority());
  }
  if (from.added_height() != 0) {
    _internal_set_added_height(from._internal_added_height());
  }
}

void MempoolTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MempoolTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MempoolTransaction::CopyFrom(const MempoolTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MempoolTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MempoolTransaction::IsInitialized() const {
  return true;
}

void MempoolTransaction::InternalSwap(MempoolTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MempoolTransaction, added_height_)
      + sizeof(MempoolTransaction::added_height_)
      - PROTOBUF_FIELD_OFFSET(MempoolTransaction, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MempoolTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnspentOutput::InitAsDefaultInstance() {
  ::pb::_UnspentOutput_default_instance_._instance.get_mutable()->outpoint_ = const_cast< ::pb::Transaction_Input_Outpoint*>(
      ::pb::Transaction_Input_Outpoint::internal_default_instance());
}
class UnspentOutput::_Internal {
 public:
  static const ::pb::Transaction_Input_Outpoint& outpoint(const UnspentOutput* msg);
};

const ::pb::Transaction_Input_Outpoint&
UnspentOutput::_Internal::outpoint(const UnspentOutput* msg) {
  return *msg->outpoint_;
}
UnspentOutput::UnspentOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.UnspentOutput)
}
UnspentOutput::UnspentOutput(const UnspentOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey_script().empty()) {
    pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pubkey_script(),
      GetArena());
  }
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::pb::Transaction_Input_Outpoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&value_)) + sizeof(block_height_));
  // @@protoc_insertion_point(copy_constructor:pb.UnspentOutput)
}

void UnspentOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnspentOutput_bchrpc_2eproto.base);
  pubkey_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&outpoint_)) + sizeof(block_height_));
}

UnspentOutput::~UnspentOutput() {
  // @@protoc_insertion_point(destructor:pb.UnspentOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnspentOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpoint_;
}

void UnspentOutput::ArenaDtor(void* object) {
  UnspentOutput* _this = reinterpret_cast< UnspentOutput* >(object);
  (void)_this;
}
void UnspentOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnspentOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnspentOutput& UnspentOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnspentOutput_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void UnspentOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.UnspentOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_height_) -
      reinterpret_cast<char*>(&value_)) + sizeof(block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnspentOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.Transaction.Input.Outpoint outpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubkey_script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pubkey_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_coinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_coinbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnspentOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UnspentOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Transaction.Input.Outpoint outpoint = 1;
  if (this->has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::outpoint(this), target, stream);
  }

  // bytes pubkey_script = 2;
  if (this->pubkey_script().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pubkey_script(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // bool is_coinbase = 4;
  if (this->is_coinbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_coinbase(), target);
  }

  // int32 block_height = 5;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UnspentOutput)
  return target;
}

size_t UnspentOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.UnspentOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey_script = 2;
  if (this->pubkey_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey_script());
  }

  // .pb.Transaction.Input.Outpoint outpoint = 1;
  if (this->has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // bool is_coinbase = 4;
  if (this->is_coinbase() != 0) {
    total_size += 1 + 1;
  }

  // int32 block_height = 5;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnspentOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.UnspentOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const UnspentOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnspentOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.UnspentOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.UnspentOutput)
    MergeFrom(*source);
  }
}

void UnspentOutput::MergeFrom(const UnspentOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.UnspentOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey_script().size() > 0) {
    _internal_set_pubkey_script(from._internal_pubkey_script());
  }
  if (from.has_outpoint()) {
    _internal_mutable_outpoint()->::pb::Transaction_Input_Outpoint::MergeFrom(from._internal_outpoint());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.is_coinbase() != 0) {
    _internal_set_is_coinbase(from._internal_is_coinbase());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
}

void UnspentOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.UnspentOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnspentOutput::CopyFrom(const UnspentOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.UnspentOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnspentOutput::IsInitialized() const {
  return true;
}

void UnspentOutput::InternalSwap(UnspentOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_script_.Swap(&other->pubkey_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnspentOutput, block_height_)
      + sizeof(UnspentOutput::block_height_)
      - PROTOBUF_FIELD_OFFSET(UnspentOutput, outpoint_)>(
          reinterpret_cast<char*>(&outpoint_),
          reinterpret_cast<char*>(&other->outpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnspentOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionFilter::InitAsDefaultInstance() {
}
class TransactionFilter::_Internal {
 public:
};

TransactionFilter::TransactionFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addresses_(arena),
  outpoints_(arena),
  data_elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TransactionFilter)
}
TransactionFilter::TransactionFilter(const TransactionFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresses_(from.addresses_),
      outpoints_(from.outpoints_),
      data_elements_(from.data_elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_transactions_ = from.all_transactions_;
  // @@protoc_insertion_point(copy_constructor:pb.TransactionFilter)
}

void TransactionFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionFilter_bchrpc_2eproto.base);
  all_transactions_ = false;
}

TransactionFilter::~TransactionFilter() {
  // @@protoc_insertion_point(destructor:pb.TransactionFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransactionFilter::ArenaDtor(void* object) {
  TransactionFilter* _this = reinterpret_cast< TransactionFilter* >(object);
  (void)_this;
}
void TransactionFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionFilter& TransactionFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionFilter_bchrpc_2eproto.base);
  return *internal_default_instance();
}


void TransactionFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TransactionFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  outpoints_.Clear();
  data_elements_.Clear();
  all_transactions_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.TransactionFilter.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.Transaction.Input.Outpoint outpoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes data_elements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_elements();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool all_transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          all_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TransactionFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TransactionFilter.addresses");
    target = stream->WriteString(1, s, target);
  }

  // repeated .pb.Transaction.Input.Outpoint outpoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outpoints(i), target, stream);
  }

  // repeated bytes data_elements = 3;
  for (int i = 0, n = this->_internal_data_elements_size(); i < n; i++) {
    const auto& s = this->_internal_data_elements(i);
    target = stream->WriteBytes(3, s, target);
  }

  // bool all_transactions = 4;
  if (this->all_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_all_transactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TransactionFilter)
  return target;
}

size_t TransactionFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TransactionFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // repeated .pb.Transaction.Input.Outpoint outpoints = 2;
  total_size += 1UL * this->_internal_outpoints_size();
  for (const auto& msg : this->outpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes data_elements = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_elements_.size());
  for (int i = 0, n = data_elements_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_elements_.Get(i));
  }

  // bool all_transactions = 4;
  if (this->all_transactions() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TransactionFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TransactionFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TransactionFilter)
    MergeFrom(*source);
  }
}

void TransactionFilter::MergeFrom(const TransactionFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TransactionFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  outpoints_.MergeFrom(from.outpoints_);
  data_elements_.MergeFrom(from.data_elements_);
  if (from.all_transactions() != 0) {
    _internal_set_all_transactions(from._internal_all_transactions());
  }
}

void TransactionFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TransactionFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFilter::CopyFrom(const TransactionFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TransactionFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFilter::IsInitialized() const {
  return true;
}

void TransactionFilter::InternalSwap(TransactionFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  outpoints_.InternalSwap(&other->outpoints_);
  data_elements_.InternalSwap(&other->data_elements_);
  swap(all_transactions_, other->all_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::GetMempoolInfoRequest* Arena::CreateMaybeMessage< ::pb::GetMempoolInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMempoolInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetMempoolInfoResponse* Arena::CreateMaybeMessage< ::pb::GetMempoolInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMempoolInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetMempoolRequest* Arena::CreateMaybeMessage< ::pb::GetMempoolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMempoolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetMempoolResponse_TransactionData* Arena::CreateMaybeMessage< ::pb::GetMempoolResponse_TransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMempoolResponse_TransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetMempoolResponse* Arena::CreateMaybeMessage< ::pb::GetMempoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMempoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockchainInfoRequest* Arena::CreateMaybeMessage< ::pb::GetBlockchainInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockchainInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockchainInfoResponse* Arena::CreateMaybeMessage< ::pb::GetBlockchainInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockchainInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockInfoRequest* Arena::CreateMaybeMessage< ::pb::GetBlockInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockInfoResponse* Arena::CreateMaybeMessage< ::pb::GetBlockInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockRequest* Arena::CreateMaybeMessage< ::pb::GetBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockResponse* Arena::CreateMaybeMessage< ::pb::GetBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetRawBlockRequest* Arena::CreateMaybeMessage< ::pb::GetRawBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetRawBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetRawBlockResponse* Arena::CreateMaybeMessage< ::pb::GetRawBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetRawBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockFilterRequest* Arena::CreateMaybeMessage< ::pb::GetBlockFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetBlockFilterResponse* Arena::CreateMaybeMessage< ::pb::GetBlockFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetBlockFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetHeadersRequest* Arena::CreateMaybeMessage< ::pb::GetHeadersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetHeadersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetHeadersResponse* Arena::CreateMaybeMessage< ::pb::GetHeadersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetHeadersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetTransactionRequest* Arena::CreateMaybeMessage< ::pb::GetTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetTransactionResponse* Arena::CreateMaybeMessage< ::pb::GetTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetRawTransactionRequest* Arena::CreateMaybeMessage< ::pb::GetRawTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetRawTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetRawTransactionResponse* Arena::CreateMaybeMessage< ::pb::GetRawTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetRawTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetAddressTransactionsRequest* Arena::CreateMaybeMessage< ::pb::GetAddressTransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetAddressTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetAddressTransactionsResponse* Arena::CreateMaybeMessage< ::pb::GetAddressTransactionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetAddressTransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetRawAddressTransactionsRequest* Arena::CreateMaybeMessage< ::pb::GetRawAddressTransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetRawAddressTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetRawAddressTransactionsResponse* Arena::CreateMaybeMessage< ::pb::GetRawAddressTransactionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetRawAddressTransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetAddressUnspentOutputsRequest* Arena::CreateMaybeMessage< ::pb::GetAddressUnspentOutputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetAddressUnspentOutputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetAddressUnspentOutputsResponse* Arena::CreateMaybeMessage< ::pb::GetAddressUnspentOutputsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetAddressUnspentOutputsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetUnspentOutputRequest* Arena::CreateMaybeMessage< ::pb::GetUnspentOutputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetUnspentOutputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetUnspentOutputResponse* Arena::CreateMaybeMessage< ::pb::GetUnspentOutputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetUnspentOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetMerkleProofRequest* Arena::CreateMaybeMessage< ::pb::GetMerkleProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMerkleProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GetMerkleProofResponse* Arena::CreateMaybeMessage< ::pb::GetMerkleProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GetMerkleProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubmitTransactionRequest* Arena::CreateMaybeMessage< ::pb::SubmitTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubmitTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubmitTransactionResponse* Arena::CreateMaybeMessage< ::pb::SubmitTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubmitTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubscribeTransactionsRequest* Arena::CreateMaybeMessage< ::pb::SubscribeTransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubscribeTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SubscribeBlocksRequest* Arena::CreateMaybeMessage< ::pb::SubscribeBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::SubscribeBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BlockNotification* Arena::CreateMaybeMessage< ::pb::BlockNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::BlockNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TransactionNotification* Arena::CreateMaybeMessage< ::pb::TransactionNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TransactionNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BlockInfo* Arena::CreateMaybeMessage< ::pb::BlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::BlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Block_TransactionData* Arena::CreateMaybeMessage< ::pb::Block_TransactionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Block_TransactionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Block* Arena::CreateMaybeMessage< ::pb::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transaction_Input_Outpoint* Arena::CreateMaybeMessage< ::pb::Transaction_Input_Outpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Transaction_Input_Outpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transaction_Input* Arena::CreateMaybeMessage< ::pb::Transaction_Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Transaction_Input >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transaction_Output* Arena::CreateMaybeMessage< ::pb::Transaction_Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Transaction_Output >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Transaction* Arena::CreateMaybeMessage< ::pb::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MempoolTransaction* Arena::CreateMaybeMessage< ::pb::MempoolTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::MempoolTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::UnspentOutput* Arena::CreateMaybeMessage< ::pb::UnspentOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::UnspentOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TransactionFilter* Arena::CreateMaybeMessage< ::pb::TransactionFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TransactionFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
