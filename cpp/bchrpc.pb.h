// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bchrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bchrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bchrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bchrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bchrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[47]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bchrpc_2eproto;
namespace pb {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockInfo;
class BlockInfoDefaultTypeInternal;
extern BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
class BlockNotification;
class BlockNotificationDefaultTypeInternal;
extern BlockNotificationDefaultTypeInternal _BlockNotification_default_instance_;
class Block_TransactionData;
class Block_TransactionDataDefaultTypeInternal;
extern Block_TransactionDataDefaultTypeInternal _Block_TransactionData_default_instance_;
class GetAddressTransactionsRequest;
class GetAddressTransactionsRequestDefaultTypeInternal;
extern GetAddressTransactionsRequestDefaultTypeInternal _GetAddressTransactionsRequest_default_instance_;
class GetAddressTransactionsResponse;
class GetAddressTransactionsResponseDefaultTypeInternal;
extern GetAddressTransactionsResponseDefaultTypeInternal _GetAddressTransactionsResponse_default_instance_;
class GetAddressUnspentOutputsRequest;
class GetAddressUnspentOutputsRequestDefaultTypeInternal;
extern GetAddressUnspentOutputsRequestDefaultTypeInternal _GetAddressUnspentOutputsRequest_default_instance_;
class GetAddressUnspentOutputsResponse;
class GetAddressUnspentOutputsResponseDefaultTypeInternal;
extern GetAddressUnspentOutputsResponseDefaultTypeInternal _GetAddressUnspentOutputsResponse_default_instance_;
class GetBlockFilterRequest;
class GetBlockFilterRequestDefaultTypeInternal;
extern GetBlockFilterRequestDefaultTypeInternal _GetBlockFilterRequest_default_instance_;
class GetBlockFilterResponse;
class GetBlockFilterResponseDefaultTypeInternal;
extern GetBlockFilterResponseDefaultTypeInternal _GetBlockFilterResponse_default_instance_;
class GetBlockInfoRequest;
class GetBlockInfoRequestDefaultTypeInternal;
extern GetBlockInfoRequestDefaultTypeInternal _GetBlockInfoRequest_default_instance_;
class GetBlockInfoResponse;
class GetBlockInfoResponseDefaultTypeInternal;
extern GetBlockInfoResponseDefaultTypeInternal _GetBlockInfoResponse_default_instance_;
class GetBlockRequest;
class GetBlockRequestDefaultTypeInternal;
extern GetBlockRequestDefaultTypeInternal _GetBlockRequest_default_instance_;
class GetBlockResponse;
class GetBlockResponseDefaultTypeInternal;
extern GetBlockResponseDefaultTypeInternal _GetBlockResponse_default_instance_;
class GetBlockchainInfoRequest;
class GetBlockchainInfoRequestDefaultTypeInternal;
extern GetBlockchainInfoRequestDefaultTypeInternal _GetBlockchainInfoRequest_default_instance_;
class GetBlockchainInfoResponse;
class GetBlockchainInfoResponseDefaultTypeInternal;
extern GetBlockchainInfoResponseDefaultTypeInternal _GetBlockchainInfoResponse_default_instance_;
class GetHeadersRequest;
class GetHeadersRequestDefaultTypeInternal;
extern GetHeadersRequestDefaultTypeInternal _GetHeadersRequest_default_instance_;
class GetHeadersResponse;
class GetHeadersResponseDefaultTypeInternal;
extern GetHeadersResponseDefaultTypeInternal _GetHeadersResponse_default_instance_;
class GetMempoolInfoRequest;
class GetMempoolInfoRequestDefaultTypeInternal;
extern GetMempoolInfoRequestDefaultTypeInternal _GetMempoolInfoRequest_default_instance_;
class GetMempoolInfoResponse;
class GetMempoolInfoResponseDefaultTypeInternal;
extern GetMempoolInfoResponseDefaultTypeInternal _GetMempoolInfoResponse_default_instance_;
class GetMempoolRequest;
class GetMempoolRequestDefaultTypeInternal;
extern GetMempoolRequestDefaultTypeInternal _GetMempoolRequest_default_instance_;
class GetMempoolResponse;
class GetMempoolResponseDefaultTypeInternal;
extern GetMempoolResponseDefaultTypeInternal _GetMempoolResponse_default_instance_;
class GetMempoolResponse_TransactionData;
class GetMempoolResponse_TransactionDataDefaultTypeInternal;
extern GetMempoolResponse_TransactionDataDefaultTypeInternal _GetMempoolResponse_TransactionData_default_instance_;
class GetMerkleProofRequest;
class GetMerkleProofRequestDefaultTypeInternal;
extern GetMerkleProofRequestDefaultTypeInternal _GetMerkleProofRequest_default_instance_;
class GetMerkleProofResponse;
class GetMerkleProofResponseDefaultTypeInternal;
extern GetMerkleProofResponseDefaultTypeInternal _GetMerkleProofResponse_default_instance_;
class GetRawAddressTransactionsRequest;
class GetRawAddressTransactionsRequestDefaultTypeInternal;
extern GetRawAddressTransactionsRequestDefaultTypeInternal _GetRawAddressTransactionsRequest_default_instance_;
class GetRawAddressTransactionsResponse;
class GetRawAddressTransactionsResponseDefaultTypeInternal;
extern GetRawAddressTransactionsResponseDefaultTypeInternal _GetRawAddressTransactionsResponse_default_instance_;
class GetRawBlockRequest;
class GetRawBlockRequestDefaultTypeInternal;
extern GetRawBlockRequestDefaultTypeInternal _GetRawBlockRequest_default_instance_;
class GetRawBlockResponse;
class GetRawBlockResponseDefaultTypeInternal;
extern GetRawBlockResponseDefaultTypeInternal _GetRawBlockResponse_default_instance_;
class GetRawTransactionRequest;
class GetRawTransactionRequestDefaultTypeInternal;
extern GetRawTransactionRequestDefaultTypeInternal _GetRawTransactionRequest_default_instance_;
class GetRawTransactionResponse;
class GetRawTransactionResponseDefaultTypeInternal;
extern GetRawTransactionResponseDefaultTypeInternal _GetRawTransactionResponse_default_instance_;
class GetTransactionRequest;
class GetTransactionRequestDefaultTypeInternal;
extern GetTransactionRequestDefaultTypeInternal _GetTransactionRequest_default_instance_;
class GetTransactionResponse;
class GetTransactionResponseDefaultTypeInternal;
extern GetTransactionResponseDefaultTypeInternal _GetTransactionResponse_default_instance_;
class GetUnspentOutputRequest;
class GetUnspentOutputRequestDefaultTypeInternal;
extern GetUnspentOutputRequestDefaultTypeInternal _GetUnspentOutputRequest_default_instance_;
class GetUnspentOutputResponse;
class GetUnspentOutputResponseDefaultTypeInternal;
extern GetUnspentOutputResponseDefaultTypeInternal _GetUnspentOutputResponse_default_instance_;
class MempoolTransaction;
class MempoolTransactionDefaultTypeInternal;
extern MempoolTransactionDefaultTypeInternal _MempoolTransaction_default_instance_;
class SubmitTransactionRequest;
class SubmitTransactionRequestDefaultTypeInternal;
extern SubmitTransactionRequestDefaultTypeInternal _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponse;
class SubmitTransactionResponseDefaultTypeInternal;
extern SubmitTransactionResponseDefaultTypeInternal _SubmitTransactionResponse_default_instance_;
class SubscribeBlocksRequest;
class SubscribeBlocksRequestDefaultTypeInternal;
extern SubscribeBlocksRequestDefaultTypeInternal _SubscribeBlocksRequest_default_instance_;
class SubscribeTransactionsRequest;
class SubscribeTransactionsRequestDefaultTypeInternal;
extern SubscribeTransactionsRequestDefaultTypeInternal _SubscribeTransactionsRequest_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionFilter;
class TransactionFilterDefaultTypeInternal;
extern TransactionFilterDefaultTypeInternal _TransactionFilter_default_instance_;
class TransactionNotification;
class TransactionNotificationDefaultTypeInternal;
extern TransactionNotificationDefaultTypeInternal _TransactionNotification_default_instance_;
class Transaction_Input;
class Transaction_InputDefaultTypeInternal;
extern Transaction_InputDefaultTypeInternal _Transaction_Input_default_instance_;
class Transaction_Input_Outpoint;
class Transaction_Input_OutpointDefaultTypeInternal;
extern Transaction_Input_OutpointDefaultTypeInternal _Transaction_Input_Outpoint_default_instance_;
class Transaction_Output;
class Transaction_OutputDefaultTypeInternal;
extern Transaction_OutputDefaultTypeInternal _Transaction_Output_default_instance_;
class UnspentOutput;
class UnspentOutputDefaultTypeInternal;
extern UnspentOutputDefaultTypeInternal _UnspentOutput_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Block* Arena::CreateMaybeMessage<::pb::Block>(Arena*);
template<> ::pb::BlockInfo* Arena::CreateMaybeMessage<::pb::BlockInfo>(Arena*);
template<> ::pb::BlockNotification* Arena::CreateMaybeMessage<::pb::BlockNotification>(Arena*);
template<> ::pb::Block_TransactionData* Arena::CreateMaybeMessage<::pb::Block_TransactionData>(Arena*);
template<> ::pb::GetAddressTransactionsRequest* Arena::CreateMaybeMessage<::pb::GetAddressTransactionsRequest>(Arena*);
template<> ::pb::GetAddressTransactionsResponse* Arena::CreateMaybeMessage<::pb::GetAddressTransactionsResponse>(Arena*);
template<> ::pb::GetAddressUnspentOutputsRequest* Arena::CreateMaybeMessage<::pb::GetAddressUnspentOutputsRequest>(Arena*);
template<> ::pb::GetAddressUnspentOutputsResponse* Arena::CreateMaybeMessage<::pb::GetAddressUnspentOutputsResponse>(Arena*);
template<> ::pb::GetBlockFilterRequest* Arena::CreateMaybeMessage<::pb::GetBlockFilterRequest>(Arena*);
template<> ::pb::GetBlockFilterResponse* Arena::CreateMaybeMessage<::pb::GetBlockFilterResponse>(Arena*);
template<> ::pb::GetBlockInfoRequest* Arena::CreateMaybeMessage<::pb::GetBlockInfoRequest>(Arena*);
template<> ::pb::GetBlockInfoResponse* Arena::CreateMaybeMessage<::pb::GetBlockInfoResponse>(Arena*);
template<> ::pb::GetBlockRequest* Arena::CreateMaybeMessage<::pb::GetBlockRequest>(Arena*);
template<> ::pb::GetBlockResponse* Arena::CreateMaybeMessage<::pb::GetBlockResponse>(Arena*);
template<> ::pb::GetBlockchainInfoRequest* Arena::CreateMaybeMessage<::pb::GetBlockchainInfoRequest>(Arena*);
template<> ::pb::GetBlockchainInfoResponse* Arena::CreateMaybeMessage<::pb::GetBlockchainInfoResponse>(Arena*);
template<> ::pb::GetHeadersRequest* Arena::CreateMaybeMessage<::pb::GetHeadersRequest>(Arena*);
template<> ::pb::GetHeadersResponse* Arena::CreateMaybeMessage<::pb::GetHeadersResponse>(Arena*);
template<> ::pb::GetMempoolInfoRequest* Arena::CreateMaybeMessage<::pb::GetMempoolInfoRequest>(Arena*);
template<> ::pb::GetMempoolInfoResponse* Arena::CreateMaybeMessage<::pb::GetMempoolInfoResponse>(Arena*);
template<> ::pb::GetMempoolRequest* Arena::CreateMaybeMessage<::pb::GetMempoolRequest>(Arena*);
template<> ::pb::GetMempoolResponse* Arena::CreateMaybeMessage<::pb::GetMempoolResponse>(Arena*);
template<> ::pb::GetMempoolResponse_TransactionData* Arena::CreateMaybeMessage<::pb::GetMempoolResponse_TransactionData>(Arena*);
template<> ::pb::GetMerkleProofRequest* Arena::CreateMaybeMessage<::pb::GetMerkleProofRequest>(Arena*);
template<> ::pb::GetMerkleProofResponse* Arena::CreateMaybeMessage<::pb::GetMerkleProofResponse>(Arena*);
template<> ::pb::GetRawAddressTransactionsRequest* Arena::CreateMaybeMessage<::pb::GetRawAddressTransactionsRequest>(Arena*);
template<> ::pb::GetRawAddressTransactionsResponse* Arena::CreateMaybeMessage<::pb::GetRawAddressTransactionsResponse>(Arena*);
template<> ::pb::GetRawBlockRequest* Arena::CreateMaybeMessage<::pb::GetRawBlockRequest>(Arena*);
template<> ::pb::GetRawBlockResponse* Arena::CreateMaybeMessage<::pb::GetRawBlockResponse>(Arena*);
template<> ::pb::GetRawTransactionRequest* Arena::CreateMaybeMessage<::pb::GetRawTransactionRequest>(Arena*);
template<> ::pb::GetRawTransactionResponse* Arena::CreateMaybeMessage<::pb::GetRawTransactionResponse>(Arena*);
template<> ::pb::GetTransactionRequest* Arena::CreateMaybeMessage<::pb::GetTransactionRequest>(Arena*);
template<> ::pb::GetTransactionResponse* Arena::CreateMaybeMessage<::pb::GetTransactionResponse>(Arena*);
template<> ::pb::GetUnspentOutputRequest* Arena::CreateMaybeMessage<::pb::GetUnspentOutputRequest>(Arena*);
template<> ::pb::GetUnspentOutputResponse* Arena::CreateMaybeMessage<::pb::GetUnspentOutputResponse>(Arena*);
template<> ::pb::MempoolTransaction* Arena::CreateMaybeMessage<::pb::MempoolTransaction>(Arena*);
template<> ::pb::SubmitTransactionRequest* Arena::CreateMaybeMessage<::pb::SubmitTransactionRequest>(Arena*);
template<> ::pb::SubmitTransactionResponse* Arena::CreateMaybeMessage<::pb::SubmitTransactionResponse>(Arena*);
template<> ::pb::SubscribeBlocksRequest* Arena::CreateMaybeMessage<::pb::SubscribeBlocksRequest>(Arena*);
template<> ::pb::SubscribeTransactionsRequest* Arena::CreateMaybeMessage<::pb::SubscribeTransactionsRequest>(Arena*);
template<> ::pb::Transaction* Arena::CreateMaybeMessage<::pb::Transaction>(Arena*);
template<> ::pb::TransactionFilter* Arena::CreateMaybeMessage<::pb::TransactionFilter>(Arena*);
template<> ::pb::TransactionNotification* Arena::CreateMaybeMessage<::pb::TransactionNotification>(Arena*);
template<> ::pb::Transaction_Input* Arena::CreateMaybeMessage<::pb::Transaction_Input>(Arena*);
template<> ::pb::Transaction_Input_Outpoint* Arena::CreateMaybeMessage<::pb::Transaction_Input_Outpoint>(Arena*);
template<> ::pb::Transaction_Output* Arena::CreateMaybeMessage<::pb::Transaction_Output>(Arena*);
template<> ::pb::UnspentOutput* Arena::CreateMaybeMessage<::pb::UnspentOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum GetBlockchainInfoResponse_BitcoinNet : int {
  GetBlockchainInfoResponse_BitcoinNet_MAINNET = 0,
  GetBlockchainInfoResponse_BitcoinNet_REGTEST = 1,
  GetBlockchainInfoResponse_BitcoinNet_TESTNET3 = 2,
  GetBlockchainInfoResponse_BitcoinNet_SIMNET = 3,
  GetBlockchainInfoResponse_BitcoinNet_GetBlockchainInfoResponse_BitcoinNet_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetBlockchainInfoResponse_BitcoinNet_GetBlockchainInfoResponse_BitcoinNet_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetBlockchainInfoResponse_BitcoinNet_IsValid(int value);
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_MIN = GetBlockchainInfoResponse_BitcoinNet_MAINNET;
constexpr GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_MAX = GetBlockchainInfoResponse_BitcoinNet_SIMNET;
constexpr int GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_ARRAYSIZE = GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetBlockchainInfoResponse_BitcoinNet_descriptor();
template<typename T>
inline const std::string& GetBlockchainInfoResponse_BitcoinNet_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetBlockchainInfoResponse_BitcoinNet>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetBlockchainInfoResponse_BitcoinNet_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetBlockchainInfoResponse_BitcoinNet_descriptor(), enum_t_value);
}
inline bool GetBlockchainInfoResponse_BitcoinNet_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetBlockchainInfoResponse_BitcoinNet* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetBlockchainInfoResponse_BitcoinNet>(
    GetBlockchainInfoResponse_BitcoinNet_descriptor(), name, value);
}
enum BlockNotification_Type : int {
  BlockNotification_Type_CONNECTED = 0,
  BlockNotification_Type_DISCONNECTED = 1,
  BlockNotification_Type_BlockNotification_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlockNotification_Type_BlockNotification_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlockNotification_Type_IsValid(int value);
constexpr BlockNotification_Type BlockNotification_Type_Type_MIN = BlockNotification_Type_CONNECTED;
constexpr BlockNotification_Type BlockNotification_Type_Type_MAX = BlockNotification_Type_DISCONNECTED;
constexpr int BlockNotification_Type_Type_ARRAYSIZE = BlockNotification_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockNotification_Type_descriptor();
template<typename T>
inline const std::string& BlockNotification_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlockNotification_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlockNotification_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlockNotification_Type_descriptor(), enum_t_value);
}
inline bool BlockNotification_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlockNotification_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlockNotification_Type>(
    BlockNotification_Type_descriptor(), name, value);
}
enum TransactionNotification_Type : int {
  TransactionNotification_Type_UNCONFIRMED = 0,
  TransactionNotification_Type_CONFIRMED = 1,
  TransactionNotification_Type_TransactionNotification_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionNotification_Type_TransactionNotification_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionNotification_Type_IsValid(int value);
constexpr TransactionNotification_Type TransactionNotification_Type_Type_MIN = TransactionNotification_Type_UNCONFIRMED;
constexpr TransactionNotification_Type TransactionNotification_Type_Type_MAX = TransactionNotification_Type_CONFIRMED;
constexpr int TransactionNotification_Type_Type_ARRAYSIZE = TransactionNotification_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionNotification_Type_descriptor();
template<typename T>
inline const std::string& TransactionNotification_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionNotification_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionNotification_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionNotification_Type_descriptor(), enum_t_value);
}
inline bool TransactionNotification_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionNotification_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionNotification_Type>(
    TransactionNotification_Type_descriptor(), name, value);
}
// ===================================================================

class GetMempoolInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMempoolInfoRequest) */ {
 public:
  inline GetMempoolInfoRequest() : GetMempoolInfoRequest(nullptr) {}
  virtual ~GetMempoolInfoRequest();

  GetMempoolInfoRequest(const GetMempoolInfoRequest& from);
  GetMempoolInfoRequest(GetMempoolInfoRequest&& from) noexcept
    : GetMempoolInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetMempoolInfoRequest& operator=(const GetMempoolInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolInfoRequest& operator=(GetMempoolInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolInfoRequest*>(
               &_GetMempoolInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMempoolInfoRequest& a, GetMempoolInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolInfoRequest* New() const final {
    return CreateMaybeMessage<GetMempoolInfoRequest>(nullptr);
  }

  GetMempoolInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolInfoRequest& from);
  void MergeFrom(const GetMempoolInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMempoolInfoRequest";
  }
  protected:
  explicit GetMempoolInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.GetMempoolInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMempoolInfoResponse) */ {
 public:
  inline GetMempoolInfoResponse() : GetMempoolInfoResponse(nullptr) {}
  virtual ~GetMempoolInfoResponse();

  GetMempoolInfoResponse(const GetMempoolInfoResponse& from);
  GetMempoolInfoResponse(GetMempoolInfoResponse&& from) noexcept
    : GetMempoolInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetMempoolInfoResponse& operator=(const GetMempoolInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolInfoResponse& operator=(GetMempoolInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolInfoResponse*>(
               &_GetMempoolInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMempoolInfoResponse& a, GetMempoolInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolInfoResponse* New() const final {
    return CreateMaybeMessage<GetMempoolInfoResponse>(nullptr);
  }

  GetMempoolInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolInfoResponse& from);
  void MergeFrom(const GetMempoolInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMempoolInfoResponse";
  }
  protected:
  explicit GetMempoolInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kBytesFieldNumber = 2,
  };
  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bytes = 2;
  void clear_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes() const;
  void set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bytes() const;
  void _internal_set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetMempoolInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMempoolRequest) */ {
 public:
  inline GetMempoolRequest() : GetMempoolRequest(nullptr) {}
  virtual ~GetMempoolRequest();

  GetMempoolRequest(const GetMempoolRequest& from);
  GetMempoolRequest(GetMempoolRequest&& from) noexcept
    : GetMempoolRequest() {
    *this = ::std::move(from);
  }

  inline GetMempoolRequest& operator=(const GetMempoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolRequest& operator=(GetMempoolRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolRequest*>(
               &_GetMempoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMempoolRequest& a, GetMempoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolRequest* New() const final {
    return CreateMaybeMessage<GetMempoolRequest>(nullptr);
  }

  GetMempoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolRequest& from);
  void MergeFrom(const GetMempoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMempoolRequest";
  }
  protected:
  explicit GetMempoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullTransactionsFieldNumber = 1,
  };
  // bool full_transactions = 1;
  void clear_full_transactions();
  bool full_transactions() const;
  void set_full_transactions(bool value);
  private:
  bool _internal_full_transactions() const;
  void _internal_set_full_transactions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetMempoolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool full_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolResponse_TransactionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMempoolResponse.TransactionData) */ {
 public:
  inline GetMempoolResponse_TransactionData() : GetMempoolResponse_TransactionData(nullptr) {}
  virtual ~GetMempoolResponse_TransactionData();

  GetMempoolResponse_TransactionData(const GetMempoolResponse_TransactionData& from);
  GetMempoolResponse_TransactionData(GetMempoolResponse_TransactionData&& from) noexcept
    : GetMempoolResponse_TransactionData() {
    *this = ::std::move(from);
  }

  inline GetMempoolResponse_TransactionData& operator=(const GetMempoolResponse_TransactionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolResponse_TransactionData& operator=(GetMempoolResponse_TransactionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolResponse_TransactionData& default_instance();

  enum TxidsOrTxsCase {
    kTransactionHash = 1,
    kTransaction = 2,
    TXIDS_OR_TXS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolResponse_TransactionData* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse_TransactionData*>(
               &_GetMempoolResponse_TransactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetMempoolResponse_TransactionData& a, GetMempoolResponse_TransactionData& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolResponse_TransactionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolResponse_TransactionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolResponse_TransactionData* New() const final {
    return CreateMaybeMessage<GetMempoolResponse_TransactionData>(nullptr);
  }

  GetMempoolResponse_TransactionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolResponse_TransactionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolResponse_TransactionData& from);
  void MergeFrom(const GetMempoolResponse_TransactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolResponse_TransactionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMempoolResponse.TransactionData";
  }
  protected:
  explicit GetMempoolResponse_TransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHashFieldNumber = 1,
    kTransactionFieldNumber = 2,
  };
  // bytes transaction_hash = 1;
  private:
  bool _internal_has_transaction_hash() const;
  public:
  void clear_transaction_hash();
  const std::string& transaction_hash() const;
  void set_transaction_hash(const std::string& value);
  void set_transaction_hash(std::string&& value);
  void set_transaction_hash(const char* value);
  void set_transaction_hash(const void* value, size_t size);
  std::string* mutable_transaction_hash();
  std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* transaction_hash);
  private:
  const std::string& _internal_transaction_hash() const;
  void _internal_set_transaction_hash(const std::string& value);
  std::string* _internal_mutable_transaction_hash();
  public:

  // .pb.Transaction transaction = 2;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::pb::Transaction& transaction() const;
  ::pb::Transaction* release_transaction();
  ::pb::Transaction* mutable_transaction();
  void set_allocated_transaction(::pb::Transaction* transaction);
  private:
  const ::pb::Transaction& _internal_transaction() const;
  ::pb::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::pb::Transaction* transaction);
  ::pb::Transaction* unsafe_arena_release_transaction();

  void clear_txids_or_txs();
  TxidsOrTxsCase txids_or_txs_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetMempoolResponse.TransactionData)
 private:
  class _Internal;
  void set_has_transaction_hash();
  void set_has_transaction();

  inline bool has_txids_or_txs() const;
  inline void clear_has_txids_or_txs();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TxidsOrTxsUnion {
    TxidsOrTxsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_hash_;
    ::pb::Transaction* transaction_;
  } txids_or_txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMempoolResponse) */ {
 public:
  inline GetMempoolResponse() : GetMempoolResponse(nullptr) {}
  virtual ~GetMempoolResponse();

  GetMempoolResponse(const GetMempoolResponse& from);
  GetMempoolResponse(GetMempoolResponse&& from) noexcept
    : GetMempoolResponse() {
    *this = ::std::move(from);
  }

  inline GetMempoolResponse& operator=(const GetMempoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolResponse& operator=(GetMempoolResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse*>(
               &_GetMempoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetMempoolResponse& a, GetMempoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolResponse* New() const final {
    return CreateMaybeMessage<GetMempoolResponse>(nullptr);
  }

  GetMempoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolResponse& from);
  void MergeFrom(const GetMempoolResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMempoolResponse";
  }
  protected:
  explicit GetMempoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetMempoolResponse_TransactionData TransactionData;

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionDataFieldNumber = 1,
  };
  // repeated .pb.GetMempoolResponse.TransactionData transaction_data = 1;
  int transaction_data_size() const;
  private:
  int _internal_transaction_data_size() const;
  public:
  void clear_transaction_data();
  ::pb::GetMempoolResponse_TransactionData* mutable_transaction_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GetMempoolResponse_TransactionData >*
      mutable_transaction_data();
  private:
  const ::pb::GetMempoolResponse_TransactionData& _internal_transaction_data(int index) const;
  ::pb::GetMempoolResponse_TransactionData* _internal_add_transaction_data();
  public:
  const ::pb::GetMempoolResponse_TransactionData& transaction_data(int index) const;
  ::pb::GetMempoolResponse_TransactionData* add_transaction_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GetMempoolResponse_TransactionData >&
      transaction_data() const;

  // @@protoc_insertion_point(class_scope:pb.GetMempoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GetMempoolResponse_TransactionData > transaction_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockchainInfoRequest) */ {
 public:
  inline GetBlockchainInfoRequest() : GetBlockchainInfoRequest(nullptr) {}
  virtual ~GetBlockchainInfoRequest();

  GetBlockchainInfoRequest(const GetBlockchainInfoRequest& from);
  GetBlockchainInfoRequest(GetBlockchainInfoRequest&& from) noexcept
    : GetBlockchainInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainInfoRequest& operator=(const GetBlockchainInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainInfoRequest& operator=(GetBlockchainInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockchainInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockchainInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainInfoRequest*>(
               &_GetBlockchainInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBlockchainInfoRequest& a, GetBlockchainInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainInfoRequest* New() const final {
    return CreateMaybeMessage<GetBlockchainInfoRequest>(nullptr);
  }

  GetBlockchainInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockchainInfoRequest& from);
  void MergeFrom(const GetBlockchainInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockchainInfoRequest";
  }
  protected:
  explicit GetBlockchainInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.GetBlockchainInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockchainInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockchainInfoResponse) */ {
 public:
  inline GetBlockchainInfoResponse() : GetBlockchainInfoResponse(nullptr) {}
  virtual ~GetBlockchainInfoResponse();

  GetBlockchainInfoResponse(const GetBlockchainInfoResponse& from);
  GetBlockchainInfoResponse(GetBlockchainInfoResponse&& from) noexcept
    : GetBlockchainInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainInfoResponse& operator=(const GetBlockchainInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockchainInfoResponse& operator=(GetBlockchainInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockchainInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockchainInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainInfoResponse*>(
               &_GetBlockchainInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetBlockchainInfoResponse& a, GetBlockchainInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockchainInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockchainInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainInfoResponse* New() const final {
    return CreateMaybeMessage<GetBlockchainInfoResponse>(nullptr);
  }

  GetBlockchainInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockchainInfoResponse& from);
  void MergeFrom(const GetBlockchainInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockchainInfoResponse";
  }
  protected:
  explicit GetBlockchainInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetBlockchainInfoResponse_BitcoinNet BitcoinNet;
  static constexpr BitcoinNet MAINNET =
    GetBlockchainInfoResponse_BitcoinNet_MAINNET;
  static constexpr BitcoinNet REGTEST =
    GetBlockchainInfoResponse_BitcoinNet_REGTEST;
  static constexpr BitcoinNet TESTNET3 =
    GetBlockchainInfoResponse_BitcoinNet_TESTNET3;
  static constexpr BitcoinNet SIMNET =
    GetBlockchainInfoResponse_BitcoinNet_SIMNET;
  static inline bool BitcoinNet_IsValid(int value) {
    return GetBlockchainInfoResponse_BitcoinNet_IsValid(value);
  }
  static constexpr BitcoinNet BitcoinNet_MIN =
    GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_MIN;
  static constexpr BitcoinNet BitcoinNet_MAX =
    GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_MAX;
  static constexpr int BitcoinNet_ARRAYSIZE =
    GetBlockchainInfoResponse_BitcoinNet_BitcoinNet_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BitcoinNet_descriptor() {
    return GetBlockchainInfoResponse_BitcoinNet_descriptor();
  }
  template<typename T>
  static inline const std::string& BitcoinNet_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BitcoinNet>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BitcoinNet_Name.");
    return GetBlockchainInfoResponse_BitcoinNet_Name(enum_t_value);
  }
  static inline bool BitcoinNet_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BitcoinNet* value) {
    return GetBlockchainInfoResponse_BitcoinNet_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBestBlockHashFieldNumber = 3,
    kBitcoinNetFieldNumber = 1,
    kBestHeightFieldNumber = 2,
    kDifficultyFieldNumber = 4,
    kMedianTimeFieldNumber = 5,
    kTxIndexFieldNumber = 6,
    kAddrIndexFieldNumber = 7,
  };
  // bytes best_block_hash = 3;
  void clear_best_block_hash();
  const std::string& best_block_hash() const;
  void set_best_block_hash(const std::string& value);
  void set_best_block_hash(std::string&& value);
  void set_best_block_hash(const char* value);
  void set_best_block_hash(const void* value, size_t size);
  std::string* mutable_best_block_hash();
  std::string* release_best_block_hash();
  void set_allocated_best_block_hash(std::string* best_block_hash);
  private:
  const std::string& _internal_best_block_hash() const;
  void _internal_set_best_block_hash(const std::string& value);
  std::string* _internal_mutable_best_block_hash();
  public:

  // .pb.GetBlockchainInfoResponse.BitcoinNet bitcoin_net = 1;
  void clear_bitcoin_net();
  ::pb::GetBlockchainInfoResponse_BitcoinNet bitcoin_net() const;
  void set_bitcoin_net(::pb::GetBlockchainInfoResponse_BitcoinNet value);
  private:
  ::pb::GetBlockchainInfoResponse_BitcoinNet _internal_bitcoin_net() const;
  void _internal_set_bitcoin_net(::pb::GetBlockchainInfoResponse_BitcoinNet value);
  public:

  // int32 best_height = 2;
  void clear_best_height();
  ::PROTOBUF_NAMESPACE_ID::int32 best_height() const;
  void set_best_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_best_height() const;
  void _internal_set_best_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double difficulty = 4;
  void clear_difficulty();
  double difficulty() const;
  void set_difficulty(double value);
  private:
  double _internal_difficulty() const;
  void _internal_set_difficulty(double value);
  public:

  // int64 median_time = 5;
  void clear_median_time();
  ::PROTOBUF_NAMESPACE_ID::int64 median_time() const;
  void set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_median_time() const;
  void _internal_set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool tx_index = 6;
  void clear_tx_index();
  bool tx_index() const;
  void set_tx_index(bool value);
  private:
  bool _internal_tx_index() const;
  void _internal_set_tx_index(bool value);
  public:

  // bool addr_index = 7;
  void clear_addr_index();
  bool addr_index() const;
  void set_addr_index(bool value);
  private:
  bool _internal_addr_index() const;
  void _internal_set_addr_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetBlockchainInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr best_block_hash_;
  int bitcoin_net_;
  ::PROTOBUF_NAMESPACE_ID::int32 best_height_;
  double difficulty_;
  ::PROTOBUF_NAMESPACE_ID::int64 median_time_;
  bool tx_index_;
  bool addr_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockInfoRequest) */ {
 public:
  inline GetBlockInfoRequest() : GetBlockInfoRequest(nullptr) {}
  virtual ~GetBlockInfoRequest();

  GetBlockInfoRequest(const GetBlockInfoRequest& from);
  GetBlockInfoRequest(GetBlockInfoRequest&& from) noexcept
    : GetBlockInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoRequest& operator=(const GetBlockInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoRequest& operator=(GetBlockInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoRequest& default_instance();

  enum HashOrHeightCase {
    kHash = 1,
    kHeight = 2,
    HASH_OR_HEIGHT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoRequest*>(
               &_GetBlockInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetBlockInfoRequest& a, GetBlockInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoRequest* New() const final {
    return CreateMaybeMessage<GetBlockInfoRequest>(nullptr);
  }

  GetBlockInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoRequest& from);
  void MergeFrom(const GetBlockInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockInfoRequest";
  }
  protected:
  explicit GetBlockInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // bytes hash = 1;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 height = 2;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_hash_or_height();
  HashOrHeightCase hash_or_height_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetBlockInfoRequest)
 private:
  class _Internal;
  void set_has_hash();
  void set_has_height();

  inline bool has_hash_or_height() const;
  inline void clear_has_hash_or_height();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union HashOrHeightUnion {
    HashOrHeightUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
  } hash_or_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockInfoResponse) */ {
 public:
  inline GetBlockInfoResponse() : GetBlockInfoResponse(nullptr) {}
  virtual ~GetBlockInfoResponse();

  GetBlockInfoResponse(const GetBlockInfoResponse& from);
  GetBlockInfoResponse(GetBlockInfoResponse&& from) noexcept
    : GetBlockInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoResponse& operator=(const GetBlockInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoResponse& operator=(GetBlockInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoResponse*>(
               &_GetBlockInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetBlockInfoResponse& a, GetBlockInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoResponse* New() const final {
    return CreateMaybeMessage<GetBlockInfoResponse>(nullptr);
  }

  GetBlockInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoResponse& from);
  void MergeFrom(const GetBlockInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockInfoResponse";
  }
  protected:
  explicit GetBlockInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .pb.BlockInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::pb::BlockInfo& info() const;
  ::pb::BlockInfo* release_info();
  ::pb::BlockInfo* mutable_info();
  void set_allocated_info(::pb::BlockInfo* info);
  private:
  const ::pb::BlockInfo& _internal_info() const;
  ::pb::BlockInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::pb::BlockInfo* info);
  ::pb::BlockInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:pb.GetBlockInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::BlockInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockRequest) */ {
 public:
  inline GetBlockRequest() : GetBlockRequest(nullptr) {}
  virtual ~GetBlockRequest();

  GetBlockRequest(const GetBlockRequest& from);
  GetBlockRequest(GetBlockRequest&& from) noexcept
    : GetBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockRequest& operator=(const GetBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockRequest& operator=(GetBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockRequest& default_instance();

  enum HashOrHeightCase {
    kHash = 1,
    kHeight = 2,
    HASH_OR_HEIGHT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockRequest*>(
               &_GetBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetBlockRequest& a, GetBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockRequest* New() const final {
    return CreateMaybeMessage<GetBlockRequest>(nullptr);
  }

  GetBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockRequest& from);
  void MergeFrom(const GetBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockRequest";
  }
  protected:
  explicit GetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullTransactionsFieldNumber = 3,
    kHashFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // bool full_transactions = 3;
  void clear_full_transactions();
  bool full_transactions() const;
  void set_full_transactions(bool value);
  private:
  bool _internal_full_transactions() const;
  void _internal_set_full_transactions(bool value);
  public:

  // bytes hash = 1;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 height = 2;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_hash_or_height();
  HashOrHeightCase hash_or_height_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetBlockRequest)
 private:
  class _Internal;
  void set_has_hash();
  void set_has_height();

  inline bool has_hash_or_height() const;
  inline void clear_has_hash_or_height();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool full_transactions_;
  union HashOrHeightUnion {
    HashOrHeightUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
  } hash_or_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockResponse) */ {
 public:
  inline GetBlockResponse() : GetBlockResponse(nullptr) {}
  virtual ~GetBlockResponse();

  GetBlockResponse(const GetBlockResponse& from);
  GetBlockResponse(GetBlockResponse&& from) noexcept
    : GetBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockResponse& operator=(const GetBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockResponse& operator=(GetBlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockResponse*>(
               &_GetBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetBlockResponse& a, GetBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockResponse* New() const final {
    return CreateMaybeMessage<GetBlockResponse>(nullptr);
  }

  GetBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockResponse& from);
  void MergeFrom(const GetBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockResponse";
  }
  protected:
  explicit GetBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // .pb.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::pb::Block& block() const;
  ::pb::Block* release_block();
  ::pb::Block* mutable_block();
  void set_allocated_block(::pb::Block* block);
  private:
  const ::pb::Block& _internal_block() const;
  ::pb::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::pb::Block* block);
  ::pb::Block* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:pb.GetBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::Block* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRawBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetRawBlockRequest) */ {
 public:
  inline GetRawBlockRequest() : GetRawBlockRequest(nullptr) {}
  virtual ~GetRawBlockRequest();

  GetRawBlockRequest(const GetRawBlockRequest& from);
  GetRawBlockRequest(GetRawBlockRequest&& from) noexcept
    : GetRawBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetRawBlockRequest& operator=(const GetRawBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawBlockRequest& operator=(GetRawBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawBlockRequest& default_instance();

  enum HashOrHeightCase {
    kHash = 1,
    kHeight = 2,
    HASH_OR_HEIGHT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawBlockRequest*>(
               &_GetRawBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetRawBlockRequest& a, GetRawBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawBlockRequest* New() const final {
    return CreateMaybeMessage<GetRawBlockRequest>(nullptr);
  }

  GetRawBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawBlockRequest& from);
  void MergeFrom(const GetRawBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetRawBlockRequest";
  }
  protected:
  explicit GetRawBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // bytes hash = 1;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 height = 2;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_hash_or_height();
  HashOrHeightCase hash_or_height_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetRawBlockRequest)
 private:
  class _Internal;
  void set_has_hash();
  void set_has_height();

  inline bool has_hash_or_height() const;
  inline void clear_has_hash_or_height();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union HashOrHeightUnion {
    HashOrHeightUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
  } hash_or_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRawBlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetRawBlockResponse) */ {
 public:
  inline GetRawBlockResponse() : GetRawBlockResponse(nullptr) {}
  virtual ~GetRawBlockResponse();

  GetRawBlockResponse(const GetRawBlockResponse& from);
  GetRawBlockResponse(GetRawBlockResponse&& from) noexcept
    : GetRawBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetRawBlockResponse& operator=(const GetRawBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawBlockResponse& operator=(GetRawBlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawBlockResponse*>(
               &_GetRawBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetRawBlockResponse& a, GetRawBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawBlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawBlockResponse* New() const final {
    return CreateMaybeMessage<GetRawBlockResponse>(nullptr);
  }

  GetRawBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawBlockResponse& from);
  void MergeFrom(const GetRawBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetRawBlockResponse";
  }
  protected:
  explicit GetRawBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // bytes block = 1;
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetRawBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockFilterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockFilterRequest) */ {
 public:
  inline GetBlockFilterRequest() : GetBlockFilterRequest(nullptr) {}
  virtual ~GetBlockFilterRequest();

  GetBlockFilterRequest(const GetBlockFilterRequest& from);
  GetBlockFilterRequest(GetBlockFilterRequest&& from) noexcept
    : GetBlockFilterRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockFilterRequest& operator=(const GetBlockFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockFilterRequest& operator=(GetBlockFilterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockFilterRequest& default_instance();

  enum HashOrHeightCase {
    kHash = 1,
    kHeight = 2,
    HASH_OR_HEIGHT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockFilterRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockFilterRequest*>(
               &_GetBlockFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetBlockFilterRequest& a, GetBlockFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockFilterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockFilterRequest* New() const final {
    return CreateMaybeMessage<GetBlockFilterRequest>(nullptr);
  }

  GetBlockFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockFilterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockFilterRequest& from);
  void MergeFrom(const GetBlockFilterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockFilterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockFilterRequest";
  }
  protected:
  explicit GetBlockFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // bytes hash = 1;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 height = 2;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_hash_or_height();
  HashOrHeightCase hash_or_height_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetBlockFilterRequest)
 private:
  class _Internal;
  void set_has_hash();
  void set_has_height();

  inline bool has_hash_or_height() const;
  inline void clear_has_hash_or_height();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union HashOrHeightUnion {
    HashOrHeightUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
  } hash_or_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockFilterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetBlockFilterResponse) */ {
 public:
  inline GetBlockFilterResponse() : GetBlockFilterResponse(nullptr) {}
  virtual ~GetBlockFilterResponse();

  GetBlockFilterResponse(const GetBlockFilterResponse& from);
  GetBlockFilterResponse(GetBlockFilterResponse&& from) noexcept
    : GetBlockFilterResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockFilterResponse& operator=(const GetBlockFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockFilterResponse& operator=(GetBlockFilterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockFilterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockFilterResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockFilterResponse*>(
               &_GetBlockFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetBlockFilterResponse& a, GetBlockFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockFilterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockFilterResponse* New() const final {
    return CreateMaybeMessage<GetBlockFilterResponse>(nullptr);
  }

  GetBlockFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockFilterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockFilterResponse& from);
  void MergeFrom(const GetBlockFilterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockFilterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetBlockFilterResponse";
  }
  protected:
  explicit GetBlockFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // bytes filter = 1;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const void* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetBlockFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetHeadersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetHeadersRequest) */ {
 public:
  inline GetHeadersRequest() : GetHeadersRequest(nullptr) {}
  virtual ~GetHeadersRequest();

  GetHeadersRequest(const GetHeadersRequest& from);
  GetHeadersRequest(GetHeadersRequest&& from) noexcept
    : GetHeadersRequest() {
    *this = ::std::move(from);
  }

  inline GetHeadersRequest& operator=(const GetHeadersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHeadersRequest& operator=(GetHeadersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHeadersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHeadersRequest* internal_default_instance() {
    return reinterpret_cast<const GetHeadersRequest*>(
               &_GetHeadersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetHeadersRequest& a, GetHeadersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHeadersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHeadersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHeadersRequest* New() const final {
    return CreateMaybeMessage<GetHeadersRequest>(nullptr);
  }

  GetHeadersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHeadersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHeadersRequest& from);
  void MergeFrom(const GetHeadersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHeadersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetHeadersRequest";
  }
  protected:
  explicit GetHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockLocatorHashesFieldNumber = 1,
    kStopHashFieldNumber = 2,
  };
  // repeated bytes block_locator_hashes = 1;
  int block_locator_hashes_size() const;
  private:
  int _internal_block_locator_hashes_size() const;
  public:
  void clear_block_locator_hashes();
  const std::string& block_locator_hashes(int index) const;
  std::string* mutable_block_locator_hashes(int index);
  void set_block_locator_hashes(int index, const std::string& value);
  void set_block_locator_hashes(int index, std::string&& value);
  void set_block_locator_hashes(int index, const char* value);
  void set_block_locator_hashes(int index, const void* value, size_t size);
  std::string* add_block_locator_hashes();
  void add_block_locator_hashes(const std::string& value);
  void add_block_locator_hashes(std::string&& value);
  void add_block_locator_hashes(const char* value);
  void add_block_locator_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_locator_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_locator_hashes();
  private:
  const std::string& _internal_block_locator_hashes(int index) const;
  std::string* _internal_add_block_locator_hashes();
  public:

  // bytes stop_hash = 2;
  void clear_stop_hash();
  const std::string& stop_hash() const;
  void set_stop_hash(const std::string& value);
  void set_stop_hash(std::string&& value);
  void set_stop_hash(const char* value);
  void set_stop_hash(const void* value, size_t size);
  std::string* mutable_stop_hash();
  std::string* release_stop_hash();
  void set_allocated_stop_hash(std::string* stop_hash);
  private:
  const std::string& _internal_stop_hash() const;
  void _internal_set_stop_hash(const std::string& value);
  std::string* _internal_mutable_stop_hash();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetHeadersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_locator_hashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetHeadersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetHeadersResponse) */ {
 public:
  inline GetHeadersResponse() : GetHeadersResponse(nullptr) {}
  virtual ~GetHeadersResponse();

  GetHeadersResponse(const GetHeadersResponse& from);
  GetHeadersResponse(GetHeadersResponse&& from) noexcept
    : GetHeadersResponse() {
    *this = ::std::move(from);
  }

  inline GetHeadersResponse& operator=(const GetHeadersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHeadersResponse& operator=(GetHeadersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHeadersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHeadersResponse* internal_default_instance() {
    return reinterpret_cast<const GetHeadersResponse*>(
               &_GetHeadersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetHeadersResponse& a, GetHeadersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHeadersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHeadersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHeadersResponse* New() const final {
    return CreateMaybeMessage<GetHeadersResponse>(nullptr);
  }

  GetHeadersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHeadersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHeadersResponse& from);
  void MergeFrom(const GetHeadersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHeadersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetHeadersResponse";
  }
  protected:
  explicit GetHeadersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
  };
  // repeated .pb.BlockInfo headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::pb::BlockInfo* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BlockInfo >*
      mutable_headers();
  private:
  const ::pb::BlockInfo& _internal_headers(int index) const;
  ::pb::BlockInfo* _internal_add_headers();
  public:
  const ::pb::BlockInfo& headers(int index) const;
  ::pb::BlockInfo* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BlockInfo >&
      headers() const;

  // @@protoc_insertion_point(class_scope:pb.GetHeadersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BlockInfo > headers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetTransactionRequest) */ {
 public:
  inline GetTransactionRequest() : GetTransactionRequest(nullptr) {}
  virtual ~GetTransactionRequest();

  GetTransactionRequest(const GetTransactionRequest& from);
  GetTransactionRequest(GetTransactionRequest&& from) noexcept
    : GetTransactionRequest() {
    *this = ::std::move(from);
  }

  inline GetTransactionRequest& operator=(const GetTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionRequest& operator=(GetTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransactionRequest*>(
               &_GetTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetTransactionRequest& a, GetTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionRequest* New() const final {
    return CreateMaybeMessage<GetTransactionRequest>(nullptr);
  }

  GetTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionRequest& from);
  void MergeFrom(const GetTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetTransactionRequest";
  }
  protected:
  explicit GetTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetTransactionResponse) */ {
 public:
  inline GetTransactionResponse() : GetTransactionResponse(nullptr) {}
  virtual ~GetTransactionResponse();

  GetTransactionResponse(const GetTransactionResponse& from);
  GetTransactionResponse(GetTransactionResponse&& from) noexcept
    : GetTransactionResponse() {
    *this = ::std::move(from);
  }

  inline GetTransactionResponse& operator=(const GetTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionResponse& operator=(GetTransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const GetTransactionResponse*>(
               &_GetTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetTransactionResponse& a, GetTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionResponse* New() const final {
    return CreateMaybeMessage<GetTransactionResponse>(nullptr);
  }

  GetTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionResponse& from);
  void MergeFrom(const GetTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetTransactionResponse";
  }
  protected:
  explicit GetTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .pb.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::pb::Transaction& transaction() const;
  ::pb::Transaction* release_transaction();
  ::pb::Transaction* mutable_transaction();
  void set_allocated_transaction(::pb::Transaction* transaction);
  private:
  const ::pb::Transaction& _internal_transaction() const;
  ::pb::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::pb::Transaction* transaction);
  ::pb::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:pb.GetTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::Transaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRawTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetRawTransactionRequest) */ {
 public:
  inline GetRawTransactionRequest() : GetRawTransactionRequest(nullptr) {}
  virtual ~GetRawTransactionRequest();

  GetRawTransactionRequest(const GetRawTransactionRequest& from);
  GetRawTransactionRequest(GetRawTransactionRequest&& from) noexcept
    : GetRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline GetRawTransactionRequest& operator=(const GetRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawTransactionRequest& operator=(GetRawTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawTransactionRequest*>(
               &_GetRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetRawTransactionRequest& a, GetRawTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawTransactionRequest* New() const final {
    return CreateMaybeMessage<GetRawTransactionRequest>(nullptr);
  }

  GetRawTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawTransactionRequest& from);
  void MergeFrom(const GetRawTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetRawTransactionRequest";
  }
  protected:
  explicit GetRawTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetRawTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRawTransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetRawTransactionResponse) */ {
 public:
  inline GetRawTransactionResponse() : GetRawTransactionResponse(nullptr) {}
  virtual ~GetRawTransactionResponse();

  GetRawTransactionResponse(const GetRawTransactionResponse& from);
  GetRawTransactionResponse(GetRawTransactionResponse&& from) noexcept
    : GetRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline GetRawTransactionResponse& operator=(const GetRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawTransactionResponse& operator=(GetRawTransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawTransactionResponse*>(
               &_GetRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetRawTransactionResponse& a, GetRawTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawTransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawTransactionResponse* New() const final {
    return CreateMaybeMessage<GetRawTransactionResponse>(nullptr);
  }

  GetRawTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawTransactionResponse& from);
  void MergeFrom(const GetRawTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetRawTransactionResponse";
  }
  protected:
  explicit GetRawTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // bytes transaction = 1;
  void clear_transaction();
  const std::string& transaction() const;
  void set_transaction(const std::string& value);
  void set_transaction(std::string&& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  std::string* mutable_transaction();
  std::string* release_transaction();
  void set_allocated_transaction(std::string* transaction);
  private:
  const std::string& _internal_transaction() const;
  void _internal_set_transaction(const std::string& value);
  std::string* _internal_mutable_transaction();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetRawTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddressTransactionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetAddressTransactionsRequest) */ {
 public:
  inline GetAddressTransactionsRequest() : GetAddressTransactionsRequest(nullptr) {}
  virtual ~GetAddressTransactionsRequest();

  GetAddressTransactionsRequest(const GetAddressTransactionsRequest& from);
  GetAddressTransactionsRequest(GetAddressTransactionsRequest&& from) noexcept
    : GetAddressTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressTransactionsRequest& operator=(const GetAddressTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressTransactionsRequest& operator=(GetAddressTransactionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressTransactionsRequest& default_instance();

  enum StartBlockCase {
    kHash = 4,
    kHeight = 5,
    START_BLOCK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressTransactionsRequest*>(
               &_GetAddressTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAddressTransactionsRequest& a, GetAddressTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressTransactionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressTransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressTransactionsRequest* New() const final {
    return CreateMaybeMessage<GetAddressTransactionsRequest>(nullptr);
  }

  GetAddressTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressTransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressTransactionsRequest& from);
  void MergeFrom(const GetAddressTransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressTransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetAddressTransactionsRequest";
  }
  protected:
  explicit GetAddressTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kNbSkipFieldNumber = 2,
    kNbFetchFieldNumber = 3,
    kHashFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 nb_skip = 2;
  void clear_nb_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_skip() const;
  void set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nb_skip() const;
  void _internal_set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nb_fetch = 3;
  void clear_nb_fetch();
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_fetch() const;
  void set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nb_fetch() const;
  void _internal_set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes hash = 4;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 height = 5;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_start_block();
  StartBlockCase start_block_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetAddressTransactionsRequest)
 private:
  class _Internal;
  void set_has_hash();
  void set_has_height();

  inline bool has_start_block() const;
  inline void clear_has_start_block();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_skip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_fetch_;
  union StartBlockUnion {
    StartBlockUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
  } start_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddressTransactionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetAddressTransactionsResponse) */ {
 public:
  inline GetAddressTransactionsResponse() : GetAddressTransactionsResponse(nullptr) {}
  virtual ~GetAddressTransactionsResponse();

  GetAddressTransactionsResponse(const GetAddressTransactionsResponse& from);
  GetAddressTransactionsResponse(GetAddressTransactionsResponse&& from) noexcept
    : GetAddressTransactionsResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressTransactionsResponse& operator=(const GetAddressTransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressTransactionsResponse& operator=(GetAddressTransactionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressTransactionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressTransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressTransactionsResponse*>(
               &_GetAddressTransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetAddressTransactionsResponse& a, GetAddressTransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressTransactionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressTransactionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressTransactionsResponse* New() const final {
    return CreateMaybeMessage<GetAddressTransactionsResponse>(nullptr);
  }

  GetAddressTransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressTransactionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressTransactionsResponse& from);
  void MergeFrom(const GetAddressTransactionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressTransactionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetAddressTransactionsResponse";
  }
  protected:
  explicit GetAddressTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmedTransactionsFieldNumber = 1,
    kUnconfirmedTransactionsFieldNumber = 2,
  };
  // repeated .pb.Transaction confirmed_transactions = 1;
  int confirmed_transactions_size() const;
  private:
  int _internal_confirmed_transactions_size() const;
  public:
  void clear_confirmed_transactions();
  ::pb::Transaction* mutable_confirmed_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >*
      mutable_confirmed_transactions();
  private:
  const ::pb::Transaction& _internal_confirmed_transactions(int index) const;
  ::pb::Transaction* _internal_add_confirmed_transactions();
  public:
  const ::pb::Transaction& confirmed_transactions(int index) const;
  ::pb::Transaction* add_confirmed_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >&
      confirmed_transactions() const;

  // repeated .pb.MempoolTransaction unconfirmed_transactions = 2;
  int unconfirmed_transactions_size() const;
  private:
  int _internal_unconfirmed_transactions_size() const;
  public:
  void clear_unconfirmed_transactions();
  ::pb::MempoolTransaction* mutable_unconfirmed_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MempoolTransaction >*
      mutable_unconfirmed_transactions();
  private:
  const ::pb::MempoolTransaction& _internal_unconfirmed_transactions(int index) const;
  ::pb::MempoolTransaction* _internal_add_unconfirmed_transactions();
  public:
  const ::pb::MempoolTransaction& unconfirmed_transactions(int index) const;
  ::pb::MempoolTransaction* add_unconfirmed_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MempoolTransaction >&
      unconfirmed_transactions() const;

  // @@protoc_insertion_point(class_scope:pb.GetAddressTransactionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction > confirmed_transactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MempoolTransaction > unconfirmed_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRawAddressTransactionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetRawAddressTransactionsRequest) */ {
 public:
  inline GetRawAddressTransactionsRequest() : GetRawAddressTransactionsRequest(nullptr) {}
  virtual ~GetRawAddressTransactionsRequest();

  GetRawAddressTransactionsRequest(const GetRawAddressTransactionsRequest& from);
  GetRawAddressTransactionsRequest(GetRawAddressTransactionsRequest&& from) noexcept
    : GetRawAddressTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline GetRawAddressTransactionsRequest& operator=(const GetRawAddressTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawAddressTransactionsRequest& operator=(GetRawAddressTransactionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawAddressTransactionsRequest& default_instance();

  enum StartBlockCase {
    kHash = 4,
    kHeight = 5,
    START_BLOCK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawAddressTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawAddressTransactionsRequest*>(
               &_GetRawAddressTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetRawAddressTransactionsRequest& a, GetRawAddressTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawAddressTransactionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawAddressTransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawAddressTransactionsRequest* New() const final {
    return CreateMaybeMessage<GetRawAddressTransactionsRequest>(nullptr);
  }

  GetRawAddressTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawAddressTransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawAddressTransactionsRequest& from);
  void MergeFrom(const GetRawAddressTransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawAddressTransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetRawAddressTransactionsRequest";
  }
  protected:
  explicit GetRawAddressTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kNbSkipFieldNumber = 2,
    kNbFetchFieldNumber = 3,
    kHashFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 nb_skip = 2;
  void clear_nb_skip();
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_skip() const;
  void set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nb_skip() const;
  void _internal_set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nb_fetch = 3;
  void clear_nb_fetch();
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_fetch() const;
  void set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nb_fetch() const;
  void _internal_set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes hash = 4;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 height = 5;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_start_block();
  StartBlockCase start_block_case() const;
  // @@protoc_insertion_point(class_scope:pb.GetRawAddressTransactionsRequest)
 private:
  class _Internal;
  void set_has_hash();
  void set_has_height();

  inline bool has_start_block() const;
  inline void clear_has_start_block();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_skip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_fetch_;
  union StartBlockUnion {
    StartBlockUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
  } start_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRawAddressTransactionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetRawAddressTransactionsResponse) */ {
 public:
  inline GetRawAddressTransactionsResponse() : GetRawAddressTransactionsResponse(nullptr) {}
  virtual ~GetRawAddressTransactionsResponse();

  GetRawAddressTransactionsResponse(const GetRawAddressTransactionsResponse& from);
  GetRawAddressTransactionsResponse(GetRawAddressTransactionsResponse&& from) noexcept
    : GetRawAddressTransactionsResponse() {
    *this = ::std::move(from);
  }

  inline GetRawAddressTransactionsResponse& operator=(const GetRawAddressTransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawAddressTransactionsResponse& operator=(GetRawAddressTransactionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawAddressTransactionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawAddressTransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawAddressTransactionsResponse*>(
               &_GetRawAddressTransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetRawAddressTransactionsResponse& a, GetRawAddressTransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawAddressTransactionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawAddressTransactionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawAddressTransactionsResponse* New() const final {
    return CreateMaybeMessage<GetRawAddressTransactionsResponse>(nullptr);
  }

  GetRawAddressTransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawAddressTransactionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawAddressTransactionsResponse& from);
  void MergeFrom(const GetRawAddressTransactionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawAddressTransactionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetRawAddressTransactionsResponse";
  }
  protected:
  explicit GetRawAddressTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmedTransactionsFieldNumber = 1,
    kUnconfirmedTransactionsFieldNumber = 2,
  };
  // repeated bytes confirmed_transactions = 1;
  int confirmed_transactions_size() const;
  private:
  int _internal_confirmed_transactions_size() const;
  public:
  void clear_confirmed_transactions();
  const std::string& confirmed_transactions(int index) const;
  std::string* mutable_confirmed_transactions(int index);
  void set_confirmed_transactions(int index, const std::string& value);
  void set_confirmed_transactions(int index, std::string&& value);
  void set_confirmed_transactions(int index, const char* value);
  void set_confirmed_transactions(int index, const void* value, size_t size);
  std::string* add_confirmed_transactions();
  void add_confirmed_transactions(const std::string& value);
  void add_confirmed_transactions(std::string&& value);
  void add_confirmed_transactions(const char* value);
  void add_confirmed_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& confirmed_transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_confirmed_transactions();
  private:
  const std::string& _internal_confirmed_transactions(int index) const;
  std::string* _internal_add_confirmed_transactions();
  public:

  // repeated bytes unconfirmed_transactions = 2;
  int unconfirmed_transactions_size() const;
  private:
  int _internal_unconfirmed_transactions_size() const;
  public:
  void clear_unconfirmed_transactions();
  const std::string& unconfirmed_transactions(int index) const;
  std::string* mutable_unconfirmed_transactions(int index);
  void set_unconfirmed_transactions(int index, const std::string& value);
  void set_unconfirmed_transactions(int index, std::string&& value);
  void set_unconfirmed_transactions(int index, const char* value);
  void set_unconfirmed_transactions(int index, const void* value, size_t size);
  std::string* add_unconfirmed_transactions();
  void add_unconfirmed_transactions(const std::string& value);
  void add_unconfirmed_transactions(std::string&& value);
  void add_unconfirmed_transactions(const char* value);
  void add_unconfirmed_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unconfirmed_transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unconfirmed_transactions();
  private:
  const std::string& _internal_unconfirmed_transactions(int index) const;
  std::string* _internal_add_unconfirmed_transactions();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetRawAddressTransactionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> confirmed_transactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unconfirmed_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddressUnspentOutputsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetAddressUnspentOutputsRequest) */ {
 public:
  inline GetAddressUnspentOutputsRequest() : GetAddressUnspentOutputsRequest(nullptr) {}
  virtual ~GetAddressUnspentOutputsRequest();

  GetAddressUnspentOutputsRequest(const GetAddressUnspentOutputsRequest& from);
  GetAddressUnspentOutputsRequest(GetAddressUnspentOutputsRequest&& from) noexcept
    : GetAddressUnspentOutputsRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressUnspentOutputsRequest& operator=(const GetAddressUnspentOutputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressUnspentOutputsRequest& operator=(GetAddressUnspentOutputsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressUnspentOutputsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressUnspentOutputsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressUnspentOutputsRequest*>(
               &_GetAddressUnspentOutputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetAddressUnspentOutputsRequest& a, GetAddressUnspentOutputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressUnspentOutputsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressUnspentOutputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressUnspentOutputsRequest* New() const final {
    return CreateMaybeMessage<GetAddressUnspentOutputsRequest>(nullptr);
  }

  GetAddressUnspentOutputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressUnspentOutputsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressUnspentOutputsRequest& from);
  void MergeFrom(const GetAddressUnspentOutputsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressUnspentOutputsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetAddressUnspentOutputsRequest";
  }
  protected:
  explicit GetAddressUnspentOutputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kIncludeMempoolFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool include_mempool = 2;
  void clear_include_mempool();
  bool include_mempool() const;
  void set_include_mempool(bool value);
  private:
  bool _internal_include_mempool() const;
  void _internal_set_include_mempool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetAddressUnspentOutputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool include_mempool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddressUnspentOutputsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetAddressUnspentOutputsResponse) */ {
 public:
  inline GetAddressUnspentOutputsResponse() : GetAddressUnspentOutputsResponse(nullptr) {}
  virtual ~GetAddressUnspentOutputsResponse();

  GetAddressUnspentOutputsResponse(const GetAddressUnspentOutputsResponse& from);
  GetAddressUnspentOutputsResponse(GetAddressUnspentOutputsResponse&& from) noexcept
    : GetAddressUnspentOutputsResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressUnspentOutputsResponse& operator=(const GetAddressUnspentOutputsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressUnspentOutputsResponse& operator=(GetAddressUnspentOutputsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressUnspentOutputsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressUnspentOutputsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressUnspentOutputsResponse*>(
               &_GetAddressUnspentOutputsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetAddressUnspentOutputsResponse& a, GetAddressUnspentOutputsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressUnspentOutputsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAddressUnspentOutputsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressUnspentOutputsResponse* New() const final {
    return CreateMaybeMessage<GetAddressUnspentOutputsResponse>(nullptr);
  }

  GetAddressUnspentOutputsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressUnspentOutputsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressUnspentOutputsResponse& from);
  void MergeFrom(const GetAddressUnspentOutputsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressUnspentOutputsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetAddressUnspentOutputsResponse";
  }
  protected:
  explicit GetAddressUnspentOutputsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
  };
  // repeated .pb.UnspentOutput outputs = 1;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::pb::UnspentOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::UnspentOutput >*
      mutable_outputs();
  private:
  const ::pb::UnspentOutput& _internal_outputs(int index) const;
  ::pb::UnspentOutput* _internal_add_outputs();
  public:
  const ::pb::UnspentOutput& outputs(int index) const;
  ::pb::UnspentOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::UnspentOutput >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:pb.GetAddressUnspentOutputsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::UnspentOutput > outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetUnspentOutputRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetUnspentOutputRequest) */ {
 public:
  inline GetUnspentOutputRequest() : GetUnspentOutputRequest(nullptr) {}
  virtual ~GetUnspentOutputRequest();

  GetUnspentOutputRequest(const GetUnspentOutputRequest& from);
  GetUnspentOutputRequest(GetUnspentOutputRequest&& from) noexcept
    : GetUnspentOutputRequest() {
    *this = ::std::move(from);
  }

  inline GetUnspentOutputRequest& operator=(const GetUnspentOutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnspentOutputRequest& operator=(GetUnspentOutputRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUnspentOutputRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUnspentOutputRequest* internal_default_instance() {
    return reinterpret_cast<const GetUnspentOutputRequest*>(
               &_GetUnspentOutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetUnspentOutputRequest& a, GetUnspentOutputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnspentOutputRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnspentOutputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUnspentOutputRequest* New() const final {
    return CreateMaybeMessage<GetUnspentOutputRequest>(nullptr);
  }

  GetUnspentOutputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUnspentOutputRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUnspentOutputRequest& from);
  void MergeFrom(const GetUnspentOutputRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnspentOutputRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetUnspentOutputRequest";
  }
  protected:
  explicit GetUnspentOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIndexFieldNumber = 2,
    kIncludeMempoolFieldNumber = 3,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool include_mempool = 3;
  void clear_include_mempool();
  bool include_mempool() const;
  void set_include_mempool(bool value);
  private:
  bool _internal_include_mempool() const;
  void _internal_set_include_mempool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetUnspentOutputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  bool include_mempool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetUnspentOutputResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetUnspentOutputResponse) */ {
 public:
  inline GetUnspentOutputResponse() : GetUnspentOutputResponse(nullptr) {}
  virtual ~GetUnspentOutputResponse();

  GetUnspentOutputResponse(const GetUnspentOutputResponse& from);
  GetUnspentOutputResponse(GetUnspentOutputResponse&& from) noexcept
    : GetUnspentOutputResponse() {
    *this = ::std::move(from);
  }

  inline GetUnspentOutputResponse& operator=(const GetUnspentOutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnspentOutputResponse& operator=(GetUnspentOutputResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUnspentOutputResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUnspentOutputResponse* internal_default_instance() {
    return reinterpret_cast<const GetUnspentOutputResponse*>(
               &_GetUnspentOutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetUnspentOutputResponse& a, GetUnspentOutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnspentOutputResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnspentOutputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUnspentOutputResponse* New() const final {
    return CreateMaybeMessage<GetUnspentOutputResponse>(nullptr);
  }

  GetUnspentOutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUnspentOutputResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUnspentOutputResponse& from);
  void MergeFrom(const GetUnspentOutputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnspentOutputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetUnspentOutputResponse";
  }
  protected:
  explicit GetUnspentOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyScriptFieldNumber = 2,
    kOutpointFieldNumber = 1,
    kValueFieldNumber = 3,
    kIsCoinbaseFieldNumber = 4,
    kBlockHeightFieldNumber = 5,
  };
  // bytes pubkey_script = 2;
  void clear_pubkey_script();
  const std::string& pubkey_script() const;
  void set_pubkey_script(const std::string& value);
  void set_pubkey_script(std::string&& value);
  void set_pubkey_script(const char* value);
  void set_pubkey_script(const void* value, size_t size);
  std::string* mutable_pubkey_script();
  std::string* release_pubkey_script();
  void set_allocated_pubkey_script(std::string* pubkey_script);
  private:
  const std::string& _internal_pubkey_script() const;
  void _internal_set_pubkey_script(const std::string& value);
  std::string* _internal_mutable_pubkey_script();
  public:

  // .pb.Transaction.Input.Outpoint outpoint = 1;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::pb::Transaction_Input_Outpoint& outpoint() const;
  ::pb::Transaction_Input_Outpoint* release_outpoint();
  ::pb::Transaction_Input_Outpoint* mutable_outpoint();
  void set_allocated_outpoint(::pb::Transaction_Input_Outpoint* outpoint);
  private:
  const ::pb::Transaction_Input_Outpoint& _internal_outpoint() const;
  ::pb::Transaction_Input_Outpoint* _internal_mutable_outpoint();
  public:
  void unsafe_arena_set_allocated_outpoint(
      ::pb::Transaction_Input_Outpoint* outpoint);
  ::pb::Transaction_Input_Outpoint* unsafe_arena_release_outpoint();

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_coinbase = 4;
  void clear_is_coinbase();
  bool is_coinbase() const;
  void set_is_coinbase(bool value);
  private:
  bool _internal_is_coinbase() const;
  void _internal_set_is_coinbase(bool value);
  public:

  // int32 block_height = 5;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetUnspentOutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_script_;
  ::pb::Transaction_Input_Outpoint* outpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  bool is_coinbase_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMerkleProofRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMerkleProofRequest) */ {
 public:
  inline GetMerkleProofRequest() : GetMerkleProofRequest(nullptr) {}
  virtual ~GetMerkleProofRequest();

  GetMerkleProofRequest(const GetMerkleProofRequest& from);
  GetMerkleProofRequest(GetMerkleProofRequest&& from) noexcept
    : GetMerkleProofRequest() {
    *this = ::std::move(from);
  }

  inline GetMerkleProofRequest& operator=(const GetMerkleProofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMerkleProofRequest& operator=(GetMerkleProofRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMerkleProofRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMerkleProofRequest* internal_default_instance() {
    return reinterpret_cast<const GetMerkleProofRequest*>(
               &_GetMerkleProofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetMerkleProofRequest& a, GetMerkleProofRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMerkleProofRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMerkleProofRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMerkleProofRequest* New() const final {
    return CreateMaybeMessage<GetMerkleProofRequest>(nullptr);
  }

  GetMerkleProofRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMerkleProofRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMerkleProofRequest& from);
  void MergeFrom(const GetMerkleProofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMerkleProofRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMerkleProofRequest";
  }
  protected:
  explicit GetMerkleProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHashFieldNumber = 1,
  };
  // bytes transaction_hash = 1;
  void clear_transaction_hash();
  const std::string& transaction_hash() const;
  void set_transaction_hash(const std::string& value);
  void set_transaction_hash(std::string&& value);
  void set_transaction_hash(const char* value);
  void set_transaction_hash(const void* value, size_t size);
  std::string* mutable_transaction_hash();
  std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* transaction_hash);
  private:
  const std::string& _internal_transaction_hash() const;
  void _internal_set_transaction_hash(const std::string& value);
  std::string* _internal_mutable_transaction_hash();
  public:

  // @@protoc_insertion_point(class_scope:pb.GetMerkleProofRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMerkleProofResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetMerkleProofResponse) */ {
 public:
  inline GetMerkleProofResponse() : GetMerkleProofResponse(nullptr) {}
  virtual ~GetMerkleProofResponse();

  GetMerkleProofResponse(const GetMerkleProofResponse& from);
  GetMerkleProofResponse(GetMerkleProofResponse&& from) noexcept
    : GetMerkleProofResponse() {
    *this = ::std::move(from);
  }

  inline GetMerkleProofResponse& operator=(const GetMerkleProofResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMerkleProofResponse& operator=(GetMerkleProofResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMerkleProofResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMerkleProofResponse* internal_default_instance() {
    return reinterpret_cast<const GetMerkleProofResponse*>(
               &_GetMerkleProofResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetMerkleProofResponse& a, GetMerkleProofResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMerkleProofResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMerkleProofResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMerkleProofResponse* New() const final {
    return CreateMaybeMessage<GetMerkleProofResponse>(nullptr);
  }

  GetMerkleProofResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMerkleProofResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMerkleProofResponse& from);
  void MergeFrom(const GetMerkleProofResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMerkleProofResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetMerkleProofResponse";
  }
  protected:
  explicit GetMerkleProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kBlockFieldNumber = 1,
  };
  // repeated bytes hashes = 2;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();
  private:
  const std::string& _internal_hashes(int index) const;
  std::string* _internal_add_hashes();
  public:

  // bytes flags = 3;
  void clear_flags();
  const std::string& flags() const;
  void set_flags(const std::string& value);
  void set_flags(std::string&& value);
  void set_flags(const char* value);
  void set_flags(const void* value, size_t size);
  std::string* mutable_flags();
  std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // .pb.BlockInfo block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::pb::BlockInfo& block() const;
  ::pb::BlockInfo* release_block();
  ::pb::BlockInfo* mutable_block();
  void set_allocated_block(::pb::BlockInfo* block);
  private:
  const ::pb::BlockInfo& _internal_block() const;
  ::pb::BlockInfo* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::pb::BlockInfo* block);
  ::pb::BlockInfo* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:pb.GetMerkleProofResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::pb::BlockInfo* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubmitTransactionRequest) */ {
 public:
  inline SubmitTransactionRequest() : SubmitTransactionRequest(nullptr) {}
  virtual ~SubmitTransactionRequest();

  SubmitTransactionRequest(const SubmitTransactionRequest& from);
  SubmitTransactionRequest(SubmitTransactionRequest&& from) noexcept
    : SubmitTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionRequest& operator=(const SubmitTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionRequest& operator=(SubmitTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionRequest*>(
               &_SubmitTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SubmitTransactionRequest& a, SubmitTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionRequest* New() const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(nullptr);
  }

  SubmitTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionRequest& from);
  void MergeFrom(const SubmitTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubmitTransactionRequest";
  }
  protected:
  explicit SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // bytes transaction = 1;
  void clear_transaction();
  const std::string& transaction() const;
  void set_transaction(const std::string& value);
  void set_transaction(std::string&& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  std::string* mutable_transaction();
  std::string* release_transaction();
  void set_allocated_transaction(std::string* transaction);
  private:
  const std::string& _internal_transaction() const;
  void _internal_set_transaction(const std::string& value);
  std::string* _internal_mutable_transaction();
  public:

  // @@protoc_insertion_point(class_scope:pb.SubmitTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubmitTransactionResponse) */ {
 public:
  inline SubmitTransactionResponse() : SubmitTransactionResponse(nullptr) {}
  virtual ~SubmitTransactionResponse();

  SubmitTransactionResponse(const SubmitTransactionResponse& from);
  SubmitTransactionResponse(SubmitTransactionResponse&& from) noexcept
    : SubmitTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionResponse& operator=(const SubmitTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionResponse& operator=(SubmitTransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionResponse*>(
               &_SubmitTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubmitTransactionResponse& a, SubmitTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionResponse* New() const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(nullptr);
  }

  SubmitTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionResponse& from);
  void MergeFrom(const SubmitTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubmitTransactionResponse";
  }
  protected:
  explicit SubmitTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:pb.SubmitTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTransactionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubscribeTransactionsRequest) */ {
 public:
  inline SubscribeTransactionsRequest() : SubscribeTransactionsRequest(nullptr) {}
  virtual ~SubscribeTransactionsRequest();

  SubscribeTransactionsRequest(const SubscribeTransactionsRequest& from);
  SubscribeTransactionsRequest(SubscribeTransactionsRequest&& from) noexcept
    : SubscribeTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTransactionsRequest& operator=(const SubscribeTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTransactionsRequest& operator=(SubscribeTransactionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTransactionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTransactionsRequest*>(
               &_SubscribeTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SubscribeTransactionsRequest& a, SubscribeTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTransactionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTransactionsRequest* New() const final {
    return CreateMaybeMessage<SubscribeTransactionsRequest>(nullptr);
  }

  SubscribeTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTransactionsRequest& from);
  void MergeFrom(const SubscribeTransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubscribeTransactionsRequest";
  }
  protected:
  explicit SubscribeTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeFieldNumber = 1,
    kUnsubscribeFieldNumber = 2,
    kIncludeMempoolFieldNumber = 3,
    kIncludeInBlockFieldNumber = 4,
    kSerializeTxFieldNumber = 5,
  };
  // .pb.TransactionFilter subscribe = 1;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::pb::TransactionFilter& subscribe() const;
  ::pb::TransactionFilter* release_subscribe();
  ::pb::TransactionFilter* mutable_subscribe();
  void set_allocated_subscribe(::pb::TransactionFilter* subscribe);
  private:
  const ::pb::TransactionFilter& _internal_subscribe() const;
  ::pb::TransactionFilter* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::pb::TransactionFilter* subscribe);
  ::pb::TransactionFilter* unsafe_arena_release_subscribe();

  // .pb.TransactionFilter unsubscribe = 2;
  bool has_unsubscribe() const;
  private:
  bool _internal_has_unsubscribe() const;
  public:
  void clear_unsubscribe();
  const ::pb::TransactionFilter& unsubscribe() const;
  ::pb::TransactionFilter* release_unsubscribe();
  ::pb::TransactionFilter* mutable_unsubscribe();
  void set_allocated_unsubscribe(::pb::TransactionFilter* unsubscribe);
  private:
  const ::pb::TransactionFilter& _internal_unsubscribe() const;
  ::pb::TransactionFilter* _internal_mutable_unsubscribe();
  public:
  void unsafe_arena_set_allocated_unsubscribe(
      ::pb::TransactionFilter* unsubscribe);
  ::pb::TransactionFilter* unsafe_arena_release_unsubscribe();

  // bool include_mempool = 3;
  void clear_include_mempool();
  bool include_mempool() const;
  void set_include_mempool(bool value);
  private:
  bool _internal_include_mempool() const;
  void _internal_set_include_mempool(bool value);
  public:

  // bool include_in_block = 4;
  void clear_include_in_block();
  bool include_in_block() const;
  void set_include_in_block(bool value);
  private:
  bool _internal_include_in_block() const;
  void _internal_set_include_in_block(bool value);
  public:

  // bool serialize_tx = 5;
  void clear_serialize_tx();
  bool serialize_tx() const;
  void set_serialize_tx(bool value);
  private:
  bool _internal_serialize_tx() const;
  void _internal_set_serialize_tx(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubscribeTransactionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::TransactionFilter* subscribe_;
  ::pb::TransactionFilter* unsubscribe_;
  bool include_mempool_;
  bool include_in_block_;
  bool serialize_tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SubscribeBlocksRequest) */ {
 public:
  inline SubscribeBlocksRequest() : SubscribeBlocksRequest(nullptr) {}
  virtual ~SubscribeBlocksRequest();

  SubscribeBlocksRequest(const SubscribeBlocksRequest& from);
  SubscribeBlocksRequest(SubscribeBlocksRequest&& from) noexcept
    : SubscribeBlocksRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeBlocksRequest& operator=(const SubscribeBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBlocksRequest& operator=(SubscribeBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeBlocksRequest*>(
               &_SubscribeBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SubscribeBlocksRequest& a, SubscribeBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeBlocksRequest* New() const final {
    return CreateMaybeMessage<SubscribeBlocksRequest>(nullptr);
  }

  SubscribeBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeBlocksRequest& from);
  void MergeFrom(const SubscribeBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SubscribeBlocksRequest";
  }
  protected:
  explicit SubscribeBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullBlockFieldNumber = 1,
    kFullTransactionsFieldNumber = 2,
    kSerializeBlockFieldNumber = 3,
  };
  // bool full_block = 1;
  void clear_full_block();
  bool full_block() const;
  void set_full_block(bool value);
  private:
  bool _internal_full_block() const;
  void _internal_set_full_block(bool value);
  public:

  // bool full_transactions = 2;
  void clear_full_transactions();
  bool full_transactions() const;
  void set_full_transactions(bool value);
  private:
  bool _internal_full_transactions() const;
  void _internal_set_full_transactions(bool value);
  public:

  // bool serialize_block = 3;
  void clear_serialize_block();
  bool serialize_block() const;
  void set_serialize_block(bool value);
  private:
  bool _internal_serialize_block() const;
  void _internal_set_serialize_block(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SubscribeBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool full_block_;
  bool full_transactions_;
  bool serialize_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BlockNotification) */ {
 public:
  inline BlockNotification() : BlockNotification(nullptr) {}
  virtual ~BlockNotification();

  BlockNotification(const BlockNotification& from);
  BlockNotification(BlockNotification&& from) noexcept
    : BlockNotification() {
    *this = ::std::move(from);
  }

  inline BlockNotification& operator=(const BlockNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockNotification& operator=(BlockNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockNotification& default_instance();

  enum BlockCase {
    kBlockInfo = 2,
    kMarshaledBlock = 3,
    kSerializedBlock = 4,
    BLOCK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockNotification* internal_default_instance() {
    return reinterpret_cast<const BlockNotification*>(
               &_BlockNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(BlockNotification& a, BlockNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockNotification* New() const final {
    return CreateMaybeMessage<BlockNotification>(nullptr);
  }

  BlockNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockNotification& from);
  void MergeFrom(const BlockNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BlockNotification";
  }
  protected:
  explicit BlockNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BlockNotification_Type Type;
  static constexpr Type CONNECTED =
    BlockNotification_Type_CONNECTED;
  static constexpr Type DISCONNECTED =
    BlockNotification_Type_DISCONNECTED;
  static inline bool Type_IsValid(int value) {
    return BlockNotification_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BlockNotification_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BlockNotification_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BlockNotification_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return BlockNotification_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BlockNotification_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return BlockNotification_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kBlockInfoFieldNumber = 2,
    kMarshaledBlockFieldNumber = 3,
    kSerializedBlockFieldNumber = 4,
  };
  // .pb.BlockNotification.Type type = 1;
  void clear_type();
  ::pb::BlockNotification_Type type() const;
  void set_type(::pb::BlockNotification_Type value);
  private:
  ::pb::BlockNotification_Type _internal_type() const;
  void _internal_set_type(::pb::BlockNotification_Type value);
  public:

  // .pb.BlockInfo block_info = 2;
  bool has_block_info() const;
  private:
  bool _internal_has_block_info() const;
  public:
  void clear_block_info();
  const ::pb::BlockInfo& block_info() const;
  ::pb::BlockInfo* release_block_info();
  ::pb::BlockInfo* mutable_block_info();
  void set_allocated_block_info(::pb::BlockInfo* block_info);
  private:
  const ::pb::BlockInfo& _internal_block_info() const;
  ::pb::BlockInfo* _internal_mutable_block_info();
  public:
  void unsafe_arena_set_allocated_block_info(
      ::pb::BlockInfo* block_info);
  ::pb::BlockInfo* unsafe_arena_release_block_info();

  // .pb.Block marshaled_block = 3;
  bool has_marshaled_block() const;
  private:
  bool _internal_has_marshaled_block() const;
  public:
  void clear_marshaled_block();
  const ::pb::Block& marshaled_block() const;
  ::pb::Block* release_marshaled_block();
  ::pb::Block* mutable_marshaled_block();
  void set_allocated_marshaled_block(::pb::Block* marshaled_block);
  private:
  const ::pb::Block& _internal_marshaled_block() const;
  ::pb::Block* _internal_mutable_marshaled_block();
  public:
  void unsafe_arena_set_allocated_marshaled_block(
      ::pb::Block* marshaled_block);
  ::pb::Block* unsafe_arena_release_marshaled_block();

  // bytes serialized_block = 4;
  private:
  bool _internal_has_serialized_block() const;
  public:
  void clear_serialized_block();
  const std::string& serialized_block() const;
  void set_serialized_block(const std::string& value);
  void set_serialized_block(std::string&& value);
  void set_serialized_block(const char* value);
  void set_serialized_block(const void* value, size_t size);
  std::string* mutable_serialized_block();
  std::string* release_serialized_block();
  void set_allocated_serialized_block(std::string* serialized_block);
  private:
  const std::string& _internal_serialized_block() const;
  void _internal_set_serialized_block(const std::string& value);
  std::string* _internal_mutable_serialized_block();
  public:

  void clear_block();
  BlockCase block_case() const;
  // @@protoc_insertion_point(class_scope:pb.BlockNotification)
 private:
  class _Internal;
  void set_has_block_info();
  void set_has_marshaled_block();
  void set_has_serialized_block();

  inline bool has_block() const;
  inline void clear_has_block();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union BlockUnion {
    BlockUnion() {}
    ::pb::BlockInfo* block_info_;
    ::pb::Block* marshaled_block_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_block_;
  } block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class TransactionNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TransactionNotification) */ {
 public:
  inline TransactionNotification() : TransactionNotification(nullptr) {}
  virtual ~TransactionNotification();

  TransactionNotification(const TransactionNotification& from);
  TransactionNotification(TransactionNotification&& from) noexcept
    : TransactionNotification() {
    *this = ::std::move(from);
  }

  inline TransactionNotification& operator=(const TransactionNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionNotification& operator=(TransactionNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionNotification& default_instance();

  enum TransactionCase {
    kConfirmedTransaction = 2,
    kUnconfirmedTransaction = 3,
    kSerializedTransaction = 4,
    TRANSACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionNotification* internal_default_instance() {
    return reinterpret_cast<const TransactionNotification*>(
               &_TransactionNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TransactionNotification& a, TransactionNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionNotification* New() const final {
    return CreateMaybeMessage<TransactionNotification>(nullptr);
  }

  TransactionNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionNotification& from);
  void MergeFrom(const TransactionNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TransactionNotification";
  }
  protected:
  explicit TransactionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransactionNotification_Type Type;
  static constexpr Type UNCONFIRMED =
    TransactionNotification_Type_UNCONFIRMED;
  static constexpr Type CONFIRMED =
    TransactionNotification_Type_CONFIRMED;
  static inline bool Type_IsValid(int value) {
    return TransactionNotification_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TransactionNotification_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TransactionNotification_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TransactionNotification_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TransactionNotification_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TransactionNotification_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TransactionNotification_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kConfirmedTransactionFieldNumber = 2,
    kUnconfirmedTransactionFieldNumber = 3,
    kSerializedTransactionFieldNumber = 4,
  };
  // .pb.TransactionNotification.Type type = 1;
  void clear_type();
  ::pb::TransactionNotification_Type type() const;
  void set_type(::pb::TransactionNotification_Type value);
  private:
  ::pb::TransactionNotification_Type _internal_type() const;
  void _internal_set_type(::pb::TransactionNotification_Type value);
  public:

  // .pb.Transaction confirmed_transaction = 2;
  bool has_confirmed_transaction() const;
  private:
  bool _internal_has_confirmed_transaction() const;
  public:
  void clear_confirmed_transaction();
  const ::pb::Transaction& confirmed_transaction() const;
  ::pb::Transaction* release_confirmed_transaction();
  ::pb::Transaction* mutable_confirmed_transaction();
  void set_allocated_confirmed_transaction(::pb::Transaction* confirmed_transaction);
  private:
  const ::pb::Transaction& _internal_confirmed_transaction() const;
  ::pb::Transaction* _internal_mutable_confirmed_transaction();
  public:
  void unsafe_arena_set_allocated_confirmed_transaction(
      ::pb::Transaction* confirmed_transaction);
  ::pb::Transaction* unsafe_arena_release_confirmed_transaction();

  // .pb.MempoolTransaction unconfirmed_transaction = 3;
  bool has_unconfirmed_transaction() const;
  private:
  bool _internal_has_unconfirmed_transaction() const;
  public:
  void clear_unconfirmed_transaction();
  const ::pb::MempoolTransaction& unconfirmed_transaction() const;
  ::pb::MempoolTransaction* release_unconfirmed_transaction();
  ::pb::MempoolTransaction* mutable_unconfirmed_transaction();
  void set_allocated_unconfirmed_transaction(::pb::MempoolTransaction* unconfirmed_transaction);
  private:
  const ::pb::MempoolTransaction& _internal_unconfirmed_transaction() const;
  ::pb::MempoolTransaction* _internal_mutable_unconfirmed_transaction();
  public:
  void unsafe_arena_set_allocated_unconfirmed_transaction(
      ::pb::MempoolTransaction* unconfirmed_transaction);
  ::pb::MempoolTransaction* unsafe_arena_release_unconfirmed_transaction();

  // bytes serialized_transaction = 4;
  private:
  bool _internal_has_serialized_transaction() const;
  public:
  void clear_serialized_transaction();
  const std::string& serialized_transaction() const;
  void set_serialized_transaction(const std::string& value);
  void set_serialized_transaction(std::string&& value);
  void set_serialized_transaction(const char* value);
  void set_serialized_transaction(const void* value, size_t size);
  std::string* mutable_serialized_transaction();
  std::string* release_serialized_transaction();
  void set_allocated_serialized_transaction(std::string* serialized_transaction);
  private:
  const std::string& _internal_serialized_transaction() const;
  void _internal_set_serialized_transaction(const std::string& value);
  std::string* _internal_mutable_serialized_transaction();
  public:

  void clear_transaction();
  TransactionCase transaction_case() const;
  // @@protoc_insertion_point(class_scope:pb.TransactionNotification)
 private:
  class _Internal;
  void set_has_confirmed_transaction();
  void set_has_unconfirmed_transaction();
  void set_has_serialized_transaction();

  inline bool has_transaction() const;
  inline void clear_has_transaction();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union TransactionUnion {
    TransactionUnion() {}
    ::pb::Transaction* confirmed_transaction_;
    ::pb::MempoolTransaction* unconfirmed_transaction_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_transaction_;
  } transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BlockInfo) */ {
 public:
  inline BlockInfo() : BlockInfo(nullptr) {}
  virtual ~BlockInfo();

  BlockInfo(const BlockInfo& from);
  BlockInfo(BlockInfo&& from) noexcept
    : BlockInfo() {
    *this = ::std::move(from);
  }

  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfo& operator=(BlockInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfo* internal_default_instance() {
    return reinterpret_cast<const BlockInfo*>(
               &_BlockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(BlockInfo& a, BlockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfo* New() const final {
    return CreateMaybeMessage<BlockInfo>(nullptr);
  }

  BlockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInfo& from);
  void MergeFrom(const BlockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BlockInfo";
  }
  protected:
  explicit BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kPreviousBlockFieldNumber = 4,
    kMerkleRootFieldNumber = 5,
    kNextBlockHashFieldNumber = 11,
    kHeightFieldNumber = 2,
    kVersionFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kBitsFieldNumber = 7,
    kNonceFieldNumber = 8,
    kDifficultyFieldNumber = 10,
    kConfirmationsFieldNumber = 9,
    kSizeFieldNumber = 12,
    kMedianTimeFieldNumber = 13,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes previous_block = 4;
  void clear_previous_block();
  const std::string& previous_block() const;
  void set_previous_block(const std::string& value);
  void set_previous_block(std::string&& value);
  void set_previous_block(const char* value);
  void set_previous_block(const void* value, size_t size);
  std::string* mutable_previous_block();
  std::string* release_previous_block();
  void set_allocated_previous_block(std::string* previous_block);
  private:
  const std::string& _internal_previous_block() const;
  void _internal_set_previous_block(const std::string& value);
  std::string* _internal_mutable_previous_block();
  public:

  // bytes merkle_root = 5;
  void clear_merkle_root();
  const std::string& merkle_root() const;
  void set_merkle_root(const std::string& value);
  void set_merkle_root(std::string&& value);
  void set_merkle_root(const char* value);
  void set_merkle_root(const void* value, size_t size);
  std::string* mutable_merkle_root();
  std::string* release_merkle_root();
  void set_allocated_merkle_root(std::string* merkle_root);
  private:
  const std::string& _internal_merkle_root() const;
  void _internal_set_merkle_root(const std::string& value);
  std::string* _internal_mutable_merkle_root();
  public:

  // bytes next_block_hash = 11;
  void clear_next_block_hash();
  const std::string& next_block_hash() const;
  void set_next_block_hash(const std::string& value);
  void set_next_block_hash(std::string&& value);
  void set_next_block_hash(const char* value);
  void set_next_block_hash(const void* value, size_t size);
  std::string* mutable_next_block_hash();
  std::string* release_next_block_hash();
  void set_allocated_next_block_hash(std::string* next_block_hash);
  private:
  const std::string& _internal_next_block_hash() const;
  void _internal_set_next_block_hash(const std::string& value);
  std::string* _internal_mutable_next_block_hash();
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 bits = 7;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nonce = 8;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double difficulty = 10;
  void clear_difficulty();
  double difficulty() const;
  void set_difficulty(double value);
  private:
  double _internal_difficulty() const;
  void _internal_set_difficulty(double value);
  public:

  // int32 confirmations = 9;
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 12;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 median_time = 13;
  void clear_median_time();
  ::PROTOBUF_NAMESPACE_ID::int64 median_time() const;
  void set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_median_time() const;
  void _internal_set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BlockInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_block_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce_;
  double difficulty_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmations_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 median_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class Block_TransactionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Block.TransactionData) */ {
 public:
  inline Block_TransactionData() : Block_TransactionData(nullptr) {}
  virtual ~Block_TransactionData();

  Block_TransactionData(const Block_TransactionData& from);
  Block_TransactionData(Block_TransactionData&& from) noexcept
    : Block_TransactionData() {
    *this = ::std::move(from);
  }

  inline Block_TransactionData& operator=(const Block_TransactionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block_TransactionData& operator=(Block_TransactionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block_TransactionData& default_instance();

  enum TxidsOrTxsCase {
    kTransactionHash = 1,
    kTransaction = 2,
    TXIDS_OR_TXS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block_TransactionData* internal_default_instance() {
    return reinterpret_cast<const Block_TransactionData*>(
               &_Block_TransactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Block_TransactionData& a, Block_TransactionData& b) {
    a.Swap(&b);
  }
  inline void Swap(Block_TransactionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block_TransactionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block_TransactionData* New() const final {
    return CreateMaybeMessage<Block_TransactionData>(nullptr);
  }

  Block_TransactionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block_TransactionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block_TransactionData& from);
  void MergeFrom(const Block_TransactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block_TransactionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Block.TransactionData";
  }
  protected:
  explicit Block_TransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHashFieldNumber = 1,
    kTransactionFieldNumber = 2,
  };
  // bytes transaction_hash = 1;
  private:
  bool _internal_has_transaction_hash() const;
  public:
  void clear_transaction_hash();
  const std::string& transaction_hash() const;
  void set_transaction_hash(const std::string& value);
  void set_transaction_hash(std::string&& value);
  void set_transaction_hash(const char* value);
  void set_transaction_hash(const void* value, size_t size);
  std::string* mutable_transaction_hash();
  std::string* release_transaction_hash();
  void set_allocated_transaction_hash(std::string* transaction_hash);
  private:
  const std::string& _internal_transaction_hash() const;
  void _internal_set_transaction_hash(const std::string& value);
  std::string* _internal_mutable_transaction_hash();
  public:

  // .pb.Transaction transaction = 2;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::pb::Transaction& transaction() const;
  ::pb::Transaction* release_transaction();
  ::pb::Transaction* mutable_transaction();
  void set_allocated_transaction(::pb::Transaction* transaction);
  private:
  const ::pb::Transaction& _internal_transaction() const;
  ::pb::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::pb::Transaction* transaction);
  ::pb::Transaction* unsafe_arena_release_transaction();

  void clear_txids_or_txs();
  TxidsOrTxsCase txids_or_txs_case() const;
  // @@protoc_insertion_point(class_scope:pb.Block.TransactionData)
 private:
  class _Internal;
  void set_has_transaction_hash();
  void set_has_transaction();

  inline bool has_txids_or_txs() const;
  inline void clear_has_txids_or_txs();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TxidsOrTxsUnion {
    TxidsOrTxsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_hash_;
    ::pb::Transaction* transaction_;
  } txids_or_txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Block_TransactionData TransactionData;

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionDataFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .pb.Block.TransactionData transaction_data = 2;
  int transaction_data_size() const;
  private:
  int _internal_transaction_data_size() const;
  public:
  void clear_transaction_data();
  ::pb::Block_TransactionData* mutable_transaction_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block_TransactionData >*
      mutable_transaction_data();
  private:
  const ::pb::Block_TransactionData& _internal_transaction_data(int index) const;
  ::pb::Block_TransactionData* _internal_add_transaction_data();
  public:
  const ::pb::Block_TransactionData& transaction_data(int index) const;
  ::pb::Block_TransactionData* add_transaction_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block_TransactionData >&
      transaction_data() const;

  // .pb.BlockInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::pb::BlockInfo& info() const;
  ::pb::BlockInfo* release_info();
  ::pb::BlockInfo* mutable_info();
  void set_allocated_info(::pb::BlockInfo* info);
  private:
  const ::pb::BlockInfo& _internal_info() const;
  ::pb::BlockInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::pb::BlockInfo* info);
  ::pb::BlockInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:pb.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block_TransactionData > transaction_data_;
  ::pb::BlockInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Input_Outpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Transaction.Input.Outpoint) */ {
 public:
  inline Transaction_Input_Outpoint() : Transaction_Input_Outpoint(nullptr) {}
  virtual ~Transaction_Input_Outpoint();

  Transaction_Input_Outpoint(const Transaction_Input_Outpoint& from);
  Transaction_Input_Outpoint(Transaction_Input_Outpoint&& from) noexcept
    : Transaction_Input_Outpoint() {
    *this = ::std::move(from);
  }

  inline Transaction_Input_Outpoint& operator=(const Transaction_Input_Outpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Input_Outpoint& operator=(Transaction_Input_Outpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Input_Outpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_Input_Outpoint* internal_default_instance() {
    return reinterpret_cast<const Transaction_Input_Outpoint*>(
               &_Transaction_Input_Outpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Transaction_Input_Outpoint& a, Transaction_Input_Outpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Input_Outpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Input_Outpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Input_Outpoint* New() const final {
    return CreateMaybeMessage<Transaction_Input_Outpoint>(nullptr);
  }

  Transaction_Input_Outpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Input_Outpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Input_Outpoint& from);
  void MergeFrom(const Transaction_Input_Outpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Input_Outpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Transaction.Input.Outpoint";
  }
  protected:
  explicit Transaction_Input_Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Transaction.Input.Outpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Transaction.Input) */ {
 public:
  inline Transaction_Input() : Transaction_Input(nullptr) {}
  virtual ~Transaction_Input();

  Transaction_Input(const Transaction_Input& from);
  Transaction_Input(Transaction_Input&& from) noexcept
    : Transaction_Input() {
    *this = ::std::move(from);
  }

  inline Transaction_Input& operator=(const Transaction_Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Input& operator=(Transaction_Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_Input* internal_default_instance() {
    return reinterpret_cast<const Transaction_Input*>(
               &_Transaction_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Transaction_Input& a, Transaction_Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Input* New() const final {
    return CreateMaybeMessage<Transaction_Input>(nullptr);
  }

  Transaction_Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Input& from);
  void MergeFrom(const Transaction_Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Transaction.Input";
  }
  protected:
  explicit Transaction_Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Input_Outpoint Outpoint;

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureScriptFieldNumber = 3,
    kPreviousScriptFieldNumber = 6,
    kAddressFieldNumber = 7,
    kOutpointFieldNumber = 2,
    kIndexFieldNumber = 1,
    kSequenceFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // bytes signature_script = 3;
  void clear_signature_script();
  const std::string& signature_script() const;
  void set_signature_script(const std::string& value);
  void set_signature_script(std::string&& value);
  void set_signature_script(const char* value);
  void set_signature_script(const void* value, size_t size);
  std::string* mutable_signature_script();
  std::string* release_signature_script();
  void set_allocated_signature_script(std::string* signature_script);
  private:
  const std::string& _internal_signature_script() const;
  void _internal_set_signature_script(const std::string& value);
  std::string* _internal_mutable_signature_script();
  public:

  // bytes previous_script = 6;
  void clear_previous_script();
  const std::string& previous_script() const;
  void set_previous_script(const std::string& value);
  void set_previous_script(std::string&& value);
  void set_previous_script(const char* value);
  void set_previous_script(const void* value, size_t size);
  std::string* mutable_previous_script();
  std::string* release_previous_script();
  void set_allocated_previous_script(std::string* previous_script);
  private:
  const std::string& _internal_previous_script() const;
  void _internal_set_previous_script(const std::string& value);
  std::string* _internal_mutable_previous_script();
  public:

  // string address = 7;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .pb.Transaction.Input.Outpoint outpoint = 2;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::pb::Transaction_Input_Outpoint& outpoint() const;
  ::pb::Transaction_Input_Outpoint* release_outpoint();
  ::pb::Transaction_Input_Outpoint* mutable_outpoint();
  void set_allocated_outpoint(::pb::Transaction_Input_Outpoint* outpoint);
  private:
  const ::pb::Transaction_Input_Outpoint& _internal_outpoint() const;
  ::pb::Transaction_Input_Outpoint* _internal_mutable_outpoint();
  public:
  void unsafe_arena_set_allocated_outpoint(
      ::pb::Transaction_Input_Outpoint* outpoint);
  ::pb::Transaction_Input_Outpoint* unsafe_arena_release_outpoint();

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sequence = 4;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 value = 5;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Transaction.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_script_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_script_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::pb::Transaction_Input_Outpoint* outpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Output PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Transaction.Output) */ {
 public:
  inline Transaction_Output() : Transaction_Output(nullptr) {}
  virtual ~Transaction_Output();

  Transaction_Output(const Transaction_Output& from);
  Transaction_Output(Transaction_Output&& from) noexcept
    : Transaction_Output() {
    *this = ::std::move(from);
  }

  inline Transaction_Output& operator=(const Transaction_Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Output& operator=(Transaction_Output&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_Output* internal_default_instance() {
    return reinterpret_cast<const Transaction_Output*>(
               &_Transaction_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Transaction_Output& a, Transaction_Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Output* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Output* New() const final {
    return CreateMaybeMessage<Transaction_Output>(nullptr);
  }

  Transaction_Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Output>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Output& from);
  void MergeFrom(const Transaction_Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Transaction.Output";
  }
  protected:
  explicit Transaction_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyScriptFieldNumber = 3,
    kAddressFieldNumber = 4,
    kScriptClassFieldNumber = 5,
    kDisassembledScriptFieldNumber = 6,
    kValueFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // bytes pubkey_script = 3;
  void clear_pubkey_script();
  const std::string& pubkey_script() const;
  void set_pubkey_script(const std::string& value);
  void set_pubkey_script(std::string&& value);
  void set_pubkey_script(const char* value);
  void set_pubkey_script(const void* value, size_t size);
  std::string* mutable_pubkey_script();
  std::string* release_pubkey_script();
  void set_allocated_pubkey_script(std::string* pubkey_script);
  private:
  const std::string& _internal_pubkey_script() const;
  void _internal_set_pubkey_script(const std::string& value);
  std::string* _internal_mutable_pubkey_script();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string script_class = 5;
  void clear_script_class();
  const std::string& script_class() const;
  void set_script_class(const std::string& value);
  void set_script_class(std::string&& value);
  void set_script_class(const char* value);
  void set_script_class(const char* value, size_t size);
  std::string* mutable_script_class();
  std::string* release_script_class();
  void set_allocated_script_class(std::string* script_class);
  private:
  const std::string& _internal_script_class() const;
  void _internal_set_script_class(const std::string& value);
  std::string* _internal_mutable_script_class();
  public:

  // string disassembled_script = 6;
  void clear_disassembled_script();
  const std::string& disassembled_script() const;
  void set_disassembled_script(const std::string& value);
  void set_disassembled_script(std::string&& value);
  void set_disassembled_script(const char* value);
  void set_disassembled_script(const char* value, size_t size);
  std::string* mutable_disassembled_script();
  std::string* release_disassembled_script();
  void set_allocated_disassembled_script(std::string* disassembled_script);
  private:
  const std::string& _internal_disassembled_script() const;
  void _internal_set_disassembled_script(const std::string& value);
  std::string* _internal_mutable_disassembled_script();
  public:

  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Transaction.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_script_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disassembled_script_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Input Input;
  typedef Transaction_Output Output;

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kHashFieldNumber = 1,
    kBlockHashFieldNumber = 12,
    kVersionFieldNumber = 2,
    kLockTimeFieldNumber = 5,
    kTimestampFieldNumber = 9,
    kSizeFieldNumber = 8,
    kConfirmationsFieldNumber = 10,
    kBlockHeightFieldNumber = 11,
  };
  // repeated .pb.Transaction.Input inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::pb::Transaction_Input* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input >*
      mutable_inputs();
  private:
  const ::pb::Transaction_Input& _internal_inputs(int index) const;
  ::pb::Transaction_Input* _internal_add_inputs();
  public:
  const ::pb::Transaction_Input& inputs(int index) const;
  ::pb::Transaction_Input* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input >&
      inputs() const;

  // repeated .pb.Transaction.Output outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::pb::Transaction_Output* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Output >*
      mutable_outputs();
  private:
  const ::pb::Transaction_Output& _internal_outputs(int index) const;
  ::pb::Transaction_Output* _internal_add_outputs();
  public:
  const ::pb::Transaction_Output& outputs(int index) const;
  ::pb::Transaction_Output* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Output >&
      outputs() const;

  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes block_hash = 12;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 lock_time = 5;
  void clear_lock_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 lock_time() const;
  void set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lock_time() const;
  void _internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 timestamp = 9;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 confirmations = 10;
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::int32 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 block_height = 11;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Output > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lock_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 confirmations_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class MempoolTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.MempoolTransaction) */ {
 public:
  inline MempoolTransaction() : MempoolTransaction(nullptr) {}
  virtual ~MempoolTransaction();

  MempoolTransaction(const MempoolTransaction& from);
  MempoolTransaction(MempoolTransaction&& from) noexcept
    : MempoolTransaction() {
    *this = ::std::move(from);
  }

  inline MempoolTransaction& operator=(const MempoolTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MempoolTransaction& operator=(MempoolTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MempoolTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MempoolTransaction* internal_default_instance() {
    return reinterpret_cast<const MempoolTransaction*>(
               &_MempoolTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MempoolTransaction& a, MempoolTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(MempoolTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MempoolTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MempoolTransaction* New() const final {
    return CreateMaybeMessage<MempoolTransaction>(nullptr);
  }

  MempoolTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MempoolTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MempoolTransaction& from);
  void MergeFrom(const MempoolTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MempoolTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.MempoolTransaction";
  }
  protected:
  explicit MempoolTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kAddedTimeFieldNumber = 2,
    kFeeFieldNumber = 4,
    kFeePerKbFieldNumber = 5,
    kStartingPriorityFieldNumber = 6,
    kAddedHeightFieldNumber = 3,
  };
  // .pb.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::pb::Transaction& transaction() const;
  ::pb::Transaction* release_transaction();
  ::pb::Transaction* mutable_transaction();
  void set_allocated_transaction(::pb::Transaction* transaction);
  private:
  const ::pb::Transaction& _internal_transaction() const;
  ::pb::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::pb::Transaction* transaction);
  ::pb::Transaction* unsafe_arena_release_transaction();

  // int64 added_time = 2;
  void clear_added_time();
  ::PROTOBUF_NAMESPACE_ID::int64 added_time() const;
  void set_added_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_added_time() const;
  void _internal_set_added_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee = 4;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_per_kb = 5;
  void clear_fee_per_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_kb() const;
  void set_fee_per_kb(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_per_kb() const;
  void _internal_set_fee_per_kb(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double starting_priority = 6;
  void clear_starting_priority();
  double starting_priority() const;
  void set_starting_priority(double value);
  private:
  double _internal_starting_priority() const;
  void _internal_set_starting_priority(double value);
  public:

  // int32 added_height = 3;
  void clear_added_height();
  ::PROTOBUF_NAMESPACE_ID::int32 added_height() const;
  void set_added_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_added_height() const;
  void _internal_set_added_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.MempoolTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::Transaction* transaction_;
  ::PROTOBUF_NAMESPACE_ID::int64 added_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_kb_;
  double starting_priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 added_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class UnspentOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.UnspentOutput) */ {
 public:
  inline UnspentOutput() : UnspentOutput(nullptr) {}
  virtual ~UnspentOutput();

  UnspentOutput(const UnspentOutput& from);
  UnspentOutput(UnspentOutput&& from) noexcept
    : UnspentOutput() {
    *this = ::std::move(from);
  }

  inline UnspentOutput& operator=(const UnspentOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnspentOutput& operator=(UnspentOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnspentOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnspentOutput* internal_default_instance() {
    return reinterpret_cast<const UnspentOutput*>(
               &_UnspentOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UnspentOutput& a, UnspentOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(UnspentOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnspentOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnspentOutput* New() const final {
    return CreateMaybeMessage<UnspentOutput>(nullptr);
  }

  UnspentOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnspentOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnspentOutput& from);
  void MergeFrom(const UnspentOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnspentOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.UnspentOutput";
  }
  protected:
  explicit UnspentOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyScriptFieldNumber = 2,
    kOutpointFieldNumber = 1,
    kValueFieldNumber = 3,
    kIsCoinbaseFieldNumber = 4,
    kBlockHeightFieldNumber = 5,
  };
  // bytes pubkey_script = 2;
  void clear_pubkey_script();
  const std::string& pubkey_script() const;
  void set_pubkey_script(const std::string& value);
  void set_pubkey_script(std::string&& value);
  void set_pubkey_script(const char* value);
  void set_pubkey_script(const void* value, size_t size);
  std::string* mutable_pubkey_script();
  std::string* release_pubkey_script();
  void set_allocated_pubkey_script(std::string* pubkey_script);
  private:
  const std::string& _internal_pubkey_script() const;
  void _internal_set_pubkey_script(const std::string& value);
  std::string* _internal_mutable_pubkey_script();
  public:

  // .pb.Transaction.Input.Outpoint outpoint = 1;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::pb::Transaction_Input_Outpoint& outpoint() const;
  ::pb::Transaction_Input_Outpoint* release_outpoint();
  ::pb::Transaction_Input_Outpoint* mutable_outpoint();
  void set_allocated_outpoint(::pb::Transaction_Input_Outpoint* outpoint);
  private:
  const ::pb::Transaction_Input_Outpoint& _internal_outpoint() const;
  ::pb::Transaction_Input_Outpoint* _internal_mutable_outpoint();
  public:
  void unsafe_arena_set_allocated_outpoint(
      ::pb::Transaction_Input_Outpoint* outpoint);
  ::pb::Transaction_Input_Outpoint* unsafe_arena_release_outpoint();

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_coinbase = 4;
  void clear_is_coinbase();
  bool is_coinbase() const;
  void set_is_coinbase(bool value);
  private:
  bool _internal_is_coinbase() const;
  void _internal_set_is_coinbase(bool value);
  public:

  // int32 block_height = 5;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.UnspentOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_script_;
  ::pb::Transaction_Input_Outpoint* outpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  bool is_coinbase_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// -------------------------------------------------------------------

class TransactionFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TransactionFilter) */ {
 public:
  inline TransactionFilter() : TransactionFilter(nullptr) {}
  virtual ~TransactionFilter();

  TransactionFilter(const TransactionFilter& from);
  TransactionFilter(TransactionFilter&& from) noexcept
    : TransactionFilter() {
    *this = ::std::move(from);
  }

  inline TransactionFilter& operator=(const TransactionFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionFilter& operator=(TransactionFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionFilter* internal_default_instance() {
    return reinterpret_cast<const TransactionFilter*>(
               &_TransactionFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TransactionFilter& a, TransactionFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionFilter* New() const final {
    return CreateMaybeMessage<TransactionFilter>(nullptr);
  }

  TransactionFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionFilter& from);
  void MergeFrom(const TransactionFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TransactionFilter";
  }
  protected:
  explicit TransactionFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bchrpc_2eproto);
    return ::descriptor_table_bchrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kOutpointsFieldNumber = 2,
    kDataElementsFieldNumber = 3,
    kAllTransactionsFieldNumber = 4,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // repeated .pb.Transaction.Input.Outpoint outpoints = 2;
  int outpoints_size() const;
  private:
  int _internal_outpoints_size() const;
  public:
  void clear_outpoints();
  ::pb::Transaction_Input_Outpoint* mutable_outpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input_Outpoint >*
      mutable_outpoints();
  private:
  const ::pb::Transaction_Input_Outpoint& _internal_outpoints(int index) const;
  ::pb::Transaction_Input_Outpoint* _internal_add_outpoints();
  public:
  const ::pb::Transaction_Input_Outpoint& outpoints(int index) const;
  ::pb::Transaction_Input_Outpoint* add_outpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input_Outpoint >&
      outpoints() const;

  // repeated bytes data_elements = 3;
  int data_elements_size() const;
  private:
  int _internal_data_elements_size() const;
  public:
  void clear_data_elements();
  const std::string& data_elements(int index) const;
  std::string* mutable_data_elements(int index);
  void set_data_elements(int index, const std::string& value);
  void set_data_elements(int index, std::string&& value);
  void set_data_elements(int index, const char* value);
  void set_data_elements(int index, const void* value, size_t size);
  std::string* add_data_elements();
  void add_data_elements(const std::string& value);
  void add_data_elements(std::string&& value);
  void add_data_elements(const char* value);
  void add_data_elements(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_elements();
  private:
  const std::string& _internal_data_elements(int index) const;
  std::string* _internal_add_data_elements();
  public:

  // bool all_transactions = 4;
  void clear_all_transactions();
  bool all_transactions() const;
  void set_all_transactions(bool value);
  private:
  bool _internal_all_transactions() const;
  void _internal_set_all_transactions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TransactionFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input_Outpoint > outpoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_elements_;
  bool all_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bchrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMempoolInfoRequest

// -------------------------------------------------------------------

// GetMempoolInfoResponse

// uint32 size = 1;
inline void GetMempoolInfoResponse::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMempoolInfoResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMempoolInfoResponse::size() const {
  // @@protoc_insertion_point(field_get:pb.GetMempoolInfoResponse.size)
  return _internal_size();
}
inline void GetMempoolInfoResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void GetMempoolInfoResponse::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:pb.GetMempoolInfoResponse.size)
}

// uint32 bytes = 2;
inline void GetMempoolInfoResponse::clear_bytes() {
  bytes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMempoolInfoResponse::_internal_bytes() const {
  return bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMempoolInfoResponse::bytes() const {
  // @@protoc_insertion_point(field_get:pb.GetMempoolInfoResponse.bytes)
  return _internal_bytes();
}
inline void GetMempoolInfoResponse::_internal_set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bytes_ = value;
}
inline void GetMempoolInfoResponse::set_bytes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:pb.GetMempoolInfoResponse.bytes)
}

// -------------------------------------------------------------------

// GetMempoolRequest

// bool full_transactions = 1;
inline void GetMempoolRequest::clear_full_transactions() {
  full_transactions_ = false;
}
inline bool GetMempoolRequest::_internal_full_transactions() const {
  return full_transactions_;
}
inline bool GetMempoolRequest::full_transactions() const {
  // @@protoc_insertion_point(field_get:pb.GetMempoolRequest.full_transactions)
  return _internal_full_transactions();
}
inline void GetMempoolRequest::_internal_set_full_transactions(bool value) {
  
  full_transactions_ = value;
}
inline void GetMempoolRequest::set_full_transactions(bool value) {
  _internal_set_full_transactions(value);
  // @@protoc_insertion_point(field_set:pb.GetMempoolRequest.full_transactions)
}

// -------------------------------------------------------------------

// GetMempoolResponse_TransactionData

// bytes transaction_hash = 1;
inline bool GetMempoolResponse_TransactionData::_internal_has_transaction_hash() const {
  return txids_or_txs_case() == kTransactionHash;
}
inline void GetMempoolResponse_TransactionData::set_has_transaction_hash() {
  _oneof_case_[0] = kTransactionHash;
}
inline void GetMempoolResponse_TransactionData::clear_transaction_hash() {
  if (_internal_has_transaction_hash()) {
    txids_or_txs_.transaction_hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_txids_or_txs();
  }
}
inline const std::string& GetMempoolResponse_TransactionData::transaction_hash() const {
  // @@protoc_insertion_point(field_get:pb.GetMempoolResponse.TransactionData.transaction_hash)
  return _internal_transaction_hash();
}
inline void GetMempoolResponse_TransactionData::set_transaction_hash(const std::string& value) {
  _internal_set_transaction_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetMempoolResponse.TransactionData.transaction_hash)
}
inline std::string* GetMempoolResponse_TransactionData::mutable_transaction_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetMempoolResponse.TransactionData.transaction_hash)
  return _internal_mutable_transaction_hash();
}
inline const std::string& GetMempoolResponse_TransactionData::_internal_transaction_hash() const {
  if (_internal_has_transaction_hash()) {
    return txids_or_txs_.transaction_hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetMempoolResponse_TransactionData::_internal_set_transaction_hash(const std::string& value) {
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMempoolResponse_TransactionData::set_transaction_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetMempoolResponse.TransactionData.transaction_hash)
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetMempoolResponse.TransactionData.transaction_hash)
}
inline void GetMempoolResponse_TransactionData::set_transaction_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetMempoolResponse.TransactionData.transaction_hash)
}
inline void GetMempoolResponse_TransactionData::set_transaction_hash(const void* value,
                             size_t size) {
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetMempoolResponse.TransactionData.transaction_hash)
}
inline std::string* GetMempoolResponse_TransactionData::_internal_mutable_transaction_hash() {
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return txids_or_txs_.transaction_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMempoolResponse_TransactionData::release_transaction_hash() {
  // @@protoc_insertion_point(field_release:pb.GetMempoolResponse.TransactionData.transaction_hash)
  if (_internal_has_transaction_hash()) {
    clear_has_txids_or_txs();
    return txids_or_txs_.transaction_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetMempoolResponse_TransactionData::set_allocated_transaction_hash(std::string* transaction_hash) {
  if (has_txids_or_txs()) {
    clear_txids_or_txs();
  }
  if (transaction_hash != nullptr) {
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(transaction_hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(transaction_hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetMempoolResponse.TransactionData.transaction_hash)
}

// .pb.Transaction transaction = 2;
inline bool GetMempoolResponse_TransactionData::_internal_has_transaction() const {
  return txids_or_txs_case() == kTransaction;
}
inline bool GetMempoolResponse_TransactionData::has_transaction() const {
  return _internal_has_transaction();
}
inline void GetMempoolResponse_TransactionData::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void GetMempoolResponse_TransactionData::clear_transaction() {
  if (_internal_has_transaction()) {
    if (GetArena() == nullptr) {
      delete txids_or_txs_.transaction_;
    }
    clear_has_txids_or_txs();
  }
}
inline ::pb::Transaction* GetMempoolResponse_TransactionData::release_transaction() {
  // @@protoc_insertion_point(field_release:pb.GetMempoolResponse.TransactionData.transaction)
  if (_internal_has_transaction()) {
    clear_has_txids_or_txs();
      ::pb::Transaction* temp = txids_or_txs_.transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    txids_or_txs_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::Transaction& GetMempoolResponse_TransactionData::_internal_transaction() const {
  return _internal_has_transaction()
      ? *txids_or_txs_.transaction_
      : *reinterpret_cast< ::pb::Transaction*>(&::pb::_Transaction_default_instance_);
}
inline const ::pb::Transaction& GetMempoolResponse_TransactionData::transaction() const {
  // @@protoc_insertion_point(field_get:pb.GetMempoolResponse.TransactionData.transaction)
  return _internal_transaction();
}
inline ::pb::Transaction* GetMempoolResponse_TransactionData::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.GetMempoolResponse.TransactionData.transaction)
  if (_internal_has_transaction()) {
    clear_has_txids_or_txs();
    ::pb::Transaction* temp = txids_or_txs_.transaction_;
    txids_or_txs_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetMempoolResponse_TransactionData::unsafe_arena_set_allocated_transaction(::pb::Transaction* transaction) {
  clear_txids_or_txs();
  if (transaction) {
    set_has_transaction();
    txids_or_txs_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GetMempoolResponse.TransactionData.transaction)
}
inline ::pb::Transaction* GetMempoolResponse_TransactionData::_internal_mutable_transaction() {
  if (!_internal_has_transaction()) {
    clear_txids_or_txs();
    set_has_transaction();
    txids_or_txs_.transaction_ = CreateMaybeMessage< ::pb::Transaction >(GetArena());
  }
  return txids_or_txs_.transaction_;
}
inline ::pb::Transaction* GetMempoolResponse_TransactionData::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.GetMempoolResponse.TransactionData.transaction)
  return _internal_mutable_transaction();
}

inline bool GetMempoolResponse_TransactionData::has_txids_or_txs() const {
  return txids_or_txs_case() != TXIDS_OR_TXS_NOT_SET;
}
inline void GetMempoolResponse_TransactionData::clear_has_txids_or_txs() {
  _oneof_case_[0] = TXIDS_OR_TXS_NOT_SET;
}
inline GetMempoolResponse_TransactionData::TxidsOrTxsCase GetMempoolResponse_TransactionData::txids_or_txs_case() const {
  return GetMempoolResponse_TransactionData::TxidsOrTxsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetMempoolResponse

// repeated .pb.GetMempoolResponse.TransactionData transaction_data = 1;
inline int GetMempoolResponse::_internal_transaction_data_size() const {
  return transaction_data_.size();
}
inline int GetMempoolResponse::transaction_data_size() const {
  return _internal_transaction_data_size();
}
inline void GetMempoolResponse::clear_transaction_data() {
  transaction_data_.Clear();
}
inline ::pb::GetMempoolResponse_TransactionData* GetMempoolResponse::mutable_transaction_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetMempoolResponse.transaction_data)
  return transaction_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GetMempoolResponse_TransactionData >*
GetMempoolResponse::mutable_transaction_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetMempoolResponse.transaction_data)
  return &transaction_data_;
}
inline const ::pb::GetMempoolResponse_TransactionData& GetMempoolResponse::_internal_transaction_data(int index) const {
  return transaction_data_.Get(index);
}
inline const ::pb::GetMempoolResponse_TransactionData& GetMempoolResponse::transaction_data(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetMempoolResponse.transaction_data)
  return _internal_transaction_data(index);
}
inline ::pb::GetMempoolResponse_TransactionData* GetMempoolResponse::_internal_add_transaction_data() {
  return transaction_data_.Add();
}
inline ::pb::GetMempoolResponse_TransactionData* GetMempoolResponse::add_transaction_data() {
  // @@protoc_insertion_point(field_add:pb.GetMempoolResponse.transaction_data)
  return _internal_add_transaction_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GetMempoolResponse_TransactionData >&
GetMempoolResponse::transaction_data() const {
  // @@protoc_insertion_point(field_list:pb.GetMempoolResponse.transaction_data)
  return transaction_data_;
}

// -------------------------------------------------------------------

// GetBlockchainInfoRequest

// -------------------------------------------------------------------

// GetBlockchainInfoResponse

// .pb.GetBlockchainInfoResponse.BitcoinNet bitcoin_net = 1;
inline void GetBlockchainInfoResponse::clear_bitcoin_net() {
  bitcoin_net_ = 0;
}
inline ::pb::GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::_internal_bitcoin_net() const {
  return static_cast< ::pb::GetBlockchainInfoResponse_BitcoinNet >(bitcoin_net_);
}
inline ::pb::GetBlockchainInfoResponse_BitcoinNet GetBlockchainInfoResponse::bitcoin_net() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.bitcoin_net)
  return _internal_bitcoin_net();
}
inline void GetBlockchainInfoResponse::_internal_set_bitcoin_net(::pb::GetBlockchainInfoResponse_BitcoinNet value) {
  
  bitcoin_net_ = value;
}
inline void GetBlockchainInfoResponse::set_bitcoin_net(::pb::GetBlockchainInfoResponse_BitcoinNet value) {
  _internal_set_bitcoin_net(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.bitcoin_net)
}

// int32 best_height = 2;
inline void GetBlockchainInfoResponse::clear_best_height() {
  best_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockchainInfoResponse::_internal_best_height() const {
  return best_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockchainInfoResponse::best_height() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.best_height)
  return _internal_best_height();
}
inline void GetBlockchainInfoResponse::_internal_set_best_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  best_height_ = value;
}
inline void GetBlockchainInfoResponse::set_best_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_best_height(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.best_height)
}

// bytes best_block_hash = 3;
inline void GetBlockchainInfoResponse::clear_best_block_hash() {
  best_block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetBlockchainInfoResponse::best_block_hash() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.best_block_hash)
  return _internal_best_block_hash();
}
inline void GetBlockchainInfoResponse::set_best_block_hash(const std::string& value) {
  _internal_set_best_block_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.best_block_hash)
}
inline std::string* GetBlockchainInfoResponse::mutable_best_block_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockchainInfoResponse.best_block_hash)
  return _internal_mutable_best_block_hash();
}
inline const std::string& GetBlockchainInfoResponse::_internal_best_block_hash() const {
  return best_block_hash_.Get();
}
inline void GetBlockchainInfoResponse::_internal_set_best_block_hash(const std::string& value) {
  
  best_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBlockchainInfoResponse::set_best_block_hash(std::string&& value) {
  
  best_block_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetBlockchainInfoResponse.best_block_hash)
}
inline void GetBlockchainInfoResponse::set_best_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  best_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetBlockchainInfoResponse.best_block_hash)
}
inline void GetBlockchainInfoResponse::set_best_block_hash(const void* value,
    size_t size) {
  
  best_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetBlockchainInfoResponse.best_block_hash)
}
inline std::string* GetBlockchainInfoResponse::_internal_mutable_best_block_hash() {
  
  return best_block_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBlockchainInfoResponse::release_best_block_hash() {
  // @@protoc_insertion_point(field_release:pb.GetBlockchainInfoResponse.best_block_hash)
  return best_block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBlockchainInfoResponse::set_allocated_best_block_hash(std::string* best_block_hash) {
  if (best_block_hash != nullptr) {
    
  } else {
    
  }
  best_block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), best_block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockchainInfoResponse.best_block_hash)
}

// double difficulty = 4;
inline void GetBlockchainInfoResponse::clear_difficulty() {
  difficulty_ = 0;
}
inline double GetBlockchainInfoResponse::_internal_difficulty() const {
  return difficulty_;
}
inline double GetBlockchainInfoResponse::difficulty() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.difficulty)
  return _internal_difficulty();
}
inline void GetBlockchainInfoResponse::_internal_set_difficulty(double value) {
  
  difficulty_ = value;
}
inline void GetBlockchainInfoResponse::set_difficulty(double value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.difficulty)
}

// int64 median_time = 5;
inline void GetBlockchainInfoResponse::clear_median_time() {
  median_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainInfoResponse::_internal_median_time() const {
  return median_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBlockchainInfoResponse::median_time() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.median_time)
  return _internal_median_time();
}
inline void GetBlockchainInfoResponse::_internal_set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  median_time_ = value;
}
inline void GetBlockchainInfoResponse::set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_median_time(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.median_time)
}

// bool tx_index = 6;
inline void GetBlockchainInfoResponse::clear_tx_index() {
  tx_index_ = false;
}
inline bool GetBlockchainInfoResponse::_internal_tx_index() const {
  return tx_index_;
}
inline bool GetBlockchainInfoResponse::tx_index() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.tx_index)
  return _internal_tx_index();
}
inline void GetBlockchainInfoResponse::_internal_set_tx_index(bool value) {
  
  tx_index_ = value;
}
inline void GetBlockchainInfoResponse::set_tx_index(bool value) {
  _internal_set_tx_index(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.tx_index)
}

// bool addr_index = 7;
inline void GetBlockchainInfoResponse::clear_addr_index() {
  addr_index_ = false;
}
inline bool GetBlockchainInfoResponse::_internal_addr_index() const {
  return addr_index_;
}
inline bool GetBlockchainInfoResponse::addr_index() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockchainInfoResponse.addr_index)
  return _internal_addr_index();
}
inline void GetBlockchainInfoResponse::_internal_set_addr_index(bool value) {
  
  addr_index_ = value;
}
inline void GetBlockchainInfoResponse::set_addr_index(bool value) {
  _internal_set_addr_index(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockchainInfoResponse.addr_index)
}

// -------------------------------------------------------------------

// GetBlockInfoRequest

// bytes hash = 1;
inline bool GetBlockInfoRequest::_internal_has_hash() const {
  return hash_or_height_case() == kHash;
}
inline void GetBlockInfoRequest::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void GetBlockInfoRequest::clear_hash() {
  if (_internal_has_hash()) {
    hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_hash_or_height();
  }
}
inline const std::string& GetBlockInfoRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockInfoRequest.hash)
  return _internal_hash();
}
inline void GetBlockInfoRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockInfoRequest.hash)
}
inline std::string* GetBlockInfoRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockInfoRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetBlockInfoRequest::_internal_hash() const {
  if (_internal_has_hash()) {
    return hash_or_height_.hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetBlockInfoRequest::_internal_set_hash(const std::string& value) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBlockInfoRequest::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetBlockInfoRequest.hash)
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetBlockInfoRequest.hash)
}
inline void GetBlockInfoRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetBlockInfoRequest.hash)
}
inline void GetBlockInfoRequest::set_hash(const void* value,
                             size_t size) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetBlockInfoRequest.hash)
}
inline std::string* GetBlockInfoRequest::_internal_mutable_hash() {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return hash_or_height_.hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBlockInfoRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetBlockInfoRequest.hash)
  if (_internal_has_hash()) {
    clear_has_hash_or_height();
    return hash_or_height_.hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetBlockInfoRequest::set_allocated_hash(std::string* hash) {
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
  if (hash != nullptr) {
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockInfoRequest.hash)
}

// int32 height = 2;
inline bool GetBlockInfoRequest::_internal_has_height() const {
  return hash_or_height_case() == kHeight;
}
inline void GetBlockInfoRequest::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void GetBlockInfoRequest::clear_height() {
  if (_internal_has_height()) {
    hash_or_height_.height_ = 0;
    clear_has_hash_or_height();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoRequest::_internal_height() const {
  if (_internal_has_height()) {
    return hash_or_height_.height_;
  }
  return 0;
}
inline void GetBlockInfoRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_hash_or_height();
    set_has_height();
  }
  hash_or_height_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoRequest::height() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockInfoRequest.height)
  return _internal_height();
}
inline void GetBlockInfoRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockInfoRequest.height)
}

inline bool GetBlockInfoRequest::has_hash_or_height() const {
  return hash_or_height_case() != HASH_OR_HEIGHT_NOT_SET;
}
inline void GetBlockInfoRequest::clear_has_hash_or_height() {
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}
inline GetBlockInfoRequest::HashOrHeightCase GetBlockInfoRequest::hash_or_height_case() const {
  return GetBlockInfoRequest::HashOrHeightCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetBlockInfoResponse

// .pb.BlockInfo info = 1;
inline bool GetBlockInfoResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetBlockInfoResponse::has_info() const {
  return _internal_has_info();
}
inline void GetBlockInfoResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::pb::BlockInfo& GetBlockInfoResponse::_internal_info() const {
  const ::pb::BlockInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::BlockInfo*>(
      &::pb::_BlockInfo_default_instance_);
}
inline const ::pb::BlockInfo& GetBlockInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockInfoResponse.info)
  return _internal_info();
}
inline void GetBlockInfoResponse::unsafe_arena_set_allocated_info(
    ::pb::BlockInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GetBlockInfoResponse.info)
}
inline ::pb::BlockInfo* GetBlockInfoResponse::release_info() {
  
  ::pb::BlockInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::BlockInfo* GetBlockInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:pb.GetBlockInfoResponse.info)
  
  ::pb::BlockInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::pb::BlockInfo* GetBlockInfoResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::BlockInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::pb::BlockInfo* GetBlockInfoResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockInfoResponse.info)
  return _internal_mutable_info();
}
inline void GetBlockInfoResponse::set_allocated_info(::pb::BlockInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockInfoResponse.info)
}

// -------------------------------------------------------------------

// GetBlockRequest

// bytes hash = 1;
inline bool GetBlockRequest::_internal_has_hash() const {
  return hash_or_height_case() == kHash;
}
inline void GetBlockRequest::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void GetBlockRequest::clear_hash() {
  if (_internal_has_hash()) {
    hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_hash_or_height();
  }
}
inline const std::string& GetBlockRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockRequest.hash)
  return _internal_hash();
}
inline void GetBlockRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockRequest.hash)
}
inline std::string* GetBlockRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetBlockRequest::_internal_hash() const {
  if (_internal_has_hash()) {
    return hash_or_height_.hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetBlockRequest::_internal_set_hash(const std::string& value) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBlockRequest::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetBlockRequest.hash)
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetBlockRequest.hash)
}
inline void GetBlockRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetBlockRequest.hash)
}
inline void GetBlockRequest::set_hash(const void* value,
                             size_t size) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetBlockRequest.hash)
}
inline std::string* GetBlockRequest::_internal_mutable_hash() {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return hash_or_height_.hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBlockRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetBlockRequest.hash)
  if (_internal_has_hash()) {
    clear_has_hash_or_height();
    return hash_or_height_.hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetBlockRequest::set_allocated_hash(std::string* hash) {
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
  if (hash != nullptr) {
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockRequest.hash)
}

// int32 height = 2;
inline bool GetBlockRequest::_internal_has_height() const {
  return hash_or_height_case() == kHeight;
}
inline void GetBlockRequest::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void GetBlockRequest::clear_height() {
  if (_internal_has_height()) {
    hash_or_height_.height_ = 0;
    clear_has_hash_or_height();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockRequest::_internal_height() const {
  if (_internal_has_height()) {
    return hash_or_height_.height_;
  }
  return 0;
}
inline void GetBlockRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_hash_or_height();
    set_has_height();
  }
  hash_or_height_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockRequest::height() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockRequest.height)
  return _internal_height();
}
inline void GetBlockRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockRequest.height)
}

// bool full_transactions = 3;
inline void GetBlockRequest::clear_full_transactions() {
  full_transactions_ = false;
}
inline bool GetBlockRequest::_internal_full_transactions() const {
  return full_transactions_;
}
inline bool GetBlockRequest::full_transactions() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockRequest.full_transactions)
  return _internal_full_transactions();
}
inline void GetBlockRequest::_internal_set_full_transactions(bool value) {
  
  full_transactions_ = value;
}
inline void GetBlockRequest::set_full_transactions(bool value) {
  _internal_set_full_transactions(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockRequest.full_transactions)
}

inline bool GetBlockRequest::has_hash_or_height() const {
  return hash_or_height_case() != HASH_OR_HEIGHT_NOT_SET;
}
inline void GetBlockRequest::clear_has_hash_or_height() {
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}
inline GetBlockRequest::HashOrHeightCase GetBlockRequest::hash_or_height_case() const {
  return GetBlockRequest::HashOrHeightCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetBlockResponse

// .pb.Block block = 1;
inline bool GetBlockResponse::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetBlockResponse::has_block() const {
  return _internal_has_block();
}
inline void GetBlockResponse::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::pb::Block& GetBlockResponse::_internal_block() const {
  const ::pb::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Block*>(
      &::pb::_Block_default_instance_);
}
inline const ::pb::Block& GetBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockResponse.block)
  return _internal_block();
}
inline void GetBlockResponse::unsafe_arena_set_allocated_block(
    ::pb::Block* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GetBlockResponse.block)
}
inline ::pb::Block* GetBlockResponse::release_block() {
  
  ::pb::Block* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Block* GetBlockResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:pb.GetBlockResponse.block)
  
  ::pb::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::pb::Block* GetBlockResponse::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Block>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::pb::Block* GetBlockResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockResponse.block)
  return _internal_mutable_block();
}
inline void GetBlockResponse::set_allocated_block(::pb::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockResponse.block)
}

// -------------------------------------------------------------------

// GetRawBlockRequest

// bytes hash = 1;
inline bool GetRawBlockRequest::_internal_has_hash() const {
  return hash_or_height_case() == kHash;
}
inline void GetRawBlockRequest::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void GetRawBlockRequest::clear_hash() {
  if (_internal_has_hash()) {
    hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_hash_or_height();
  }
}
inline const std::string& GetRawBlockRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetRawBlockRequest.hash)
  return _internal_hash();
}
inline void GetRawBlockRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetRawBlockRequest.hash)
}
inline std::string* GetRawBlockRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetRawBlockRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetRawBlockRequest::_internal_hash() const {
  if (_internal_has_hash()) {
    return hash_or_height_.hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetRawBlockRequest::_internal_set_hash(const std::string& value) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRawBlockRequest::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetRawBlockRequest.hash)
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRawBlockRequest.hash)
}
inline void GetRawBlockRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetRawBlockRequest.hash)
}
inline void GetRawBlockRequest::set_hash(const void* value,
                             size_t size) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawBlockRequest.hash)
}
inline std::string* GetRawBlockRequest::_internal_mutable_hash() {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return hash_or_height_.hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRawBlockRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetRawBlockRequest.hash)
  if (_internal_has_hash()) {
    clear_has_hash_or_height();
    return hash_or_height_.hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetRawBlockRequest::set_allocated_hash(std::string* hash) {
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
  if (hash != nullptr) {
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetRawBlockRequest.hash)
}

// int32 height = 2;
inline bool GetRawBlockRequest::_internal_has_height() const {
  return hash_or_height_case() == kHeight;
}
inline void GetRawBlockRequest::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void GetRawBlockRequest::clear_height() {
  if (_internal_has_height()) {
    hash_or_height_.height_ = 0;
    clear_has_hash_or_height();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRawBlockRequest::_internal_height() const {
  if (_internal_has_height()) {
    return hash_or_height_.height_;
  }
  return 0;
}
inline void GetRawBlockRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_hash_or_height();
    set_has_height();
  }
  hash_or_height_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRawBlockRequest::height() const {
  // @@protoc_insertion_point(field_get:pb.GetRawBlockRequest.height)
  return _internal_height();
}
inline void GetRawBlockRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.GetRawBlockRequest.height)
}

inline bool GetRawBlockRequest::has_hash_or_height() const {
  return hash_or_height_case() != HASH_OR_HEIGHT_NOT_SET;
}
inline void GetRawBlockRequest::clear_has_hash_or_height() {
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}
inline GetRawBlockRequest::HashOrHeightCase GetRawBlockRequest::hash_or_height_case() const {
  return GetRawBlockRequest::HashOrHeightCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetRawBlockResponse

// bytes block = 1;
inline void GetRawBlockResponse::clear_block() {
  block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRawBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:pb.GetRawBlockResponse.block)
  return _internal_block();
}
inline void GetRawBlockResponse::set_block(const std::string& value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:pb.GetRawBlockResponse.block)
}
inline std::string* GetRawBlockResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:pb.GetRawBlockResponse.block)
  return _internal_mutable_block();
}
inline const std::string& GetRawBlockResponse::_internal_block() const {
  return block_.Get();
}
inline void GetRawBlockResponse::_internal_set_block(const std::string& value) {
  
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRawBlockResponse::set_block(std::string&& value) {
  
  block_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRawBlockResponse.block)
}
inline void GetRawBlockResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetRawBlockResponse.block)
}
inline void GetRawBlockResponse::set_block(const void* value,
    size_t size) {
  
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawBlockResponse.block)
}
inline std::string* GetRawBlockResponse::_internal_mutable_block() {
  
  return block_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRawBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:pb.GetRawBlockResponse.block)
  return block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRawBlockResponse::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetRawBlockResponse.block)
}

// -------------------------------------------------------------------

// GetBlockFilterRequest

// bytes hash = 1;
inline bool GetBlockFilterRequest::_internal_has_hash() const {
  return hash_or_height_case() == kHash;
}
inline void GetBlockFilterRequest::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void GetBlockFilterRequest::clear_hash() {
  if (_internal_has_hash()) {
    hash_or_height_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_hash_or_height();
  }
}
inline const std::string& GetBlockFilterRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockFilterRequest.hash)
  return _internal_hash();
}
inline void GetBlockFilterRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockFilterRequest.hash)
}
inline std::string* GetBlockFilterRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockFilterRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetBlockFilterRequest::_internal_hash() const {
  if (_internal_has_hash()) {
    return hash_or_height_.hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetBlockFilterRequest::_internal_set_hash(const std::string& value) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBlockFilterRequest::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetBlockFilterRequest.hash)
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetBlockFilterRequest.hash)
}
inline void GetBlockFilterRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetBlockFilterRequest.hash)
}
inline void GetBlockFilterRequest::set_hash(const void* value,
                             size_t size) {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  hash_or_height_.hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetBlockFilterRequest.hash)
}
inline std::string* GetBlockFilterRequest::_internal_mutable_hash() {
  if (!_internal_has_hash()) {
    clear_hash_or_height();
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return hash_or_height_.hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBlockFilterRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetBlockFilterRequest.hash)
  if (_internal_has_hash()) {
    clear_has_hash_or_height();
    return hash_or_height_.hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetBlockFilterRequest::set_allocated_hash(std::string* hash) {
  if (has_hash_or_height()) {
    clear_hash_or_height();
  }
  if (hash != nullptr) {
    set_has_hash();
    hash_or_height_.hash_.UnsafeSetDefault(hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockFilterRequest.hash)
}

// int32 height = 2;
inline bool GetBlockFilterRequest::_internal_has_height() const {
  return hash_or_height_case() == kHeight;
}
inline void GetBlockFilterRequest::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void GetBlockFilterRequest::clear_height() {
  if (_internal_has_height()) {
    hash_or_height_.height_ = 0;
    clear_has_hash_or_height();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockFilterRequest::_internal_height() const {
  if (_internal_has_height()) {
    return hash_or_height_.height_;
  }
  return 0;
}
inline void GetBlockFilterRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_hash_or_height();
    set_has_height();
  }
  hash_or_height_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockFilterRequest::height() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockFilterRequest.height)
  return _internal_height();
}
inline void GetBlockFilterRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockFilterRequest.height)
}

inline bool GetBlockFilterRequest::has_hash_or_height() const {
  return hash_or_height_case() != HASH_OR_HEIGHT_NOT_SET;
}
inline void GetBlockFilterRequest::clear_has_hash_or_height() {
  _oneof_case_[0] = HASH_OR_HEIGHT_NOT_SET;
}
inline GetBlockFilterRequest::HashOrHeightCase GetBlockFilterRequest::hash_or_height_case() const {
  return GetBlockFilterRequest::HashOrHeightCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetBlockFilterResponse

// bytes filter = 1;
inline void GetBlockFilterResponse::clear_filter() {
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetBlockFilterResponse::filter() const {
  // @@protoc_insertion_point(field_get:pb.GetBlockFilterResponse.filter)
  return _internal_filter();
}
inline void GetBlockFilterResponse::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:pb.GetBlockFilterResponse.filter)
}
inline std::string* GetBlockFilterResponse::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:pb.GetBlockFilterResponse.filter)
  return _internal_mutable_filter();
}
inline const std::string& GetBlockFilterResponse::_internal_filter() const {
  return filter_.Get();
}
inline void GetBlockFilterResponse::_internal_set_filter(const std::string& value) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBlockFilterResponse::set_filter(std::string&& value) {
  
  filter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetBlockFilterResponse.filter)
}
inline void GetBlockFilterResponse::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetBlockFilterResponse.filter)
}
inline void GetBlockFilterResponse::set_filter(const void* value,
    size_t size) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetBlockFilterResponse.filter)
}
inline std::string* GetBlockFilterResponse::_internal_mutable_filter() {
  
  return filter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBlockFilterResponse::release_filter() {
  // @@protoc_insertion_point(field_release:pb.GetBlockFilterResponse.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBlockFilterResponse::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetBlockFilterResponse.filter)
}

// -------------------------------------------------------------------

// GetHeadersRequest

// repeated bytes block_locator_hashes = 1;
inline int GetHeadersRequest::_internal_block_locator_hashes_size() const {
  return block_locator_hashes_.size();
}
inline int GetHeadersRequest::block_locator_hashes_size() const {
  return _internal_block_locator_hashes_size();
}
inline void GetHeadersRequest::clear_block_locator_hashes() {
  block_locator_hashes_.Clear();
}
inline std::string* GetHeadersRequest::add_block_locator_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.GetHeadersRequest.block_locator_hashes)
  return _internal_add_block_locator_hashes();
}
inline const std::string& GetHeadersRequest::_internal_block_locator_hashes(int index) const {
  return block_locator_hashes_.Get(index);
}
inline const std::string& GetHeadersRequest::block_locator_hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetHeadersRequest.block_locator_hashes)
  return _internal_block_locator_hashes(index);
}
inline std::string* GetHeadersRequest::mutable_block_locator_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetHeadersRequest.block_locator_hashes)
  return block_locator_hashes_.Mutable(index);
}
inline void GetHeadersRequest::set_block_locator_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GetHeadersRequest.block_locator_hashes)
  block_locator_hashes_.Mutable(index)->assign(value);
}
inline void GetHeadersRequest::set_block_locator_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetHeadersRequest.block_locator_hashes)
  block_locator_hashes_.Mutable(index)->assign(std::move(value));
}
inline void GetHeadersRequest::set_block_locator_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_locator_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GetHeadersRequest.block_locator_hashes)
}
inline void GetHeadersRequest::set_block_locator_hashes(int index, const void* value, size_t size) {
  block_locator_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GetHeadersRequest.block_locator_hashes)
}
inline std::string* GetHeadersRequest::_internal_add_block_locator_hashes() {
  return block_locator_hashes_.Add();
}
inline void GetHeadersRequest::add_block_locator_hashes(const std::string& value) {
  block_locator_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GetHeadersRequest.block_locator_hashes)
}
inline void GetHeadersRequest::add_block_locator_hashes(std::string&& value) {
  block_locator_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GetHeadersRequest.block_locator_hashes)
}
inline void GetHeadersRequest::add_block_locator_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_locator_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GetHeadersRequest.block_locator_hashes)
}
inline void GetHeadersRequest::add_block_locator_hashes(const void* value, size_t size) {
  block_locator_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GetHeadersRequest.block_locator_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHeadersRequest::block_locator_hashes() const {
  // @@protoc_insertion_point(field_list:pb.GetHeadersRequest.block_locator_hashes)
  return block_locator_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHeadersRequest::mutable_block_locator_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetHeadersRequest.block_locator_hashes)
  return &block_locator_hashes_;
}

// bytes stop_hash = 2;
inline void GetHeadersRequest::clear_stop_hash() {
  stop_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHeadersRequest::stop_hash() const {
  // @@protoc_insertion_point(field_get:pb.GetHeadersRequest.stop_hash)
  return _internal_stop_hash();
}
inline void GetHeadersRequest::set_stop_hash(const std::string& value) {
  _internal_set_stop_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetHeadersRequest.stop_hash)
}
inline std::string* GetHeadersRequest::mutable_stop_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetHeadersRequest.stop_hash)
  return _internal_mutable_stop_hash();
}
inline const std::string& GetHeadersRequest::_internal_stop_hash() const {
  return stop_hash_.Get();
}
inline void GetHeadersRequest::_internal_set_stop_hash(const std::string& value) {
  
  stop_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHeadersRequest::set_stop_hash(std::string&& value) {
  
  stop_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetHeadersRequest.stop_hash)
}
inline void GetHeadersRequest::set_stop_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stop_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetHeadersRequest.stop_hash)
}
inline void GetHeadersRequest::set_stop_hash(const void* value,
    size_t size) {
  
  stop_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetHeadersRequest.stop_hash)
}
inline std::string* GetHeadersRequest::_internal_mutable_stop_hash() {
  
  return stop_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHeadersRequest::release_stop_hash() {
  // @@protoc_insertion_point(field_release:pb.GetHeadersRequest.stop_hash)
  return stop_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHeadersRequest::set_allocated_stop_hash(std::string* stop_hash) {
  if (stop_hash != nullptr) {
    
  } else {
    
  }
  stop_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetHeadersRequest.stop_hash)
}

// -------------------------------------------------------------------

// GetHeadersResponse

// repeated .pb.BlockInfo headers = 1;
inline int GetHeadersResponse::_internal_headers_size() const {
  return headers_.size();
}
inline int GetHeadersResponse::headers_size() const {
  return _internal_headers_size();
}
inline void GetHeadersResponse::clear_headers() {
  headers_.Clear();
}
inline ::pb::BlockInfo* GetHeadersResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetHeadersResponse.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BlockInfo >*
GetHeadersResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetHeadersResponse.headers)
  return &headers_;
}
inline const ::pb::BlockInfo& GetHeadersResponse::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::pb::BlockInfo& GetHeadersResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetHeadersResponse.headers)
  return _internal_headers(index);
}
inline ::pb::BlockInfo* GetHeadersResponse::_internal_add_headers() {
  return headers_.Add();
}
inline ::pb::BlockInfo* GetHeadersResponse::add_headers() {
  // @@protoc_insertion_point(field_add:pb.GetHeadersResponse.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BlockInfo >&
GetHeadersResponse::headers() const {
  // @@protoc_insertion_point(field_list:pb.GetHeadersResponse.headers)
  return headers_;
}

// -------------------------------------------------------------------

// GetTransactionRequest

// bytes hash = 1;
inline void GetTransactionRequest::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTransactionRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetTransactionRequest.hash)
  return _internal_hash();
}
inline void GetTransactionRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetTransactionRequest.hash)
}
inline std::string* GetTransactionRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetTransactionRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetTransactionRequest::_internal_hash() const {
  return hash_.Get();
}
inline void GetTransactionRequest::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTransactionRequest::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetTransactionRequest.hash)
}
inline void GetTransactionRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetTransactionRequest.hash)
}
inline void GetTransactionRequest::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetTransactionRequest.hash)
}
inline std::string* GetTransactionRequest::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTransactionRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetTransactionRequest.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTransactionRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetTransactionRequest.hash)
}

// -------------------------------------------------------------------

// GetTransactionResponse

// .pb.Transaction transaction = 1;
inline bool GetTransactionResponse::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool GetTransactionResponse::has_transaction() const {
  return _internal_has_transaction();
}
inline void GetTransactionResponse::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::pb::Transaction& GetTransactionResponse::_internal_transaction() const {
  const ::pb::Transaction* p = transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction*>(
      &::pb::_Transaction_default_instance_);
}
inline const ::pb::Transaction& GetTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:pb.GetTransactionResponse.transaction)
  return _internal_transaction();
}
inline void GetTransactionResponse::unsafe_arena_set_allocated_transaction(
    ::pb::Transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GetTransactionResponse.transaction)
}
inline ::pb::Transaction* GetTransactionResponse::release_transaction() {
  
  ::pb::Transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Transaction* GetTransactionResponse::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:pb.GetTransactionResponse.transaction)
  
  ::pb::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::pb::Transaction* GetTransactionResponse::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::pb::Transaction* GetTransactionResponse::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.GetTransactionResponse.transaction)
  return _internal_mutable_transaction();
}
inline void GetTransactionResponse::set_allocated_transaction(::pb::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:pb.GetTransactionResponse.transaction)
}

// -------------------------------------------------------------------

// GetRawTransactionRequest

// bytes hash = 1;
inline void GetRawTransactionRequest::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRawTransactionRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetRawTransactionRequest.hash)
  return _internal_hash();
}
inline void GetRawTransactionRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetRawTransactionRequest.hash)
}
inline std::string* GetRawTransactionRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetRawTransactionRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetRawTransactionRequest::_internal_hash() const {
  return hash_.Get();
}
inline void GetRawTransactionRequest::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRawTransactionRequest::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRawTransactionRequest.hash)
}
inline void GetRawTransactionRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetRawTransactionRequest.hash)
}
inline void GetRawTransactionRequest::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawTransactionRequest.hash)
}
inline std::string* GetRawTransactionRequest::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRawTransactionRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetRawTransactionRequest.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRawTransactionRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetRawTransactionRequest.hash)
}

// -------------------------------------------------------------------

// GetRawTransactionResponse

// bytes transaction = 1;
inline void GetRawTransactionResponse::clear_transaction() {
  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRawTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:pb.GetRawTransactionResponse.transaction)
  return _internal_transaction();
}
inline void GetRawTransactionResponse::set_transaction(const std::string& value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:pb.GetRawTransactionResponse.transaction)
}
inline std::string* GetRawTransactionResponse::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.GetRawTransactionResponse.transaction)
  return _internal_mutable_transaction();
}
inline const std::string& GetRawTransactionResponse::_internal_transaction() const {
  return transaction_.Get();
}
inline void GetRawTransactionResponse::_internal_set_transaction(const std::string& value) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRawTransactionResponse::set_transaction(std::string&& value) {
  
  transaction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRawTransactionResponse.transaction)
}
inline void GetRawTransactionResponse::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetRawTransactionResponse.transaction)
}
inline void GetRawTransactionResponse::set_transaction(const void* value,
    size_t size) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawTransactionResponse.transaction)
}
inline std::string* GetRawTransactionResponse::_internal_mutable_transaction() {
  
  return transaction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRawTransactionResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:pb.GetRawTransactionResponse.transaction)
  return transaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRawTransactionResponse::set_allocated_transaction(std::string* transaction) {
  if (transaction != nullptr) {
    
  } else {
    
  }
  transaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetRawTransactionResponse.transaction)
}

// -------------------------------------------------------------------

// GetAddressTransactionsRequest

// string address = 1;
inline void GetAddressTransactionsRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressTransactionsRequest::address() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsRequest.address)
  return _internal_address();
}
inline void GetAddressTransactionsRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressTransactionsRequest.address)
}
inline std::string* GetAddressTransactionsRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:pb.GetAddressTransactionsRequest.address)
  return _internal_mutable_address();
}
inline const std::string& GetAddressTransactionsRequest::_internal_address() const {
  return address_.Get();
}
inline void GetAddressTransactionsRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressTransactionsRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetAddressTransactionsRequest.address)
}
inline void GetAddressTransactionsRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetAddressTransactionsRequest.address)
}
inline void GetAddressTransactionsRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetAddressTransactionsRequest.address)
}
inline std::string* GetAddressTransactionsRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressTransactionsRequest::release_address() {
  // @@protoc_insertion_point(field_release:pb.GetAddressTransactionsRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressTransactionsRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetAddressTransactionsRequest.address)
}

// uint32 nb_skip = 2;
inline void GetAddressTransactionsRequest::clear_nb_skip() {
  nb_skip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddressTransactionsRequest::_internal_nb_skip() const {
  return nb_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddressTransactionsRequest::nb_skip() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsRequest.nb_skip)
  return _internal_nb_skip();
}
inline void GetAddressTransactionsRequest::_internal_set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nb_skip_ = value;
}
inline void GetAddressTransactionsRequest::set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nb_skip(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressTransactionsRequest.nb_skip)
}

// uint32 nb_fetch = 3;
inline void GetAddressTransactionsRequest::clear_nb_fetch() {
  nb_fetch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddressTransactionsRequest::_internal_nb_fetch() const {
  return nb_fetch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddressTransactionsRequest::nb_fetch() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsRequest.nb_fetch)
  return _internal_nb_fetch();
}
inline void GetAddressTransactionsRequest::_internal_set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nb_fetch_ = value;
}
inline void GetAddressTransactionsRequest::set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nb_fetch(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressTransactionsRequest.nb_fetch)
}

// bytes hash = 4;
inline bool GetAddressTransactionsRequest::_internal_has_hash() const {
  return start_block_case() == kHash;
}
inline void GetAddressTransactionsRequest::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void GetAddressTransactionsRequest::clear_hash() {
  if (_internal_has_hash()) {
    start_block_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_start_block();
  }
}
inline const std::string& GetAddressTransactionsRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsRequest.hash)
  return _internal_hash();
}
inline void GetAddressTransactionsRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressTransactionsRequest.hash)
}
inline std::string* GetAddressTransactionsRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetAddressTransactionsRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetAddressTransactionsRequest::_internal_hash() const {
  if (_internal_has_hash()) {
    return start_block_.hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetAddressTransactionsRequest::_internal_set_hash(const std::string& value) {
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressTransactionsRequest::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetAddressTransactionsRequest.hash)
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetAddressTransactionsRequest.hash)
}
inline void GetAddressTransactionsRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetAddressTransactionsRequest.hash)
}
inline void GetAddressTransactionsRequest::set_hash(const void* value,
                             size_t size) {
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetAddressTransactionsRequest.hash)
}
inline std::string* GetAddressTransactionsRequest::_internal_mutable_hash() {
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_block_.hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressTransactionsRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetAddressTransactionsRequest.hash)
  if (_internal_has_hash()) {
    clear_has_start_block();
    return start_block_.hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetAddressTransactionsRequest::set_allocated_hash(std::string* hash) {
  if (has_start_block()) {
    clear_start_block();
  }
  if (hash != nullptr) {
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetAddressTransactionsRequest.hash)
}

// int32 height = 5;
inline bool GetAddressTransactionsRequest::_internal_has_height() const {
  return start_block_case() == kHeight;
}
inline void GetAddressTransactionsRequest::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void GetAddressTransactionsRequest::clear_height() {
  if (_internal_has_height()) {
    start_block_.height_ = 0;
    clear_has_start_block();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAddressTransactionsRequest::_internal_height() const {
  if (_internal_has_height()) {
    return start_block_.height_;
  }
  return 0;
}
inline void GetAddressTransactionsRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_start_block();
    set_has_height();
  }
  start_block_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAddressTransactionsRequest::height() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsRequest.height)
  return _internal_height();
}
inline void GetAddressTransactionsRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressTransactionsRequest.height)
}

inline bool GetAddressTransactionsRequest::has_start_block() const {
  return start_block_case() != START_BLOCK_NOT_SET;
}
inline void GetAddressTransactionsRequest::clear_has_start_block() {
  _oneof_case_[0] = START_BLOCK_NOT_SET;
}
inline GetAddressTransactionsRequest::StartBlockCase GetAddressTransactionsRequest::start_block_case() const {
  return GetAddressTransactionsRequest::StartBlockCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetAddressTransactionsResponse

// repeated .pb.Transaction confirmed_transactions = 1;
inline int GetAddressTransactionsResponse::_internal_confirmed_transactions_size() const {
  return confirmed_transactions_.size();
}
inline int GetAddressTransactionsResponse::confirmed_transactions_size() const {
  return _internal_confirmed_transactions_size();
}
inline void GetAddressTransactionsResponse::clear_confirmed_transactions() {
  confirmed_transactions_.Clear();
}
inline ::pb::Transaction* GetAddressTransactionsResponse::mutable_confirmed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetAddressTransactionsResponse.confirmed_transactions)
  return confirmed_transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >*
GetAddressTransactionsResponse::mutable_confirmed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetAddressTransactionsResponse.confirmed_transactions)
  return &confirmed_transactions_;
}
inline const ::pb::Transaction& GetAddressTransactionsResponse::_internal_confirmed_transactions(int index) const {
  return confirmed_transactions_.Get(index);
}
inline const ::pb::Transaction& GetAddressTransactionsResponse::confirmed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsResponse.confirmed_transactions)
  return _internal_confirmed_transactions(index);
}
inline ::pb::Transaction* GetAddressTransactionsResponse::_internal_add_confirmed_transactions() {
  return confirmed_transactions_.Add();
}
inline ::pb::Transaction* GetAddressTransactionsResponse::add_confirmed_transactions() {
  // @@protoc_insertion_point(field_add:pb.GetAddressTransactionsResponse.confirmed_transactions)
  return _internal_add_confirmed_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction >&
GetAddressTransactionsResponse::confirmed_transactions() const {
  // @@protoc_insertion_point(field_list:pb.GetAddressTransactionsResponse.confirmed_transactions)
  return confirmed_transactions_;
}

// repeated .pb.MempoolTransaction unconfirmed_transactions = 2;
inline int GetAddressTransactionsResponse::_internal_unconfirmed_transactions_size() const {
  return unconfirmed_transactions_.size();
}
inline int GetAddressTransactionsResponse::unconfirmed_transactions_size() const {
  return _internal_unconfirmed_transactions_size();
}
inline void GetAddressTransactionsResponse::clear_unconfirmed_transactions() {
  unconfirmed_transactions_.Clear();
}
inline ::pb::MempoolTransaction* GetAddressTransactionsResponse::mutable_unconfirmed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetAddressTransactionsResponse.unconfirmed_transactions)
  return unconfirmed_transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MempoolTransaction >*
GetAddressTransactionsResponse::mutable_unconfirmed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetAddressTransactionsResponse.unconfirmed_transactions)
  return &unconfirmed_transactions_;
}
inline const ::pb::MempoolTransaction& GetAddressTransactionsResponse::_internal_unconfirmed_transactions(int index) const {
  return unconfirmed_transactions_.Get(index);
}
inline const ::pb::MempoolTransaction& GetAddressTransactionsResponse::unconfirmed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetAddressTransactionsResponse.unconfirmed_transactions)
  return _internal_unconfirmed_transactions(index);
}
inline ::pb::MempoolTransaction* GetAddressTransactionsResponse::_internal_add_unconfirmed_transactions() {
  return unconfirmed_transactions_.Add();
}
inline ::pb::MempoolTransaction* GetAddressTransactionsResponse::add_unconfirmed_transactions() {
  // @@protoc_insertion_point(field_add:pb.GetAddressTransactionsResponse.unconfirmed_transactions)
  return _internal_add_unconfirmed_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MempoolTransaction >&
GetAddressTransactionsResponse::unconfirmed_transactions() const {
  // @@protoc_insertion_point(field_list:pb.GetAddressTransactionsResponse.unconfirmed_transactions)
  return unconfirmed_transactions_;
}

// -------------------------------------------------------------------

// GetRawAddressTransactionsRequest

// string address = 1;
inline void GetRawAddressTransactionsRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRawAddressTransactionsRequest::address() const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsRequest.address)
  return _internal_address();
}
inline void GetRawAddressTransactionsRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsRequest.address)
}
inline std::string* GetRawAddressTransactionsRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:pb.GetRawAddressTransactionsRequest.address)
  return _internal_mutable_address();
}
inline const std::string& GetRawAddressTransactionsRequest::_internal_address() const {
  return address_.Get();
}
inline void GetRawAddressTransactionsRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRawAddressTransactionsRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRawAddressTransactionsRequest.address)
}
inline void GetRawAddressTransactionsRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetRawAddressTransactionsRequest.address)
}
inline void GetRawAddressTransactionsRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawAddressTransactionsRequest.address)
}
inline std::string* GetRawAddressTransactionsRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRawAddressTransactionsRequest::release_address() {
  // @@protoc_insertion_point(field_release:pb.GetRawAddressTransactionsRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRawAddressTransactionsRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetRawAddressTransactionsRequest.address)
}

// uint32 nb_skip = 2;
inline void GetRawAddressTransactionsRequest::clear_nb_skip() {
  nb_skip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawAddressTransactionsRequest::_internal_nb_skip() const {
  return nb_skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawAddressTransactionsRequest::nb_skip() const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsRequest.nb_skip)
  return _internal_nb_skip();
}
inline void GetRawAddressTransactionsRequest::_internal_set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nb_skip_ = value;
}
inline void GetRawAddressTransactionsRequest::set_nb_skip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nb_skip(value);
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsRequest.nb_skip)
}

// uint32 nb_fetch = 3;
inline void GetRawAddressTransactionsRequest::clear_nb_fetch() {
  nb_fetch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawAddressTransactionsRequest::_internal_nb_fetch() const {
  return nb_fetch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawAddressTransactionsRequest::nb_fetch() const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsRequest.nb_fetch)
  return _internal_nb_fetch();
}
inline void GetRawAddressTransactionsRequest::_internal_set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nb_fetch_ = value;
}
inline void GetRawAddressTransactionsRequest::set_nb_fetch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nb_fetch(value);
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsRequest.nb_fetch)
}

// bytes hash = 4;
inline bool GetRawAddressTransactionsRequest::_internal_has_hash() const {
  return start_block_case() == kHash;
}
inline void GetRawAddressTransactionsRequest::set_has_hash() {
  _oneof_case_[0] = kHash;
}
inline void GetRawAddressTransactionsRequest::clear_hash() {
  if (_internal_has_hash()) {
    start_block_.hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_start_block();
  }
}
inline const std::string& GetRawAddressTransactionsRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsRequest.hash)
  return _internal_hash();
}
inline void GetRawAddressTransactionsRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsRequest.hash)
}
inline std::string* GetRawAddressTransactionsRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetRawAddressTransactionsRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetRawAddressTransactionsRequest::_internal_hash() const {
  if (_internal_has_hash()) {
    return start_block_.hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetRawAddressTransactionsRequest::_internal_set_hash(const std::string& value) {
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRawAddressTransactionsRequest::set_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsRequest.hash)
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetRawAddressTransactionsRequest.hash)
}
inline void GetRawAddressTransactionsRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetRawAddressTransactionsRequest.hash)
}
inline void GetRawAddressTransactionsRequest::set_hash(const void* value,
                             size_t size) {
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  start_block_.hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawAddressTransactionsRequest.hash)
}
inline std::string* GetRawAddressTransactionsRequest::_internal_mutable_hash() {
  if (!_internal_has_hash()) {
    clear_start_block();
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return start_block_.hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRawAddressTransactionsRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetRawAddressTransactionsRequest.hash)
  if (_internal_has_hash()) {
    clear_has_start_block();
    return start_block_.hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetRawAddressTransactionsRequest::set_allocated_hash(std::string* hash) {
  if (has_start_block()) {
    clear_start_block();
  }
  if (hash != nullptr) {
    set_has_hash();
    start_block_.hash_.UnsafeSetDefault(hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.GetRawAddressTransactionsRequest.hash)
}

// int32 height = 5;
inline bool GetRawAddressTransactionsRequest::_internal_has_height() const {
  return start_block_case() == kHeight;
}
inline void GetRawAddressTransactionsRequest::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void GetRawAddressTransactionsRequest::clear_height() {
  if (_internal_has_height()) {
    start_block_.height_ = 0;
    clear_has_start_block();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRawAddressTransactionsRequest::_internal_height() const {
  if (_internal_has_height()) {
    return start_block_.height_;
  }
  return 0;
}
inline void GetRawAddressTransactionsRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_start_block();
    set_has_height();
  }
  start_block_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRawAddressTransactionsRequest::height() const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsRequest.height)
  return _internal_height();
}
inline void GetRawAddressTransactionsRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsRequest.height)
}

inline bool GetRawAddressTransactionsRequest::has_start_block() const {
  return start_block_case() != START_BLOCK_NOT_SET;
}
inline void GetRawAddressTransactionsRequest::clear_has_start_block() {
  _oneof_case_[0] = START_BLOCK_NOT_SET;
}
inline GetRawAddressTransactionsRequest::StartBlockCase GetRawAddressTransactionsRequest::start_block_case() const {
  return GetRawAddressTransactionsRequest::StartBlockCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetRawAddressTransactionsResponse

// repeated bytes confirmed_transactions = 1;
inline int GetRawAddressTransactionsResponse::_internal_confirmed_transactions_size() const {
  return confirmed_transactions_.size();
}
inline int GetRawAddressTransactionsResponse::confirmed_transactions_size() const {
  return _internal_confirmed_transactions_size();
}
inline void GetRawAddressTransactionsResponse::clear_confirmed_transactions() {
  confirmed_transactions_.Clear();
}
inline std::string* GetRawAddressTransactionsResponse::add_confirmed_transactions() {
  // @@protoc_insertion_point(field_add_mutable:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  return _internal_add_confirmed_transactions();
}
inline const std::string& GetRawAddressTransactionsResponse::_internal_confirmed_transactions(int index) const {
  return confirmed_transactions_.Get(index);
}
inline const std::string& GetRawAddressTransactionsResponse::confirmed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  return _internal_confirmed_transactions(index);
}
inline std::string* GetRawAddressTransactionsResponse::mutable_confirmed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  return confirmed_transactions_.Mutable(index);
}
inline void GetRawAddressTransactionsResponse::set_confirmed_transactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  confirmed_transactions_.Mutable(index)->assign(value);
}
inline void GetRawAddressTransactionsResponse::set_confirmed_transactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  confirmed_transactions_.Mutable(index)->assign(std::move(value));
}
inline void GetRawAddressTransactionsResponse::set_confirmed_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  confirmed_transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::set_confirmed_transactions(int index, const void* value, size_t size) {
  confirmed_transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
}
inline std::string* GetRawAddressTransactionsResponse::_internal_add_confirmed_transactions() {
  return confirmed_transactions_.Add();
}
inline void GetRawAddressTransactionsResponse::add_confirmed_transactions(const std::string& value) {
  confirmed_transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::add_confirmed_transactions(std::string&& value) {
  confirmed_transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::add_confirmed_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  confirmed_transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::add_confirmed_transactions(const void* value, size_t size) {
  confirmed_transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRawAddressTransactionsResponse::confirmed_transactions() const {
  // @@protoc_insertion_point(field_list:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  return confirmed_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRawAddressTransactionsResponse::mutable_confirmed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetRawAddressTransactionsResponse.confirmed_transactions)
  return &confirmed_transactions_;
}

// repeated bytes unconfirmed_transactions = 2;
inline int GetRawAddressTransactionsResponse::_internal_unconfirmed_transactions_size() const {
  return unconfirmed_transactions_.size();
}
inline int GetRawAddressTransactionsResponse::unconfirmed_transactions_size() const {
  return _internal_unconfirmed_transactions_size();
}
inline void GetRawAddressTransactionsResponse::clear_unconfirmed_transactions() {
  unconfirmed_transactions_.Clear();
}
inline std::string* GetRawAddressTransactionsResponse::add_unconfirmed_transactions() {
  // @@protoc_insertion_point(field_add_mutable:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  return _internal_add_unconfirmed_transactions();
}
inline const std::string& GetRawAddressTransactionsResponse::_internal_unconfirmed_transactions(int index) const {
  return unconfirmed_transactions_.Get(index);
}
inline const std::string& GetRawAddressTransactionsResponse::unconfirmed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  return _internal_unconfirmed_transactions(index);
}
inline std::string* GetRawAddressTransactionsResponse::mutable_unconfirmed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  return unconfirmed_transactions_.Mutable(index);
}
inline void GetRawAddressTransactionsResponse::set_unconfirmed_transactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  unconfirmed_transactions_.Mutable(index)->assign(value);
}
inline void GetRawAddressTransactionsResponse::set_unconfirmed_transactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  unconfirmed_transactions_.Mutable(index)->assign(std::move(value));
}
inline void GetRawAddressTransactionsResponse::set_unconfirmed_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unconfirmed_transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::set_unconfirmed_transactions(int index, const void* value, size_t size) {
  unconfirmed_transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
}
inline std::string* GetRawAddressTransactionsResponse::_internal_add_unconfirmed_transactions() {
  return unconfirmed_transactions_.Add();
}
inline void GetRawAddressTransactionsResponse::add_unconfirmed_transactions(const std::string& value) {
  unconfirmed_transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::add_unconfirmed_transactions(std::string&& value) {
  unconfirmed_transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::add_unconfirmed_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unconfirmed_transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
}
inline void GetRawAddressTransactionsResponse::add_unconfirmed_transactions(const void* value, size_t size) {
  unconfirmed_transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRawAddressTransactionsResponse::unconfirmed_transactions() const {
  // @@protoc_insertion_point(field_list:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  return unconfirmed_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRawAddressTransactionsResponse::mutable_unconfirmed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetRawAddressTransactionsResponse.unconfirmed_transactions)
  return &unconfirmed_transactions_;
}

// -------------------------------------------------------------------

// GetAddressUnspentOutputsRequest

// string address = 1;
inline void GetAddressUnspentOutputsRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAddressUnspentOutputsRequest::address() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressUnspentOutputsRequest.address)
  return _internal_address();
}
inline void GetAddressUnspentOutputsRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressUnspentOutputsRequest.address)
}
inline std::string* GetAddressUnspentOutputsRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:pb.GetAddressUnspentOutputsRequest.address)
  return _internal_mutable_address();
}
inline const std::string& GetAddressUnspentOutputsRequest::_internal_address() const {
  return address_.Get();
}
inline void GetAddressUnspentOutputsRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAddressUnspentOutputsRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetAddressUnspentOutputsRequest.address)
}
inline void GetAddressUnspentOutputsRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetAddressUnspentOutputsRequest.address)
}
inline void GetAddressUnspentOutputsRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetAddressUnspentOutputsRequest.address)
}
inline std::string* GetAddressUnspentOutputsRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAddressUnspentOutputsRequest::release_address() {
  // @@protoc_insertion_point(field_release:pb.GetAddressUnspentOutputsRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAddressUnspentOutputsRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetAddressUnspentOutputsRequest.address)
}

// bool include_mempool = 2;
inline void GetAddressUnspentOutputsRequest::clear_include_mempool() {
  include_mempool_ = false;
}
inline bool GetAddressUnspentOutputsRequest::_internal_include_mempool() const {
  return include_mempool_;
}
inline bool GetAddressUnspentOutputsRequest::include_mempool() const {
  // @@protoc_insertion_point(field_get:pb.GetAddressUnspentOutputsRequest.include_mempool)
  return _internal_include_mempool();
}
inline void GetAddressUnspentOutputsRequest::_internal_set_include_mempool(bool value) {
  
  include_mempool_ = value;
}
inline void GetAddressUnspentOutputsRequest::set_include_mempool(bool value) {
  _internal_set_include_mempool(value);
  // @@protoc_insertion_point(field_set:pb.GetAddressUnspentOutputsRequest.include_mempool)
}

// -------------------------------------------------------------------

// GetAddressUnspentOutputsResponse

// repeated .pb.UnspentOutput outputs = 1;
inline int GetAddressUnspentOutputsResponse::_internal_outputs_size() const {
  return outputs_.size();
}
inline int GetAddressUnspentOutputsResponse::outputs_size() const {
  return _internal_outputs_size();
}
inline void GetAddressUnspentOutputsResponse::clear_outputs() {
  outputs_.Clear();
}
inline ::pb::UnspentOutput* GetAddressUnspentOutputsResponse::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetAddressUnspentOutputsResponse.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::UnspentOutput >*
GetAddressUnspentOutputsResponse::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetAddressUnspentOutputsResponse.outputs)
  return &outputs_;
}
inline const ::pb::UnspentOutput& GetAddressUnspentOutputsResponse::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::pb::UnspentOutput& GetAddressUnspentOutputsResponse::outputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetAddressUnspentOutputsResponse.outputs)
  return _internal_outputs(index);
}
inline ::pb::UnspentOutput* GetAddressUnspentOutputsResponse::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::pb::UnspentOutput* GetAddressUnspentOutputsResponse::add_outputs() {
  // @@protoc_insertion_point(field_add:pb.GetAddressUnspentOutputsResponse.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::UnspentOutput >&
GetAddressUnspentOutputsResponse::outputs() const {
  // @@protoc_insertion_point(field_list:pb.GetAddressUnspentOutputsResponse.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// GetUnspentOutputRequest

// bytes hash = 1;
inline void GetUnspentOutputRequest::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUnspentOutputRequest::hash() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputRequest.hash)
  return _internal_hash();
}
inline void GetUnspentOutputRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputRequest.hash)
}
inline std::string* GetUnspentOutputRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetUnspentOutputRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetUnspentOutputRequest::_internal_hash() const {
  return hash_.Get();
}
inline void GetUnspentOutputRequest::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUnspentOutputRequest::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetUnspentOutputRequest.hash)
}
inline void GetUnspentOutputRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetUnspentOutputRequest.hash)
}
inline void GetUnspentOutputRequest::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetUnspentOutputRequest.hash)
}
inline std::string* GetUnspentOutputRequest::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUnspentOutputRequest::release_hash() {
  // @@protoc_insertion_point(field_release:pb.GetUnspentOutputRequest.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUnspentOutputRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetUnspentOutputRequest.hash)
}

// uint32 index = 2;
inline void GetUnspentOutputRequest::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetUnspentOutputRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetUnspentOutputRequest::index() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputRequest.index)
  return _internal_index();
}
inline void GetUnspentOutputRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void GetUnspentOutputRequest::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputRequest.index)
}

// bool include_mempool = 3;
inline void GetUnspentOutputRequest::clear_include_mempool() {
  include_mempool_ = false;
}
inline bool GetUnspentOutputRequest::_internal_include_mempool() const {
  return include_mempool_;
}
inline bool GetUnspentOutputRequest::include_mempool() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputRequest.include_mempool)
  return _internal_include_mempool();
}
inline void GetUnspentOutputRequest::_internal_set_include_mempool(bool value) {
  
  include_mempool_ = value;
}
inline void GetUnspentOutputRequest::set_include_mempool(bool value) {
  _internal_set_include_mempool(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputRequest.include_mempool)
}

// -------------------------------------------------------------------

// GetUnspentOutputResponse

// .pb.Transaction.Input.Outpoint outpoint = 1;
inline bool GetUnspentOutputResponse::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool GetUnspentOutputResponse::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void GetUnspentOutputResponse::clear_outpoint() {
  if (GetArena() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::pb::Transaction_Input_Outpoint& GetUnspentOutputResponse::_internal_outpoint() const {
  const ::pb::Transaction_Input_Outpoint* p = outpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction_Input_Outpoint*>(
      &::pb::_Transaction_Input_Outpoint_default_instance_);
}
inline const ::pb::Transaction_Input_Outpoint& GetUnspentOutputResponse::outpoint() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputResponse.outpoint)
  return _internal_outpoint();
}
inline void GetUnspentOutputResponse::unsafe_arena_set_allocated_outpoint(
    ::pb::Transaction_Input_Outpoint* outpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outpoint_);
  }
  outpoint_ = outpoint;
  if (outpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GetUnspentOutputResponse.outpoint)
}
inline ::pb::Transaction_Input_Outpoint* GetUnspentOutputResponse::release_outpoint() {
  
  ::pb::Transaction_Input_Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Transaction_Input_Outpoint* GetUnspentOutputResponse::unsafe_arena_release_outpoint() {
  // @@protoc_insertion_point(field_release:pb.GetUnspentOutputResponse.outpoint)
  
  ::pb::Transaction_Input_Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::pb::Transaction_Input_Outpoint* GetUnspentOutputResponse::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction_Input_Outpoint>(GetArena());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::pb::Transaction_Input_Outpoint* GetUnspentOutputResponse::mutable_outpoint() {
  // @@protoc_insertion_point(field_mutable:pb.GetUnspentOutputResponse.outpoint)
  return _internal_mutable_outpoint();
}
inline void GetUnspentOutputResponse::set_allocated_outpoint(::pb::Transaction_Input_Outpoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outpoint);
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:pb.GetUnspentOutputResponse.outpoint)
}

// bytes pubkey_script = 2;
inline void GetUnspentOutputResponse::clear_pubkey_script() {
  pubkey_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUnspentOutputResponse::pubkey_script() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputResponse.pubkey_script)
  return _internal_pubkey_script();
}
inline void GetUnspentOutputResponse::set_pubkey_script(const std::string& value) {
  _internal_set_pubkey_script(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputResponse.pubkey_script)
}
inline std::string* GetUnspentOutputResponse::mutable_pubkey_script() {
  // @@protoc_insertion_point(field_mutable:pb.GetUnspentOutputResponse.pubkey_script)
  return _internal_mutable_pubkey_script();
}
inline const std::string& GetUnspentOutputResponse::_internal_pubkey_script() const {
  return pubkey_script_.Get();
}
inline void GetUnspentOutputResponse::_internal_set_pubkey_script(const std::string& value) {
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUnspentOutputResponse::set_pubkey_script(std::string&& value) {
  
  pubkey_script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetUnspentOutputResponse.pubkey_script)
}
inline void GetUnspentOutputResponse::set_pubkey_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetUnspentOutputResponse.pubkey_script)
}
inline void GetUnspentOutputResponse::set_pubkey_script(const void* value,
    size_t size) {
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetUnspentOutputResponse.pubkey_script)
}
inline std::string* GetUnspentOutputResponse::_internal_mutable_pubkey_script() {
  
  return pubkey_script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUnspentOutputResponse::release_pubkey_script() {
  // @@protoc_insertion_point(field_release:pb.GetUnspentOutputResponse.pubkey_script)
  return pubkey_script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUnspentOutputResponse::set_allocated_pubkey_script(std::string* pubkey_script) {
  if (pubkey_script != nullptr) {
    
  } else {
    
  }
  pubkey_script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey_script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetUnspentOutputResponse.pubkey_script)
}

// int64 value = 3;
inline void GetUnspentOutputResponse::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetUnspentOutputResponse::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetUnspentOutputResponse::value() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputResponse.value)
  return _internal_value();
}
inline void GetUnspentOutputResponse::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void GetUnspentOutputResponse::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputResponse.value)
}

// bool is_coinbase = 4;
inline void GetUnspentOutputResponse::clear_is_coinbase() {
  is_coinbase_ = false;
}
inline bool GetUnspentOutputResponse::_internal_is_coinbase() const {
  return is_coinbase_;
}
inline bool GetUnspentOutputResponse::is_coinbase() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputResponse.is_coinbase)
  return _internal_is_coinbase();
}
inline void GetUnspentOutputResponse::_internal_set_is_coinbase(bool value) {
  
  is_coinbase_ = value;
}
inline void GetUnspentOutputResponse::set_is_coinbase(bool value) {
  _internal_set_is_coinbase(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputResponse.is_coinbase)
}

// int32 block_height = 5;
inline void GetUnspentOutputResponse::clear_block_height() {
  block_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUnspentOutputResponse::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUnspentOutputResponse::block_height() const {
  // @@protoc_insertion_point(field_get:pb.GetUnspentOutputResponse.block_height)
  return _internal_block_height();
}
inline void GetUnspentOutputResponse::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_height_ = value;
}
inline void GetUnspentOutputResponse::set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:pb.GetUnspentOutputResponse.block_height)
}

// -------------------------------------------------------------------

// GetMerkleProofRequest

// bytes transaction_hash = 1;
inline void GetMerkleProofRequest::clear_transaction_hash() {
  transaction_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMerkleProofRequest::transaction_hash() const {
  // @@protoc_insertion_point(field_get:pb.GetMerkleProofRequest.transaction_hash)
  return _internal_transaction_hash();
}
inline void GetMerkleProofRequest::set_transaction_hash(const std::string& value) {
  _internal_set_transaction_hash(value);
  // @@protoc_insertion_point(field_set:pb.GetMerkleProofRequest.transaction_hash)
}
inline std::string* GetMerkleProofRequest::mutable_transaction_hash() {
  // @@protoc_insertion_point(field_mutable:pb.GetMerkleProofRequest.transaction_hash)
  return _internal_mutable_transaction_hash();
}
inline const std::string& GetMerkleProofRequest::_internal_transaction_hash() const {
  return transaction_hash_.Get();
}
inline void GetMerkleProofRequest::_internal_set_transaction_hash(const std::string& value) {
  
  transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMerkleProofRequest::set_transaction_hash(std::string&& value) {
  
  transaction_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetMerkleProofRequest.transaction_hash)
}
inline void GetMerkleProofRequest::set_transaction_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetMerkleProofRequest.transaction_hash)
}
inline void GetMerkleProofRequest::set_transaction_hash(const void* value,
    size_t size) {
  
  transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetMerkleProofRequest.transaction_hash)
}
inline std::string* GetMerkleProofRequest::_internal_mutable_transaction_hash() {
  
  return transaction_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMerkleProofRequest::release_transaction_hash() {
  // @@protoc_insertion_point(field_release:pb.GetMerkleProofRequest.transaction_hash)
  return transaction_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMerkleProofRequest::set_allocated_transaction_hash(std::string* transaction_hash) {
  if (transaction_hash != nullptr) {
    
  } else {
    
  }
  transaction_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetMerkleProofRequest.transaction_hash)
}

// -------------------------------------------------------------------

// GetMerkleProofResponse

// .pb.BlockInfo block = 1;
inline bool GetMerkleProofResponse::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetMerkleProofResponse::has_block() const {
  return _internal_has_block();
}
inline void GetMerkleProofResponse::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::pb::BlockInfo& GetMerkleProofResponse::_internal_block() const {
  const ::pb::BlockInfo* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::BlockInfo*>(
      &::pb::_BlockInfo_default_instance_);
}
inline const ::pb::BlockInfo& GetMerkleProofResponse::block() const {
  // @@protoc_insertion_point(field_get:pb.GetMerkleProofResponse.block)
  return _internal_block();
}
inline void GetMerkleProofResponse::unsafe_arena_set_allocated_block(
    ::pb::BlockInfo* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.GetMerkleProofResponse.block)
}
inline ::pb::BlockInfo* GetMerkleProofResponse::release_block() {
  
  ::pb::BlockInfo* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::BlockInfo* GetMerkleProofResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:pb.GetMerkleProofResponse.block)
  
  ::pb::BlockInfo* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::pb::BlockInfo* GetMerkleProofResponse::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::BlockInfo>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::pb::BlockInfo* GetMerkleProofResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:pb.GetMerkleProofResponse.block)
  return _internal_mutable_block();
}
inline void GetMerkleProofResponse::set_allocated_block(::pb::BlockInfo* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:pb.GetMerkleProofResponse.block)
}

// repeated bytes hashes = 2;
inline int GetMerkleProofResponse::_internal_hashes_size() const {
  return hashes_.size();
}
inline int GetMerkleProofResponse::hashes_size() const {
  return _internal_hashes_size();
}
inline void GetMerkleProofResponse::clear_hashes() {
  hashes_.Clear();
}
inline std::string* GetMerkleProofResponse::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:pb.GetMerkleProofResponse.hashes)
  return _internal_add_hashes();
}
inline const std::string& GetMerkleProofResponse::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const std::string& GetMerkleProofResponse::hashes(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetMerkleProofResponse.hashes)
  return _internal_hashes(index);
}
inline std::string* GetMerkleProofResponse::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetMerkleProofResponse.hashes)
  return hashes_.Mutable(index);
}
inline void GetMerkleProofResponse::set_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GetMerkleProofResponse.hashes)
  hashes_.Mutable(index)->assign(value);
}
inline void GetMerkleProofResponse::set_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GetMerkleProofResponse.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
inline void GetMerkleProofResponse::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GetMerkleProofResponse.hashes)
}
inline void GetMerkleProofResponse::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GetMerkleProofResponse.hashes)
}
inline std::string* GetMerkleProofResponse::_internal_add_hashes() {
  return hashes_.Add();
}
inline void GetMerkleProofResponse::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GetMerkleProofResponse.hashes)
}
inline void GetMerkleProofResponse::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GetMerkleProofResponse.hashes)
}
inline void GetMerkleProofResponse::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GetMerkleProofResponse.hashes)
}
inline void GetMerkleProofResponse::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GetMerkleProofResponse.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMerkleProofResponse::hashes() const {
  // @@protoc_insertion_point(field_list:pb.GetMerkleProofResponse.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMerkleProofResponse::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetMerkleProofResponse.hashes)
  return &hashes_;
}

// bytes flags = 3;
inline void GetMerkleProofResponse::clear_flags() {
  flags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMerkleProofResponse::flags() const {
  // @@protoc_insertion_point(field_get:pb.GetMerkleProofResponse.flags)
  return _internal_flags();
}
inline void GetMerkleProofResponse::set_flags(const std::string& value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:pb.GetMerkleProofResponse.flags)
}
inline std::string* GetMerkleProofResponse::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:pb.GetMerkleProofResponse.flags)
  return _internal_mutable_flags();
}
inline const std::string& GetMerkleProofResponse::_internal_flags() const {
  return flags_.Get();
}
inline void GetMerkleProofResponse::_internal_set_flags(const std::string& value) {
  
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMerkleProofResponse::set_flags(std::string&& value) {
  
  flags_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.GetMerkleProofResponse.flags)
}
inline void GetMerkleProofResponse::set_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.GetMerkleProofResponse.flags)
}
inline void GetMerkleProofResponse::set_flags(const void* value,
    size_t size) {
  
  flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.GetMerkleProofResponse.flags)
}
inline std::string* GetMerkleProofResponse::_internal_mutable_flags() {
  
  return flags_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMerkleProofResponse::release_flags() {
  // @@protoc_insertion_point(field_release:pb.GetMerkleProofResponse.flags)
  return flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMerkleProofResponse::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.GetMerkleProofResponse.flags)
}

// -------------------------------------------------------------------

// SubmitTransactionRequest

// bytes transaction = 1;
inline void SubmitTransactionRequest::clear_transaction() {
  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmitTransactionRequest::transaction() const {
  // @@protoc_insertion_point(field_get:pb.SubmitTransactionRequest.transaction)
  return _internal_transaction();
}
inline void SubmitTransactionRequest::set_transaction(const std::string& value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:pb.SubmitTransactionRequest.transaction)
}
inline std::string* SubmitTransactionRequest::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.SubmitTransactionRequest.transaction)
  return _internal_mutable_transaction();
}
inline const std::string& SubmitTransactionRequest::_internal_transaction() const {
  return transaction_.Get();
}
inline void SubmitTransactionRequest::_internal_set_transaction(const std::string& value) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmitTransactionRequest::set_transaction(std::string&& value) {
  
  transaction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SubmitTransactionRequest.transaction)
}
inline void SubmitTransactionRequest::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SubmitTransactionRequest.transaction)
}
inline void SubmitTransactionRequest::set_transaction(const void* value,
    size_t size) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SubmitTransactionRequest.transaction)
}
inline std::string* SubmitTransactionRequest::_internal_mutable_transaction() {
  
  return transaction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmitTransactionRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:pb.SubmitTransactionRequest.transaction)
  return transaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitTransactionRequest::set_allocated_transaction(std::string* transaction) {
  if (transaction != nullptr) {
    
  } else {
    
  }
  transaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SubmitTransactionRequest.transaction)
}

// -------------------------------------------------------------------

// SubmitTransactionResponse

// bytes hash = 1;
inline void SubmitTransactionResponse::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubmitTransactionResponse::hash() const {
  // @@protoc_insertion_point(field_get:pb.SubmitTransactionResponse.hash)
  return _internal_hash();
}
inline void SubmitTransactionResponse::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.SubmitTransactionResponse.hash)
}
inline std::string* SubmitTransactionResponse::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.SubmitTransactionResponse.hash)
  return _internal_mutable_hash();
}
inline const std::string& SubmitTransactionResponse::_internal_hash() const {
  return hash_.Get();
}
inline void SubmitTransactionResponse::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubmitTransactionResponse::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.SubmitTransactionResponse.hash)
}
inline void SubmitTransactionResponse::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.SubmitTransactionResponse.hash)
}
inline void SubmitTransactionResponse::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.SubmitTransactionResponse.hash)
}
inline std::string* SubmitTransactionResponse::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubmitTransactionResponse::release_hash() {
  // @@protoc_insertion_point(field_release:pb.SubmitTransactionResponse.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubmitTransactionResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.SubmitTransactionResponse.hash)
}

// -------------------------------------------------------------------

// SubscribeTransactionsRequest

// .pb.TransactionFilter subscribe = 1;
inline bool SubscribeTransactionsRequest::_internal_has_subscribe() const {
  return this != internal_default_instance() && subscribe_ != nullptr;
}
inline bool SubscribeTransactionsRequest::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void SubscribeTransactionsRequest::clear_subscribe() {
  if (GetArena() == nullptr && subscribe_ != nullptr) {
    delete subscribe_;
  }
  subscribe_ = nullptr;
}
inline const ::pb::TransactionFilter& SubscribeTransactionsRequest::_internal_subscribe() const {
  const ::pb::TransactionFilter* p = subscribe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::TransactionFilter*>(
      &::pb::_TransactionFilter_default_instance_);
}
inline const ::pb::TransactionFilter& SubscribeTransactionsRequest::subscribe() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeTransactionsRequest.subscribe)
  return _internal_subscribe();
}
inline void SubscribeTransactionsRequest::unsafe_arena_set_allocated_subscribe(
    ::pb::TransactionFilter* subscribe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscribe_);
  }
  subscribe_ = subscribe;
  if (subscribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SubscribeTransactionsRequest.subscribe)
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::release_subscribe() {
  
  ::pb::TransactionFilter* temp = subscribe_;
  subscribe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_release:pb.SubscribeTransactionsRequest.subscribe)
  
  ::pb::TransactionFilter* temp = subscribe_;
  subscribe_ = nullptr;
  return temp;
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::_internal_mutable_subscribe() {
  
  if (subscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::TransactionFilter>(GetArena());
    subscribe_ = p;
  }
  return subscribe_;
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::mutable_subscribe() {
  // @@protoc_insertion_point(field_mutable:pb.SubscribeTransactionsRequest.subscribe)
  return _internal_mutable_subscribe();
}
inline void SubscribeTransactionsRequest::set_allocated_subscribe(::pb::TransactionFilter* subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subscribe_;
  }
  if (subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscribe);
    if (message_arena != submessage_arena) {
      subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    
  } else {
    
  }
  subscribe_ = subscribe;
  // @@protoc_insertion_point(field_set_allocated:pb.SubscribeTransactionsRequest.subscribe)
}

// .pb.TransactionFilter unsubscribe = 2;
inline bool SubscribeTransactionsRequest::_internal_has_unsubscribe() const {
  return this != internal_default_instance() && unsubscribe_ != nullptr;
}
inline bool SubscribeTransactionsRequest::has_unsubscribe() const {
  return _internal_has_unsubscribe();
}
inline void SubscribeTransactionsRequest::clear_unsubscribe() {
  if (GetArena() == nullptr && unsubscribe_ != nullptr) {
    delete unsubscribe_;
  }
  unsubscribe_ = nullptr;
}
inline const ::pb::TransactionFilter& SubscribeTransactionsRequest::_internal_unsubscribe() const {
  const ::pb::TransactionFilter* p = unsubscribe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::TransactionFilter*>(
      &::pb::_TransactionFilter_default_instance_);
}
inline const ::pb::TransactionFilter& SubscribeTransactionsRequest::unsubscribe() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeTransactionsRequest.unsubscribe)
  return _internal_unsubscribe();
}
inline void SubscribeTransactionsRequest::unsafe_arena_set_allocated_unsubscribe(
    ::pb::TransactionFilter* unsubscribe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsubscribe_);
  }
  unsubscribe_ = unsubscribe;
  if (unsubscribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.SubscribeTransactionsRequest.unsubscribe)
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::release_unsubscribe() {
  
  ::pb::TransactionFilter* temp = unsubscribe_;
  unsubscribe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::unsafe_arena_release_unsubscribe() {
  // @@protoc_insertion_point(field_release:pb.SubscribeTransactionsRequest.unsubscribe)
  
  ::pb::TransactionFilter* temp = unsubscribe_;
  unsubscribe_ = nullptr;
  return temp;
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::_internal_mutable_unsubscribe() {
  
  if (unsubscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::TransactionFilter>(GetArena());
    unsubscribe_ = p;
  }
  return unsubscribe_;
}
inline ::pb::TransactionFilter* SubscribeTransactionsRequest::mutable_unsubscribe() {
  // @@protoc_insertion_point(field_mutable:pb.SubscribeTransactionsRequest.unsubscribe)
  return _internal_mutable_unsubscribe();
}
inline void SubscribeTransactionsRequest::set_allocated_unsubscribe(::pb::TransactionFilter* unsubscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unsubscribe_;
  }
  if (unsubscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unsubscribe);
    if (message_arena != submessage_arena) {
      unsubscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsubscribe, submessage_arena);
    }
    
  } else {
    
  }
  unsubscribe_ = unsubscribe;
  // @@protoc_insertion_point(field_set_allocated:pb.SubscribeTransactionsRequest.unsubscribe)
}

// bool include_mempool = 3;
inline void SubscribeTransactionsRequest::clear_include_mempool() {
  include_mempool_ = false;
}
inline bool SubscribeTransactionsRequest::_internal_include_mempool() const {
  return include_mempool_;
}
inline bool SubscribeTransactionsRequest::include_mempool() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeTransactionsRequest.include_mempool)
  return _internal_include_mempool();
}
inline void SubscribeTransactionsRequest::_internal_set_include_mempool(bool value) {
  
  include_mempool_ = value;
}
inline void SubscribeTransactionsRequest::set_include_mempool(bool value) {
  _internal_set_include_mempool(value);
  // @@protoc_insertion_point(field_set:pb.SubscribeTransactionsRequest.include_mempool)
}

// bool include_in_block = 4;
inline void SubscribeTransactionsRequest::clear_include_in_block() {
  include_in_block_ = false;
}
inline bool SubscribeTransactionsRequest::_internal_include_in_block() const {
  return include_in_block_;
}
inline bool SubscribeTransactionsRequest::include_in_block() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeTransactionsRequest.include_in_block)
  return _internal_include_in_block();
}
inline void SubscribeTransactionsRequest::_internal_set_include_in_block(bool value) {
  
  include_in_block_ = value;
}
inline void SubscribeTransactionsRequest::set_include_in_block(bool value) {
  _internal_set_include_in_block(value);
  // @@protoc_insertion_point(field_set:pb.SubscribeTransactionsRequest.include_in_block)
}

// bool serialize_tx = 5;
inline void SubscribeTransactionsRequest::clear_serialize_tx() {
  serialize_tx_ = false;
}
inline bool SubscribeTransactionsRequest::_internal_serialize_tx() const {
  return serialize_tx_;
}
inline bool SubscribeTransactionsRequest::serialize_tx() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeTransactionsRequest.serialize_tx)
  return _internal_serialize_tx();
}
inline void SubscribeTransactionsRequest::_internal_set_serialize_tx(bool value) {
  
  serialize_tx_ = value;
}
inline void SubscribeTransactionsRequest::set_serialize_tx(bool value) {
  _internal_set_serialize_tx(value);
  // @@protoc_insertion_point(field_set:pb.SubscribeTransactionsRequest.serialize_tx)
}

// -------------------------------------------------------------------

// SubscribeBlocksRequest

// bool full_block = 1;
inline void SubscribeBlocksRequest::clear_full_block() {
  full_block_ = false;
}
inline bool SubscribeBlocksRequest::_internal_full_block() const {
  return full_block_;
}
inline bool SubscribeBlocksRequest::full_block() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeBlocksRequest.full_block)
  return _internal_full_block();
}
inline void SubscribeBlocksRequest::_internal_set_full_block(bool value) {
  
  full_block_ = value;
}
inline void SubscribeBlocksRequest::set_full_block(bool value) {
  _internal_set_full_block(value);
  // @@protoc_insertion_point(field_set:pb.SubscribeBlocksRequest.full_block)
}

// bool full_transactions = 2;
inline void SubscribeBlocksRequest::clear_full_transactions() {
  full_transactions_ = false;
}
inline bool SubscribeBlocksRequest::_internal_full_transactions() const {
  return full_transactions_;
}
inline bool SubscribeBlocksRequest::full_transactions() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeBlocksRequest.full_transactions)
  return _internal_full_transactions();
}
inline void SubscribeBlocksRequest::_internal_set_full_transactions(bool value) {
  
  full_transactions_ = value;
}
inline void SubscribeBlocksRequest::set_full_transactions(bool value) {
  _internal_set_full_transactions(value);
  // @@protoc_insertion_point(field_set:pb.SubscribeBlocksRequest.full_transactions)
}

// bool serialize_block = 3;
inline void SubscribeBlocksRequest::clear_serialize_block() {
  serialize_block_ = false;
}
inline bool SubscribeBlocksRequest::_internal_serialize_block() const {
  return serialize_block_;
}
inline bool SubscribeBlocksRequest::serialize_block() const {
  // @@protoc_insertion_point(field_get:pb.SubscribeBlocksRequest.serialize_block)
  return _internal_serialize_block();
}
inline void SubscribeBlocksRequest::_internal_set_serialize_block(bool value) {
  
  serialize_block_ = value;
}
inline void SubscribeBlocksRequest::set_serialize_block(bool value) {
  _internal_set_serialize_block(value);
  // @@protoc_insertion_point(field_set:pb.SubscribeBlocksRequest.serialize_block)
}

// -------------------------------------------------------------------

// BlockNotification

// .pb.BlockNotification.Type type = 1;
inline void BlockNotification::clear_type() {
  type_ = 0;
}
inline ::pb::BlockNotification_Type BlockNotification::_internal_type() const {
  return static_cast< ::pb::BlockNotification_Type >(type_);
}
inline ::pb::BlockNotification_Type BlockNotification::type() const {
  // @@protoc_insertion_point(field_get:pb.BlockNotification.type)
  return _internal_type();
}
inline void BlockNotification::_internal_set_type(::pb::BlockNotification_Type value) {
  
  type_ = value;
}
inline void BlockNotification::set_type(::pb::BlockNotification_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.BlockNotification.type)
}

// .pb.BlockInfo block_info = 2;
inline bool BlockNotification::_internal_has_block_info() const {
  return block_case() == kBlockInfo;
}
inline bool BlockNotification::has_block_info() const {
  return _internal_has_block_info();
}
inline void BlockNotification::set_has_block_info() {
  _oneof_case_[0] = kBlockInfo;
}
inline void BlockNotification::clear_block_info() {
  if (_internal_has_block_info()) {
    if (GetArena() == nullptr) {
      delete block_.block_info_;
    }
    clear_has_block();
  }
}
inline ::pb::BlockInfo* BlockNotification::release_block_info() {
  // @@protoc_insertion_point(field_release:pb.BlockNotification.block_info)
  if (_internal_has_block_info()) {
    clear_has_block();
      ::pb::BlockInfo* temp = block_.block_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    block_.block_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::BlockInfo& BlockNotification::_internal_block_info() const {
  return _internal_has_block_info()
      ? *block_.block_info_
      : *reinterpret_cast< ::pb::BlockInfo*>(&::pb::_BlockInfo_default_instance_);
}
inline const ::pb::BlockInfo& BlockNotification::block_info() const {
  // @@protoc_insertion_point(field_get:pb.BlockNotification.block_info)
  return _internal_block_info();
}
inline ::pb::BlockInfo* BlockNotification::unsafe_arena_release_block_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.BlockNotification.block_info)
  if (_internal_has_block_info()) {
    clear_has_block();
    ::pb::BlockInfo* temp = block_.block_info_;
    block_.block_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BlockNotification::unsafe_arena_set_allocated_block_info(::pb::BlockInfo* block_info) {
  clear_block();
  if (block_info) {
    set_has_block_info();
    block_.block_info_ = block_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.BlockNotification.block_info)
}
inline ::pb::BlockInfo* BlockNotification::_internal_mutable_block_info() {
  if (!_internal_has_block_info()) {
    clear_block();
    set_has_block_info();
    block_.block_info_ = CreateMaybeMessage< ::pb::BlockInfo >(GetArena());
  }
  return block_.block_info_;
}
inline ::pb::BlockInfo* BlockNotification::mutable_block_info() {
  // @@protoc_insertion_point(field_mutable:pb.BlockNotification.block_info)
  return _internal_mutable_block_info();
}

// .pb.Block marshaled_block = 3;
inline bool BlockNotification::_internal_has_marshaled_block() const {
  return block_case() == kMarshaledBlock;
}
inline bool BlockNotification::has_marshaled_block() const {
  return _internal_has_marshaled_block();
}
inline void BlockNotification::set_has_marshaled_block() {
  _oneof_case_[0] = kMarshaledBlock;
}
inline void BlockNotification::clear_marshaled_block() {
  if (_internal_has_marshaled_block()) {
    if (GetArena() == nullptr) {
      delete block_.marshaled_block_;
    }
    clear_has_block();
  }
}
inline ::pb::Block* BlockNotification::release_marshaled_block() {
  // @@protoc_insertion_point(field_release:pb.BlockNotification.marshaled_block)
  if (_internal_has_marshaled_block()) {
    clear_has_block();
      ::pb::Block* temp = block_.marshaled_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    block_.marshaled_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::Block& BlockNotification::_internal_marshaled_block() const {
  return _internal_has_marshaled_block()
      ? *block_.marshaled_block_
      : *reinterpret_cast< ::pb::Block*>(&::pb::_Block_default_instance_);
}
inline const ::pb::Block& BlockNotification::marshaled_block() const {
  // @@protoc_insertion_point(field_get:pb.BlockNotification.marshaled_block)
  return _internal_marshaled_block();
}
inline ::pb::Block* BlockNotification::unsafe_arena_release_marshaled_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.BlockNotification.marshaled_block)
  if (_internal_has_marshaled_block()) {
    clear_has_block();
    ::pb::Block* temp = block_.marshaled_block_;
    block_.marshaled_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BlockNotification::unsafe_arena_set_allocated_marshaled_block(::pb::Block* marshaled_block) {
  clear_block();
  if (marshaled_block) {
    set_has_marshaled_block();
    block_.marshaled_block_ = marshaled_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.BlockNotification.marshaled_block)
}
inline ::pb::Block* BlockNotification::_internal_mutable_marshaled_block() {
  if (!_internal_has_marshaled_block()) {
    clear_block();
    set_has_marshaled_block();
    block_.marshaled_block_ = CreateMaybeMessage< ::pb::Block >(GetArena());
  }
  return block_.marshaled_block_;
}
inline ::pb::Block* BlockNotification::mutable_marshaled_block() {
  // @@protoc_insertion_point(field_mutable:pb.BlockNotification.marshaled_block)
  return _internal_mutable_marshaled_block();
}

// bytes serialized_block = 4;
inline bool BlockNotification::_internal_has_serialized_block() const {
  return block_case() == kSerializedBlock;
}
inline void BlockNotification::set_has_serialized_block() {
  _oneof_case_[0] = kSerializedBlock;
}
inline void BlockNotification::clear_serialized_block() {
  if (_internal_has_serialized_block()) {
    block_.serialized_block_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_block();
  }
}
inline const std::string& BlockNotification::serialized_block() const {
  // @@protoc_insertion_point(field_get:pb.BlockNotification.serialized_block)
  return _internal_serialized_block();
}
inline void BlockNotification::set_serialized_block(const std::string& value) {
  _internal_set_serialized_block(value);
  // @@protoc_insertion_point(field_set:pb.BlockNotification.serialized_block)
}
inline std::string* BlockNotification::mutable_serialized_block() {
  // @@protoc_insertion_point(field_mutable:pb.BlockNotification.serialized_block)
  return _internal_mutable_serialized_block();
}
inline const std::string& BlockNotification::_internal_serialized_block() const {
  if (_internal_has_serialized_block()) {
    return block_.serialized_block_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BlockNotification::_internal_set_serialized_block(const std::string& value) {
  if (!_internal_has_serialized_block()) {
    clear_block();
    set_has_serialized_block();
    block_.serialized_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  block_.serialized_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockNotification::set_serialized_block(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BlockNotification.serialized_block)
  if (!_internal_has_serialized_block()) {
    clear_block();
    set_has_serialized_block();
    block_.serialized_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  block_.serialized_block_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockNotification.serialized_block)
}
inline void BlockNotification::set_serialized_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_serialized_block()) {
    clear_block();
    set_has_serialized_block();
    block_.serialized_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  block_.serialized_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BlockNotification.serialized_block)
}
inline void BlockNotification::set_serialized_block(const void* value,
                             size_t size) {
  if (!_internal_has_serialized_block()) {
    clear_block();
    set_has_serialized_block();
    block_.serialized_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  block_.serialized_block_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BlockNotification.serialized_block)
}
inline std::string* BlockNotification::_internal_mutable_serialized_block() {
  if (!_internal_has_serialized_block()) {
    clear_block();
    set_has_serialized_block();
    block_.serialized_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return block_.serialized_block_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockNotification::release_serialized_block() {
  // @@protoc_insertion_point(field_release:pb.BlockNotification.serialized_block)
  if (_internal_has_serialized_block()) {
    clear_has_block();
    return block_.serialized_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void BlockNotification::set_allocated_serialized_block(std::string* serialized_block) {
  if (has_block()) {
    clear_block();
  }
  if (serialized_block != nullptr) {
    set_has_serialized_block();
    block_.serialized_block_.UnsafeSetDefault(serialized_block);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(serialized_block);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BlockNotification.serialized_block)
}

inline bool BlockNotification::has_block() const {
  return block_case() != BLOCK_NOT_SET;
}
inline void BlockNotification::clear_has_block() {
  _oneof_case_[0] = BLOCK_NOT_SET;
}
inline BlockNotification::BlockCase BlockNotification::block_case() const {
  return BlockNotification::BlockCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionNotification

// .pb.TransactionNotification.Type type = 1;
inline void TransactionNotification::clear_type() {
  type_ = 0;
}
inline ::pb::TransactionNotification_Type TransactionNotification::_internal_type() const {
  return static_cast< ::pb::TransactionNotification_Type >(type_);
}
inline ::pb::TransactionNotification_Type TransactionNotification::type() const {
  // @@protoc_insertion_point(field_get:pb.TransactionNotification.type)
  return _internal_type();
}
inline void TransactionNotification::_internal_set_type(::pb::TransactionNotification_Type value) {
  
  type_ = value;
}
inline void TransactionNotification::set_type(::pb::TransactionNotification_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.TransactionNotification.type)
}

// .pb.Transaction confirmed_transaction = 2;
inline bool TransactionNotification::_internal_has_confirmed_transaction() const {
  return transaction_case() == kConfirmedTransaction;
}
inline bool TransactionNotification::has_confirmed_transaction() const {
  return _internal_has_confirmed_transaction();
}
inline void TransactionNotification::set_has_confirmed_transaction() {
  _oneof_case_[0] = kConfirmedTransaction;
}
inline void TransactionNotification::clear_confirmed_transaction() {
  if (_internal_has_confirmed_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_.confirmed_transaction_;
    }
    clear_has_transaction();
  }
}
inline ::pb::Transaction* TransactionNotification::release_confirmed_transaction() {
  // @@protoc_insertion_point(field_release:pb.TransactionNotification.confirmed_transaction)
  if (_internal_has_confirmed_transaction()) {
    clear_has_transaction();
      ::pb::Transaction* temp = transaction_.confirmed_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.confirmed_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::Transaction& TransactionNotification::_internal_confirmed_transaction() const {
  return _internal_has_confirmed_transaction()
      ? *transaction_.confirmed_transaction_
      : *reinterpret_cast< ::pb::Transaction*>(&::pb::_Transaction_default_instance_);
}
inline const ::pb::Transaction& TransactionNotification::confirmed_transaction() const {
  // @@protoc_insertion_point(field_get:pb.TransactionNotification.confirmed_transaction)
  return _internal_confirmed_transaction();
}
inline ::pb::Transaction* TransactionNotification::unsafe_arena_release_confirmed_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.TransactionNotification.confirmed_transaction)
  if (_internal_has_confirmed_transaction()) {
    clear_has_transaction();
    ::pb::Transaction* temp = transaction_.confirmed_transaction_;
    transaction_.confirmed_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionNotification::unsafe_arena_set_allocated_confirmed_transaction(::pb::Transaction* confirmed_transaction) {
  clear_transaction();
  if (confirmed_transaction) {
    set_has_confirmed_transaction();
    transaction_.confirmed_transaction_ = confirmed_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.TransactionNotification.confirmed_transaction)
}
inline ::pb::Transaction* TransactionNotification::_internal_mutable_confirmed_transaction() {
  if (!_internal_has_confirmed_transaction()) {
    clear_transaction();
    set_has_confirmed_transaction();
    transaction_.confirmed_transaction_ = CreateMaybeMessage< ::pb::Transaction >(GetArena());
  }
  return transaction_.confirmed_transaction_;
}
inline ::pb::Transaction* TransactionNotification::mutable_confirmed_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.TransactionNotification.confirmed_transaction)
  return _internal_mutable_confirmed_transaction();
}

// .pb.MempoolTransaction unconfirmed_transaction = 3;
inline bool TransactionNotification::_internal_has_unconfirmed_transaction() const {
  return transaction_case() == kUnconfirmedTransaction;
}
inline bool TransactionNotification::has_unconfirmed_transaction() const {
  return _internal_has_unconfirmed_transaction();
}
inline void TransactionNotification::set_has_unconfirmed_transaction() {
  _oneof_case_[0] = kUnconfirmedTransaction;
}
inline void TransactionNotification::clear_unconfirmed_transaction() {
  if (_internal_has_unconfirmed_transaction()) {
    if (GetArena() == nullptr) {
      delete transaction_.unconfirmed_transaction_;
    }
    clear_has_transaction();
  }
}
inline ::pb::MempoolTransaction* TransactionNotification::release_unconfirmed_transaction() {
  // @@protoc_insertion_point(field_release:pb.TransactionNotification.unconfirmed_transaction)
  if (_internal_has_unconfirmed_transaction()) {
    clear_has_transaction();
      ::pb::MempoolTransaction* temp = transaction_.unconfirmed_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.unconfirmed_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::MempoolTransaction& TransactionNotification::_internal_unconfirmed_transaction() const {
  return _internal_has_unconfirmed_transaction()
      ? *transaction_.unconfirmed_transaction_
      : *reinterpret_cast< ::pb::MempoolTransaction*>(&::pb::_MempoolTransaction_default_instance_);
}
inline const ::pb::MempoolTransaction& TransactionNotification::unconfirmed_transaction() const {
  // @@protoc_insertion_point(field_get:pb.TransactionNotification.unconfirmed_transaction)
  return _internal_unconfirmed_transaction();
}
inline ::pb::MempoolTransaction* TransactionNotification::unsafe_arena_release_unconfirmed_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.TransactionNotification.unconfirmed_transaction)
  if (_internal_has_unconfirmed_transaction()) {
    clear_has_transaction();
    ::pb::MempoolTransaction* temp = transaction_.unconfirmed_transaction_;
    transaction_.unconfirmed_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionNotification::unsafe_arena_set_allocated_unconfirmed_transaction(::pb::MempoolTransaction* unconfirmed_transaction) {
  clear_transaction();
  if (unconfirmed_transaction) {
    set_has_unconfirmed_transaction();
    transaction_.unconfirmed_transaction_ = unconfirmed_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.TransactionNotification.unconfirmed_transaction)
}
inline ::pb::MempoolTransaction* TransactionNotification::_internal_mutable_unconfirmed_transaction() {
  if (!_internal_has_unconfirmed_transaction()) {
    clear_transaction();
    set_has_unconfirmed_transaction();
    transaction_.unconfirmed_transaction_ = CreateMaybeMessage< ::pb::MempoolTransaction >(GetArena());
  }
  return transaction_.unconfirmed_transaction_;
}
inline ::pb::MempoolTransaction* TransactionNotification::mutable_unconfirmed_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.TransactionNotification.unconfirmed_transaction)
  return _internal_mutable_unconfirmed_transaction();
}

// bytes serialized_transaction = 4;
inline bool TransactionNotification::_internal_has_serialized_transaction() const {
  return transaction_case() == kSerializedTransaction;
}
inline void TransactionNotification::set_has_serialized_transaction() {
  _oneof_case_[0] = kSerializedTransaction;
}
inline void TransactionNotification::clear_serialized_transaction() {
  if (_internal_has_serialized_transaction()) {
    transaction_.serialized_transaction_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_transaction();
  }
}
inline const std::string& TransactionNotification::serialized_transaction() const {
  // @@protoc_insertion_point(field_get:pb.TransactionNotification.serialized_transaction)
  return _internal_serialized_transaction();
}
inline void TransactionNotification::set_serialized_transaction(const std::string& value) {
  _internal_set_serialized_transaction(value);
  // @@protoc_insertion_point(field_set:pb.TransactionNotification.serialized_transaction)
}
inline std::string* TransactionNotification::mutable_serialized_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.TransactionNotification.serialized_transaction)
  return _internal_mutable_serialized_transaction();
}
inline const std::string& TransactionNotification::_internal_serialized_transaction() const {
  if (_internal_has_serialized_transaction()) {
    return transaction_.serialized_transaction_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransactionNotification::_internal_set_serialized_transaction(const std::string& value) {
  if (!_internal_has_serialized_transaction()) {
    clear_transaction();
    set_has_serialized_transaction();
    transaction_.serialized_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  transaction_.serialized_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionNotification::set_serialized_transaction(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.TransactionNotification.serialized_transaction)
  if (!_internal_has_serialized_transaction()) {
    clear_transaction();
    set_has_serialized_transaction();
    transaction_.serialized_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  transaction_.serialized_transaction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TransactionNotification.serialized_transaction)
}
inline void TransactionNotification::set_serialized_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_serialized_transaction()) {
    clear_transaction();
    set_has_serialized_transaction();
    transaction_.serialized_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  transaction_.serialized_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TransactionNotification.serialized_transaction)
}
inline void TransactionNotification::set_serialized_transaction(const void* value,
                             size_t size) {
  if (!_internal_has_serialized_transaction()) {
    clear_transaction();
    set_has_serialized_transaction();
    transaction_.serialized_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  transaction_.serialized_transaction_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TransactionNotification.serialized_transaction)
}
inline std::string* TransactionNotification::_internal_mutable_serialized_transaction() {
  if (!_internal_has_serialized_transaction()) {
    clear_transaction();
    set_has_serialized_transaction();
    transaction_.serialized_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return transaction_.serialized_transaction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionNotification::release_serialized_transaction() {
  // @@protoc_insertion_point(field_release:pb.TransactionNotification.serialized_transaction)
  if (_internal_has_serialized_transaction()) {
    clear_has_transaction();
    return transaction_.serialized_transaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TransactionNotification::set_allocated_serialized_transaction(std::string* serialized_transaction) {
  if (has_transaction()) {
    clear_transaction();
  }
  if (serialized_transaction != nullptr) {
    set_has_serialized_transaction();
    transaction_.serialized_transaction_.UnsafeSetDefault(serialized_transaction);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(serialized_transaction);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TransactionNotification.serialized_transaction)
}

inline bool TransactionNotification::has_transaction() const {
  return transaction_case() != TRANSACTION_NOT_SET;
}
inline void TransactionNotification::clear_has_transaction() {
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}
inline TransactionNotification::TransactionCase TransactionNotification::transaction_case() const {
  return TransactionNotification::TransactionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BlockInfo

// bytes hash = 1;
inline void BlockInfo::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockInfo::hash() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.hash)
  return _internal_hash();
}
inline void BlockInfo::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.hash)
}
inline std::string* BlockInfo::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.BlockInfo.hash)
  return _internal_mutable_hash();
}
inline const std::string& BlockInfo::_internal_hash() const {
  return hash_.Get();
}
inline void BlockInfo::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockInfo::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockInfo.hash)
}
inline void BlockInfo::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BlockInfo.hash)
}
inline void BlockInfo::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BlockInfo.hash)
}
inline std::string* BlockInfo::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockInfo::release_hash() {
  // @@protoc_insertion_point(field_release:pb.BlockInfo.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockInfo::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BlockInfo.hash)
}

// int32 height = 2;
inline void BlockInfo::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::height() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.height)
  return _internal_height();
}
inline void BlockInfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void BlockInfo::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.height)
}

// int32 version = 3;
inline void BlockInfo::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::version() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.version)
  return _internal_version();
}
inline void BlockInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void BlockInfo::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.version)
}

// bytes previous_block = 4;
inline void BlockInfo::clear_previous_block() {
  previous_block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockInfo::previous_block() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.previous_block)
  return _internal_previous_block();
}
inline void BlockInfo::set_previous_block(const std::string& value) {
  _internal_set_previous_block(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.previous_block)
}
inline std::string* BlockInfo::mutable_previous_block() {
  // @@protoc_insertion_point(field_mutable:pb.BlockInfo.previous_block)
  return _internal_mutable_previous_block();
}
inline const std::string& BlockInfo::_internal_previous_block() const {
  return previous_block_.Get();
}
inline void BlockInfo::_internal_set_previous_block(const std::string& value) {
  
  previous_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockInfo::set_previous_block(std::string&& value) {
  
  previous_block_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockInfo.previous_block)
}
inline void BlockInfo::set_previous_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BlockInfo.previous_block)
}
inline void BlockInfo::set_previous_block(const void* value,
    size_t size) {
  
  previous_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BlockInfo.previous_block)
}
inline std::string* BlockInfo::_internal_mutable_previous_block() {
  
  return previous_block_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockInfo::release_previous_block() {
  // @@protoc_insertion_point(field_release:pb.BlockInfo.previous_block)
  return previous_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockInfo::set_allocated_previous_block(std::string* previous_block) {
  if (previous_block != nullptr) {
    
  } else {
    
  }
  previous_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BlockInfo.previous_block)
}

// bytes merkle_root = 5;
inline void BlockInfo::clear_merkle_root() {
  merkle_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockInfo::merkle_root() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.merkle_root)
  return _internal_merkle_root();
}
inline void BlockInfo::set_merkle_root(const std::string& value) {
  _internal_set_merkle_root(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.merkle_root)
}
inline std::string* BlockInfo::mutable_merkle_root() {
  // @@protoc_insertion_point(field_mutable:pb.BlockInfo.merkle_root)
  return _internal_mutable_merkle_root();
}
inline const std::string& BlockInfo::_internal_merkle_root() const {
  return merkle_root_.Get();
}
inline void BlockInfo::_internal_set_merkle_root(const std::string& value) {
  
  merkle_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockInfo::set_merkle_root(std::string&& value) {
  
  merkle_root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockInfo.merkle_root)
}
inline void BlockInfo::set_merkle_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkle_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BlockInfo.merkle_root)
}
inline void BlockInfo::set_merkle_root(const void* value,
    size_t size) {
  
  merkle_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BlockInfo.merkle_root)
}
inline std::string* BlockInfo::_internal_mutable_merkle_root() {
  
  return merkle_root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockInfo::release_merkle_root() {
  // @@protoc_insertion_point(field_release:pb.BlockInfo.merkle_root)
  return merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockInfo::set_allocated_merkle_root(std::string* merkle_root) {
  if (merkle_root != nullptr) {
    
  } else {
    
  }
  merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkle_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BlockInfo.merkle_root)
}

// int64 timestamp = 6;
inline void BlockInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.timestamp)
  return _internal_timestamp();
}
inline void BlockInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BlockInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.timestamp)
}

// uint32 bits = 7;
inline void BlockInfo::clear_bits() {
  bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::bits() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.bits)
  return _internal_bits();
}
inline void BlockInfo::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bits_ = value;
}
inline void BlockInfo::set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.bits)
}

// uint32 nonce = 8;
inline void BlockInfo::clear_nonce() {
  nonce_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfo::nonce() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.nonce)
  return _internal_nonce();
}
inline void BlockInfo::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nonce_ = value;
}
inline void BlockInfo::set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.nonce)
}

// int32 confirmations = 9;
inline void BlockInfo::clear_confirmations() {
  confirmations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::confirmations() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.confirmations)
  return _internal_confirmations();
}
inline void BlockInfo::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confirmations_ = value;
}
inline void BlockInfo::set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.confirmations)
}

// double difficulty = 10;
inline void BlockInfo::clear_difficulty() {
  difficulty_ = 0;
}
inline double BlockInfo::_internal_difficulty() const {
  return difficulty_;
}
inline double BlockInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.difficulty)
  return _internal_difficulty();
}
inline void BlockInfo::_internal_set_difficulty(double value) {
  
  difficulty_ = value;
}
inline void BlockInfo::set_difficulty(double value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.difficulty)
}

// bytes next_block_hash = 11;
inline void BlockInfo::clear_next_block_hash() {
  next_block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockInfo::next_block_hash() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.next_block_hash)
  return _internal_next_block_hash();
}
inline void BlockInfo::set_next_block_hash(const std::string& value) {
  _internal_set_next_block_hash(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.next_block_hash)
}
inline std::string* BlockInfo::mutable_next_block_hash() {
  // @@protoc_insertion_point(field_mutable:pb.BlockInfo.next_block_hash)
  return _internal_mutable_next_block_hash();
}
inline const std::string& BlockInfo::_internal_next_block_hash() const {
  return next_block_hash_.Get();
}
inline void BlockInfo::_internal_set_next_block_hash(const std::string& value) {
  
  next_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockInfo::set_next_block_hash(std::string&& value) {
  
  next_block_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BlockInfo.next_block_hash)
}
inline void BlockInfo::set_next_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BlockInfo.next_block_hash)
}
inline void BlockInfo::set_next_block_hash(const void* value,
    size_t size) {
  
  next_block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BlockInfo.next_block_hash)
}
inline std::string* BlockInfo::_internal_mutable_next_block_hash() {
  
  return next_block_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockInfo::release_next_block_hash() {
  // @@protoc_insertion_point(field_release:pb.BlockInfo.next_block_hash)
  return next_block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockInfo::set_allocated_next_block_hash(std::string* next_block_hash) {
  if (next_block_hash != nullptr) {
    
  } else {
    
  }
  next_block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BlockInfo.next_block_hash)
}

// int32 size = 12;
inline void BlockInfo::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::size() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.size)
  return _internal_size();
}
inline void BlockInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void BlockInfo::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.size)
}

// int64 median_time = 13;
inline void BlockInfo::clear_median_time() {
  median_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInfo::_internal_median_time() const {
  return median_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInfo::median_time() const {
  // @@protoc_insertion_point(field_get:pb.BlockInfo.median_time)
  return _internal_median_time();
}
inline void BlockInfo::_internal_set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  median_time_ = value;
}
inline void BlockInfo::set_median_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_median_time(value);
  // @@protoc_insertion_point(field_set:pb.BlockInfo.median_time)
}

// -------------------------------------------------------------------

// Block_TransactionData

// bytes transaction_hash = 1;
inline bool Block_TransactionData::_internal_has_transaction_hash() const {
  return txids_or_txs_case() == kTransactionHash;
}
inline void Block_TransactionData::set_has_transaction_hash() {
  _oneof_case_[0] = kTransactionHash;
}
inline void Block_TransactionData::clear_transaction_hash() {
  if (_internal_has_transaction_hash()) {
    txids_or_txs_.transaction_hash_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_txids_or_txs();
  }
}
inline const std::string& Block_TransactionData::transaction_hash() const {
  // @@protoc_insertion_point(field_get:pb.Block.TransactionData.transaction_hash)
  return _internal_transaction_hash();
}
inline void Block_TransactionData::set_transaction_hash(const std::string& value) {
  _internal_set_transaction_hash(value);
  // @@protoc_insertion_point(field_set:pb.Block.TransactionData.transaction_hash)
}
inline std::string* Block_TransactionData::mutable_transaction_hash() {
  // @@protoc_insertion_point(field_mutable:pb.Block.TransactionData.transaction_hash)
  return _internal_mutable_transaction_hash();
}
inline const std::string& Block_TransactionData::_internal_transaction_hash() const {
  if (_internal_has_transaction_hash()) {
    return txids_or_txs_.transaction_hash_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Block_TransactionData::_internal_set_transaction_hash(const std::string& value) {
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Block_TransactionData::set_transaction_hash(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Block.TransactionData.transaction_hash)
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Block.TransactionData.transaction_hash)
}
inline void Block_TransactionData::set_transaction_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Block.TransactionData.transaction_hash)
}
inline void Block_TransactionData::set_transaction_hash(const void* value,
                             size_t size) {
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  txids_or_txs_.transaction_hash_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Block.TransactionData.transaction_hash)
}
inline std::string* Block_TransactionData::_internal_mutable_transaction_hash() {
  if (!_internal_has_transaction_hash()) {
    clear_txids_or_txs();
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return txids_or_txs_.transaction_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Block_TransactionData::release_transaction_hash() {
  // @@protoc_insertion_point(field_release:pb.Block.TransactionData.transaction_hash)
  if (_internal_has_transaction_hash()) {
    clear_has_txids_or_txs();
    return txids_or_txs_.transaction_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Block_TransactionData::set_allocated_transaction_hash(std::string* transaction_hash) {
  if (has_txids_or_txs()) {
    clear_txids_or_txs();
  }
  if (transaction_hash != nullptr) {
    set_has_transaction_hash();
    txids_or_txs_.transaction_hash_.UnsafeSetDefault(transaction_hash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(transaction_hash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Block.TransactionData.transaction_hash)
}

// .pb.Transaction transaction = 2;
inline bool Block_TransactionData::_internal_has_transaction() const {
  return txids_or_txs_case() == kTransaction;
}
inline bool Block_TransactionData::has_transaction() const {
  return _internal_has_transaction();
}
inline void Block_TransactionData::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void Block_TransactionData::clear_transaction() {
  if (_internal_has_transaction()) {
    if (GetArena() == nullptr) {
      delete txids_or_txs_.transaction_;
    }
    clear_has_txids_or_txs();
  }
}
inline ::pb::Transaction* Block_TransactionData::release_transaction() {
  // @@protoc_insertion_point(field_release:pb.Block.TransactionData.transaction)
  if (_internal_has_transaction()) {
    clear_has_txids_or_txs();
      ::pb::Transaction* temp = txids_or_txs_.transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    txids_or_txs_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::Transaction& Block_TransactionData::_internal_transaction() const {
  return _internal_has_transaction()
      ? *txids_or_txs_.transaction_
      : *reinterpret_cast< ::pb::Transaction*>(&::pb::_Transaction_default_instance_);
}
inline const ::pb::Transaction& Block_TransactionData::transaction() const {
  // @@protoc_insertion_point(field_get:pb.Block.TransactionData.transaction)
  return _internal_transaction();
}
inline ::pb::Transaction* Block_TransactionData::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.Block.TransactionData.transaction)
  if (_internal_has_transaction()) {
    clear_has_txids_or_txs();
    ::pb::Transaction* temp = txids_or_txs_.transaction_;
    txids_or_txs_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Block_TransactionData::unsafe_arena_set_allocated_transaction(::pb::Transaction* transaction) {
  clear_txids_or_txs();
  if (transaction) {
    set_has_transaction();
    txids_or_txs_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Block.TransactionData.transaction)
}
inline ::pb::Transaction* Block_TransactionData::_internal_mutable_transaction() {
  if (!_internal_has_transaction()) {
    clear_txids_or_txs();
    set_has_transaction();
    txids_or_txs_.transaction_ = CreateMaybeMessage< ::pb::Transaction >(GetArena());
  }
  return txids_or_txs_.transaction_;
}
inline ::pb::Transaction* Block_TransactionData::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.Block.TransactionData.transaction)
  return _internal_mutable_transaction();
}

inline bool Block_TransactionData::has_txids_or_txs() const {
  return txids_or_txs_case() != TXIDS_OR_TXS_NOT_SET;
}
inline void Block_TransactionData::clear_has_txids_or_txs() {
  _oneof_case_[0] = TXIDS_OR_TXS_NOT_SET;
}
inline Block_TransactionData::TxidsOrTxsCase Block_TransactionData::txids_or_txs_case() const {
  return Block_TransactionData::TxidsOrTxsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Block

// .pb.BlockInfo info = 1;
inline bool Block::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool Block::has_info() const {
  return _internal_has_info();
}
inline void Block::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::pb::BlockInfo& Block::_internal_info() const {
  const ::pb::BlockInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::BlockInfo*>(
      &::pb::_BlockInfo_default_instance_);
}
inline const ::pb::BlockInfo& Block::info() const {
  // @@protoc_insertion_point(field_get:pb.Block.info)
  return _internal_info();
}
inline void Block::unsafe_arena_set_allocated_info(
    ::pb::BlockInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Block.info)
}
inline ::pb::BlockInfo* Block::release_info() {
  
  ::pb::BlockInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::BlockInfo* Block::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:pb.Block.info)
  
  ::pb::BlockInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::pb::BlockInfo* Block::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::BlockInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::pb::BlockInfo* Block::mutable_info() {
  // @@protoc_insertion_point(field_mutable:pb.Block.info)
  return _internal_mutable_info();
}
inline void Block::set_allocated_info(::pb::BlockInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:pb.Block.info)
}

// repeated .pb.Block.TransactionData transaction_data = 2;
inline int Block::_internal_transaction_data_size() const {
  return transaction_data_.size();
}
inline int Block::transaction_data_size() const {
  return _internal_transaction_data_size();
}
inline void Block::clear_transaction_data() {
  transaction_data_.Clear();
}
inline ::pb::Block_TransactionData* Block::mutable_transaction_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Block.transaction_data)
  return transaction_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block_TransactionData >*
Block::mutable_transaction_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.Block.transaction_data)
  return &transaction_data_;
}
inline const ::pb::Block_TransactionData& Block::_internal_transaction_data(int index) const {
  return transaction_data_.Get(index);
}
inline const ::pb::Block_TransactionData& Block::transaction_data(int index) const {
  // @@protoc_insertion_point(field_get:pb.Block.transaction_data)
  return _internal_transaction_data(index);
}
inline ::pb::Block_TransactionData* Block::_internal_add_transaction_data() {
  return transaction_data_.Add();
}
inline ::pb::Block_TransactionData* Block::add_transaction_data() {
  // @@protoc_insertion_point(field_add:pb.Block.transaction_data)
  return _internal_add_transaction_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Block_TransactionData >&
Block::transaction_data() const {
  // @@protoc_insertion_point(field_list:pb.Block.transaction_data)
  return transaction_data_;
}

// -------------------------------------------------------------------

// Transaction_Input_Outpoint

// bytes hash = 1;
inline void Transaction_Input_Outpoint::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Input_Outpoint::hash() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.Outpoint.hash)
  return _internal_hash();
}
inline void Transaction_Input_Outpoint::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.Outpoint.hash)
}
inline std::string* Transaction_Input_Outpoint::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Input.Outpoint.hash)
  return _internal_mutable_hash();
}
inline const std::string& Transaction_Input_Outpoint::_internal_hash() const {
  return hash_.Get();
}
inline void Transaction_Input_Outpoint::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Input_Outpoint::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Input.Outpoint.hash)
}
inline void Transaction_Input_Outpoint::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Input.Outpoint.hash)
}
inline void Transaction_Input_Outpoint::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Input.Outpoint.hash)
}
inline std::string* Transaction_Input_Outpoint::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Input_Outpoint::release_hash() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Input.Outpoint.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Input_Outpoint::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Input.Outpoint.hash)
}

// uint32 index = 2;
inline void Transaction_Input_Outpoint::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Input_Outpoint::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Input_Outpoint::index() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.Outpoint.index)
  return _internal_index();
}
inline void Transaction_Input_Outpoint::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void Transaction_Input_Outpoint::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.Outpoint.index)
}

// -------------------------------------------------------------------

// Transaction_Input

// uint32 index = 1;
inline void Transaction_Input::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Input::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Input::index() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.index)
  return _internal_index();
}
inline void Transaction_Input::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void Transaction_Input::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.index)
}

// .pb.Transaction.Input.Outpoint outpoint = 2;
inline bool Transaction_Input::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool Transaction_Input::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void Transaction_Input::clear_outpoint() {
  if (GetArena() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::pb::Transaction_Input_Outpoint& Transaction_Input::_internal_outpoint() const {
  const ::pb::Transaction_Input_Outpoint* p = outpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction_Input_Outpoint*>(
      &::pb::_Transaction_Input_Outpoint_default_instance_);
}
inline const ::pb::Transaction_Input_Outpoint& Transaction_Input::outpoint() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.outpoint)
  return _internal_outpoint();
}
inline void Transaction_Input::unsafe_arena_set_allocated_outpoint(
    ::pb::Transaction_Input_Outpoint* outpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outpoint_);
  }
  outpoint_ = outpoint;
  if (outpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Transaction.Input.outpoint)
}
inline ::pb::Transaction_Input_Outpoint* Transaction_Input::release_outpoint() {
  
  ::pb::Transaction_Input_Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Transaction_Input_Outpoint* Transaction_Input::unsafe_arena_release_outpoint() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Input.outpoint)
  
  ::pb::Transaction_Input_Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::pb::Transaction_Input_Outpoint* Transaction_Input::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction_Input_Outpoint>(GetArena());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::pb::Transaction_Input_Outpoint* Transaction_Input::mutable_outpoint() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Input.outpoint)
  return _internal_mutable_outpoint();
}
inline void Transaction_Input::set_allocated_outpoint(::pb::Transaction_Input_Outpoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outpoint);
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Input.outpoint)
}

// bytes signature_script = 3;
inline void Transaction_Input::clear_signature_script() {
  signature_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Input::signature_script() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.signature_script)
  return _internal_signature_script();
}
inline void Transaction_Input::set_signature_script(const std::string& value) {
  _internal_set_signature_script(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.signature_script)
}
inline std::string* Transaction_Input::mutable_signature_script() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Input.signature_script)
  return _internal_mutable_signature_script();
}
inline const std::string& Transaction_Input::_internal_signature_script() const {
  return signature_script_.Get();
}
inline void Transaction_Input::_internal_set_signature_script(const std::string& value) {
  
  signature_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Input::set_signature_script(std::string&& value) {
  
  signature_script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Input.signature_script)
}
inline void Transaction_Input::set_signature_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Input.signature_script)
}
inline void Transaction_Input::set_signature_script(const void* value,
    size_t size) {
  
  signature_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Input.signature_script)
}
inline std::string* Transaction_Input::_internal_mutable_signature_script() {
  
  return signature_script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Input::release_signature_script() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Input.signature_script)
  return signature_script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Input::set_allocated_signature_script(std::string* signature_script) {
  if (signature_script != nullptr) {
    
  } else {
    
  }
  signature_script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Input.signature_script)
}

// uint32 sequence = 4;
inline void Transaction_Input::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Input::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Input::sequence() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.sequence)
  return _internal_sequence();
}
inline void Transaction_Input::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void Transaction_Input::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.sequence)
}

// int64 value = 5;
inline void Transaction_Input::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Input::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Input::value() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.value)
  return _internal_value();
}
inline void Transaction_Input::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Transaction_Input::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.value)
}

// bytes previous_script = 6;
inline void Transaction_Input::clear_previous_script() {
  previous_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Input::previous_script() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.previous_script)
  return _internal_previous_script();
}
inline void Transaction_Input::set_previous_script(const std::string& value) {
  _internal_set_previous_script(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.previous_script)
}
inline std::string* Transaction_Input::mutable_previous_script() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Input.previous_script)
  return _internal_mutable_previous_script();
}
inline const std::string& Transaction_Input::_internal_previous_script() const {
  return previous_script_.Get();
}
inline void Transaction_Input::_internal_set_previous_script(const std::string& value) {
  
  previous_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Input::set_previous_script(std::string&& value) {
  
  previous_script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Input.previous_script)
}
inline void Transaction_Input::set_previous_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Input.previous_script)
}
inline void Transaction_Input::set_previous_script(const void* value,
    size_t size) {
  
  previous_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Input.previous_script)
}
inline std::string* Transaction_Input::_internal_mutable_previous_script() {
  
  return previous_script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Input::release_previous_script() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Input.previous_script)
  return previous_script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Input::set_allocated_previous_script(std::string* previous_script) {
  if (previous_script != nullptr) {
    
  } else {
    
  }
  previous_script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Input.previous_script)
}

// string address = 7;
inline void Transaction_Input::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Input::address() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Input.address)
  return _internal_address();
}
inline void Transaction_Input::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Input.address)
}
inline std::string* Transaction_Input::mutable_address() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Input.address)
  return _internal_mutable_address();
}
inline const std::string& Transaction_Input::_internal_address() const {
  return address_.Get();
}
inline void Transaction_Input::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Input::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Input.address)
}
inline void Transaction_Input::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Input.address)
}
inline void Transaction_Input::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Input.address)
}
inline std::string* Transaction_Input::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Input::release_address() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Input.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Input::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Input.address)
}

// -------------------------------------------------------------------

// Transaction_Output

// uint32 index = 1;
inline void Transaction_Output::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Output::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Output::index() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Output.index)
  return _internal_index();
}
inline void Transaction_Output::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void Transaction_Output::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Output.index)
}

// int64 value = 2;
inline void Transaction_Output::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Output::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Output::value() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Output.value)
  return _internal_value();
}
inline void Transaction_Output::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Transaction_Output::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Output.value)
}

// bytes pubkey_script = 3;
inline void Transaction_Output::clear_pubkey_script() {
  pubkey_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Output::pubkey_script() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Output.pubkey_script)
  return _internal_pubkey_script();
}
inline void Transaction_Output::set_pubkey_script(const std::string& value) {
  _internal_set_pubkey_script(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Output.pubkey_script)
}
inline std::string* Transaction_Output::mutable_pubkey_script() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Output.pubkey_script)
  return _internal_mutable_pubkey_script();
}
inline const std::string& Transaction_Output::_internal_pubkey_script() const {
  return pubkey_script_.Get();
}
inline void Transaction_Output::_internal_set_pubkey_script(const std::string& value) {
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Output::set_pubkey_script(std::string&& value) {
  
  pubkey_script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Output.pubkey_script)
}
inline void Transaction_Output::set_pubkey_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Output.pubkey_script)
}
inline void Transaction_Output::set_pubkey_script(const void* value,
    size_t size) {
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Output.pubkey_script)
}
inline std::string* Transaction_Output::_internal_mutable_pubkey_script() {
  
  return pubkey_script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Output::release_pubkey_script() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Output.pubkey_script)
  return pubkey_script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Output::set_allocated_pubkey_script(std::string* pubkey_script) {
  if (pubkey_script != nullptr) {
    
  } else {
    
  }
  pubkey_script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey_script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Output.pubkey_script)
}

// string address = 4;
inline void Transaction_Output::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Output::address() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Output.address)
  return _internal_address();
}
inline void Transaction_Output::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Output.address)
}
inline std::string* Transaction_Output::mutable_address() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Output.address)
  return _internal_mutable_address();
}
inline const std::string& Transaction_Output::_internal_address() const {
  return address_.Get();
}
inline void Transaction_Output::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Output::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Output.address)
}
inline void Transaction_Output::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Output.address)
}
inline void Transaction_Output::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Output.address)
}
inline std::string* Transaction_Output::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Output::release_address() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Output.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Output::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Output.address)
}

// string script_class = 5;
inline void Transaction_Output::clear_script_class() {
  script_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Output::script_class() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Output.script_class)
  return _internal_script_class();
}
inline void Transaction_Output::set_script_class(const std::string& value) {
  _internal_set_script_class(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Output.script_class)
}
inline std::string* Transaction_Output::mutable_script_class() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Output.script_class)
  return _internal_mutable_script_class();
}
inline const std::string& Transaction_Output::_internal_script_class() const {
  return script_class_.Get();
}
inline void Transaction_Output::_internal_set_script_class(const std::string& value) {
  
  script_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Output::set_script_class(std::string&& value) {
  
  script_class_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Output.script_class)
}
inline void Transaction_Output::set_script_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Output.script_class)
}
inline void Transaction_Output::set_script_class(const char* value,
    size_t size) {
  
  script_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Output.script_class)
}
inline std::string* Transaction_Output::_internal_mutable_script_class() {
  
  return script_class_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Output::release_script_class() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Output.script_class)
  return script_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Output::set_allocated_script_class(std::string* script_class) {
  if (script_class != nullptr) {
    
  } else {
    
  }
  script_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Output.script_class)
}

// string disassembled_script = 6;
inline void Transaction_Output::clear_disassembled_script() {
  disassembled_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction_Output::disassembled_script() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.Output.disassembled_script)
  return _internal_disassembled_script();
}
inline void Transaction_Output::set_disassembled_script(const std::string& value) {
  _internal_set_disassembled_script(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.Output.disassembled_script)
}
inline std::string* Transaction_Output::mutable_disassembled_script() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.Output.disassembled_script)
  return _internal_mutable_disassembled_script();
}
inline const std::string& Transaction_Output::_internal_disassembled_script() const {
  return disassembled_script_.Get();
}
inline void Transaction_Output::_internal_set_disassembled_script(const std::string& value) {
  
  disassembled_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction_Output::set_disassembled_script(std::string&& value) {
  
  disassembled_script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.Output.disassembled_script)
}
inline void Transaction_Output::set_disassembled_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  disassembled_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.Output.disassembled_script)
}
inline void Transaction_Output::set_disassembled_script(const char* value,
    size_t size) {
  
  disassembled_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.Output.disassembled_script)
}
inline std::string* Transaction_Output::_internal_mutable_disassembled_script() {
  
  return disassembled_script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction_Output::release_disassembled_script() {
  // @@protoc_insertion_point(field_release:pb.Transaction.Output.disassembled_script)
  return disassembled_script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Output::set_allocated_disassembled_script(std::string* disassembled_script) {
  if (disassembled_script != nullptr) {
    
  } else {
    
  }
  disassembled_script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), disassembled_script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.Output.disassembled_script)
}

// -------------------------------------------------------------------

// Transaction

// bytes hash = 1;
inline void Transaction::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::hash() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.hash)
  return _internal_hash();
}
inline void Transaction::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.hash)
}
inline std::string* Transaction::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.hash)
  return _internal_mutable_hash();
}
inline const std::string& Transaction::_internal_hash() const {
  return hash_.Get();
}
inline void Transaction::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.hash)
}
inline void Transaction::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.hash)
}
inline void Transaction::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.hash)
}
inline std::string* Transaction::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_hash() {
  // @@protoc_insertion_point(field_release:pb.Transaction.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.hash)
}

// int32 version = 2;
inline void Transaction::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::version() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.version)
  return _internal_version();
}
inline void Transaction::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void Transaction::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.version)
}

// repeated .pb.Transaction.Input inputs = 3;
inline int Transaction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int Transaction::inputs_size() const {
  return _internal_inputs_size();
}
inline void Transaction::clear_inputs() {
  inputs_.Clear();
}
inline ::pb::Transaction_Input* Transaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input >*
Transaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.inputs)
  return &inputs_;
}
inline const ::pb::Transaction_Input& Transaction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::pb::Transaction_Input& Transaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.inputs)
  return _internal_inputs(index);
}
inline ::pb::Transaction_Input* Transaction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::pb::Transaction_Input* Transaction::add_inputs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input >&
Transaction::inputs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.inputs)
  return inputs_;
}

// repeated .pb.Transaction.Output outputs = 4;
inline int Transaction::_internal_outputs_size() const {
  return outputs_.size();
}
inline int Transaction::outputs_size() const {
  return _internal_outputs_size();
}
inline void Transaction::clear_outputs() {
  outputs_.Clear();
}
inline ::pb::Transaction_Output* Transaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Output >*
Transaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:pb.Transaction.outputs)
  return &outputs_;
}
inline const ::pb::Transaction_Output& Transaction::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::pb::Transaction_Output& Transaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:pb.Transaction.outputs)
  return _internal_outputs(index);
}
inline ::pb::Transaction_Output* Transaction::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::pb::Transaction_Output* Transaction::add_outputs() {
  // @@protoc_insertion_point(field_add:pb.Transaction.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Output >&
Transaction::outputs() const {
  // @@protoc_insertion_point(field_list:pb.Transaction.outputs)
  return outputs_;
}

// uint32 lock_time = 5;
inline void Transaction::clear_lock_time() {
  lock_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::_internal_lock_time() const {
  return lock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction::lock_time() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.lock_time)
  return _internal_lock_time();
}
inline void Transaction::_internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lock_time_ = value;
}
inline void Transaction::set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.lock_time)
}

// int32 size = 8;
inline void Transaction::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::size() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.size)
  return _internal_size();
}
inline void Transaction::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Transaction::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.size)
}

// int64 timestamp = 9;
inline void Transaction::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.timestamp)
  return _internal_timestamp();
}
inline void Transaction::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Transaction::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.timestamp)
}

// int32 confirmations = 10;
inline void Transaction::clear_confirmations() {
  confirmations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::confirmations() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.confirmations)
  return _internal_confirmations();
}
inline void Transaction::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confirmations_ = value;
}
inline void Transaction::set_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.confirmations)
}

// int32 block_height = 11;
inline void Transaction::clear_block_height() {
  block_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::block_height() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.block_height)
  return _internal_block_height();
}
inline void Transaction::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_height_ = value;
}
inline void Transaction::set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.block_height)
}

// bytes block_hash = 12;
inline void Transaction::clear_block_hash() {
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::block_hash() const {
  // @@protoc_insertion_point(field_get:pb.Transaction.block_hash)
  return _internal_block_hash();
}
inline void Transaction::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:pb.Transaction.block_hash)
}
inline std::string* Transaction::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:pb.Transaction.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& Transaction::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void Transaction::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_block_hash(std::string&& value) {
  
  block_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Transaction.block_hash)
}
inline void Transaction::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Transaction.block_hash)
}
inline void Transaction::set_block_hash(const void* value,
    size_t size) {
  
  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Transaction.block_hash)
}
inline std::string* Transaction::_internal_mutable_block_hash() {
  
  return block_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_block_hash() {
  // @@protoc_insertion_point(field_release:pb.Transaction.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Transaction.block_hash)
}

// -------------------------------------------------------------------

// MempoolTransaction

// .pb.Transaction transaction = 1;
inline bool MempoolTransaction::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool MempoolTransaction::has_transaction() const {
  return _internal_has_transaction();
}
inline void MempoolTransaction::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::pb::Transaction& MempoolTransaction::_internal_transaction() const {
  const ::pb::Transaction* p = transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction*>(
      &::pb::_Transaction_default_instance_);
}
inline const ::pb::Transaction& MempoolTransaction::transaction() const {
  // @@protoc_insertion_point(field_get:pb.MempoolTransaction.transaction)
  return _internal_transaction();
}
inline void MempoolTransaction::unsafe_arena_set_allocated_transaction(
    ::pb::Transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.MempoolTransaction.transaction)
}
inline ::pb::Transaction* MempoolTransaction::release_transaction() {
  
  ::pb::Transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Transaction* MempoolTransaction::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:pb.MempoolTransaction.transaction)
  
  ::pb::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::pb::Transaction* MempoolTransaction::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::pb::Transaction* MempoolTransaction::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:pb.MempoolTransaction.transaction)
  return _internal_mutable_transaction();
}
inline void MempoolTransaction::set_allocated_transaction(::pb::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:pb.MempoolTransaction.transaction)
}

// int64 added_time = 2;
inline void MempoolTransaction::clear_added_time() {
  added_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MempoolTransaction::_internal_added_time() const {
  return added_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MempoolTransaction::added_time() const {
  // @@protoc_insertion_point(field_get:pb.MempoolTransaction.added_time)
  return _internal_added_time();
}
inline void MempoolTransaction::_internal_set_added_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  added_time_ = value;
}
inline void MempoolTransaction::set_added_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_added_time(value);
  // @@protoc_insertion_point(field_set:pb.MempoolTransaction.added_time)
}

// int32 added_height = 3;
inline void MempoolTransaction::clear_added_height() {
  added_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MempoolTransaction::_internal_added_height() const {
  return added_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MempoolTransaction::added_height() const {
  // @@protoc_insertion_point(field_get:pb.MempoolTransaction.added_height)
  return _internal_added_height();
}
inline void MempoolTransaction::_internal_set_added_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  added_height_ = value;
}
inline void MempoolTransaction::set_added_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_added_height(value);
  // @@protoc_insertion_point(field_set:pb.MempoolTransaction.added_height)
}

// int64 fee = 4;
inline void MempoolTransaction::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MempoolTransaction::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MempoolTransaction::fee() const {
  // @@protoc_insertion_point(field_get:pb.MempoolTransaction.fee)
  return _internal_fee();
}
inline void MempoolTransaction::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void MempoolTransaction::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:pb.MempoolTransaction.fee)
}

// int64 fee_per_kb = 5;
inline void MempoolTransaction::clear_fee_per_kb() {
  fee_per_kb_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MempoolTransaction::_internal_fee_per_kb() const {
  return fee_per_kb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MempoolTransaction::fee_per_kb() const {
  // @@protoc_insertion_point(field_get:pb.MempoolTransaction.fee_per_kb)
  return _internal_fee_per_kb();
}
inline void MempoolTransaction::_internal_set_fee_per_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_per_kb_ = value;
}
inline void MempoolTransaction::set_fee_per_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_per_kb(value);
  // @@protoc_insertion_point(field_set:pb.MempoolTransaction.fee_per_kb)
}

// double starting_priority = 6;
inline void MempoolTransaction::clear_starting_priority() {
  starting_priority_ = 0;
}
inline double MempoolTransaction::_internal_starting_priority() const {
  return starting_priority_;
}
inline double MempoolTransaction::starting_priority() const {
  // @@protoc_insertion_point(field_get:pb.MempoolTransaction.starting_priority)
  return _internal_starting_priority();
}
inline void MempoolTransaction::_internal_set_starting_priority(double value) {
  
  starting_priority_ = value;
}
inline void MempoolTransaction::set_starting_priority(double value) {
  _internal_set_starting_priority(value);
  // @@protoc_insertion_point(field_set:pb.MempoolTransaction.starting_priority)
}

// -------------------------------------------------------------------

// UnspentOutput

// .pb.Transaction.Input.Outpoint outpoint = 1;
inline bool UnspentOutput::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool UnspentOutput::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void UnspentOutput::clear_outpoint() {
  if (GetArena() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::pb::Transaction_Input_Outpoint& UnspentOutput::_internal_outpoint() const {
  const ::pb::Transaction_Input_Outpoint* p = outpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Transaction_Input_Outpoint*>(
      &::pb::_Transaction_Input_Outpoint_default_instance_);
}
inline const ::pb::Transaction_Input_Outpoint& UnspentOutput::outpoint() const {
  // @@protoc_insertion_point(field_get:pb.UnspentOutput.outpoint)
  return _internal_outpoint();
}
inline void UnspentOutput::unsafe_arena_set_allocated_outpoint(
    ::pb::Transaction_Input_Outpoint* outpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outpoint_);
  }
  outpoint_ = outpoint;
  if (outpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.UnspentOutput.outpoint)
}
inline ::pb::Transaction_Input_Outpoint* UnspentOutput::release_outpoint() {
  
  ::pb::Transaction_Input_Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Transaction_Input_Outpoint* UnspentOutput::unsafe_arena_release_outpoint() {
  // @@protoc_insertion_point(field_release:pb.UnspentOutput.outpoint)
  
  ::pb::Transaction_Input_Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::pb::Transaction_Input_Outpoint* UnspentOutput::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Transaction_Input_Outpoint>(GetArena());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::pb::Transaction_Input_Outpoint* UnspentOutput::mutable_outpoint() {
  // @@protoc_insertion_point(field_mutable:pb.UnspentOutput.outpoint)
  return _internal_mutable_outpoint();
}
inline void UnspentOutput::set_allocated_outpoint(::pb::Transaction_Input_Outpoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outpoint);
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:pb.UnspentOutput.outpoint)
}

// bytes pubkey_script = 2;
inline void UnspentOutput::clear_pubkey_script() {
  pubkey_script_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnspentOutput::pubkey_script() const {
  // @@protoc_insertion_point(field_get:pb.UnspentOutput.pubkey_script)
  return _internal_pubkey_script();
}
inline void UnspentOutput::set_pubkey_script(const std::string& value) {
  _internal_set_pubkey_script(value);
  // @@protoc_insertion_point(field_set:pb.UnspentOutput.pubkey_script)
}
inline std::string* UnspentOutput::mutable_pubkey_script() {
  // @@protoc_insertion_point(field_mutable:pb.UnspentOutput.pubkey_script)
  return _internal_mutable_pubkey_script();
}
inline const std::string& UnspentOutput::_internal_pubkey_script() const {
  return pubkey_script_.Get();
}
inline void UnspentOutput::_internal_set_pubkey_script(const std::string& value) {
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnspentOutput::set_pubkey_script(std::string&& value) {
  
  pubkey_script_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.UnspentOutput.pubkey_script)
}
inline void UnspentOutput::set_pubkey_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.UnspentOutput.pubkey_script)
}
inline void UnspentOutput::set_pubkey_script(const void* value,
    size_t size) {
  
  pubkey_script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.UnspentOutput.pubkey_script)
}
inline std::string* UnspentOutput::_internal_mutable_pubkey_script() {
  
  return pubkey_script_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnspentOutput::release_pubkey_script() {
  // @@protoc_insertion_point(field_release:pb.UnspentOutput.pubkey_script)
  return pubkey_script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnspentOutput::set_allocated_pubkey_script(std::string* pubkey_script) {
  if (pubkey_script != nullptr) {
    
  } else {
    
  }
  pubkey_script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey_script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.UnspentOutput.pubkey_script)
}

// int64 value = 3;
inline void UnspentOutput::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnspentOutput::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnspentOutput::value() const {
  // @@protoc_insertion_point(field_get:pb.UnspentOutput.value)
  return _internal_value();
}
inline void UnspentOutput::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void UnspentOutput::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.UnspentOutput.value)
}

// bool is_coinbase = 4;
inline void UnspentOutput::clear_is_coinbase() {
  is_coinbase_ = false;
}
inline bool UnspentOutput::_internal_is_coinbase() const {
  return is_coinbase_;
}
inline bool UnspentOutput::is_coinbase() const {
  // @@protoc_insertion_point(field_get:pb.UnspentOutput.is_coinbase)
  return _internal_is_coinbase();
}
inline void UnspentOutput::_internal_set_is_coinbase(bool value) {
  
  is_coinbase_ = value;
}
inline void UnspentOutput::set_is_coinbase(bool value) {
  _internal_set_is_coinbase(value);
  // @@protoc_insertion_point(field_set:pb.UnspentOutput.is_coinbase)
}

// int32 block_height = 5;
inline void UnspentOutput::clear_block_height() {
  block_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnspentOutput::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnspentOutput::block_height() const {
  // @@protoc_insertion_point(field_get:pb.UnspentOutput.block_height)
  return _internal_block_height();
}
inline void UnspentOutput::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_height_ = value;
}
inline void UnspentOutput::set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:pb.UnspentOutput.block_height)
}

// -------------------------------------------------------------------

// TransactionFilter

// repeated string addresses = 1;
inline int TransactionFilter::_internal_addresses_size() const {
  return addresses_.size();
}
inline int TransactionFilter::addresses_size() const {
  return _internal_addresses_size();
}
inline void TransactionFilter::clear_addresses() {
  addresses_.Clear();
}
inline std::string* TransactionFilter::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:pb.TransactionFilter.addresses)
  return _internal_add_addresses();
}
inline const std::string& TransactionFilter::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& TransactionFilter::addresses(int index) const {
  // @@protoc_insertion_point(field_get:pb.TransactionFilter.addresses)
  return _internal_addresses(index);
}
inline std::string* TransactionFilter::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TransactionFilter.addresses)
  return addresses_.Mutable(index);
}
inline void TransactionFilter::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TransactionFilter.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void TransactionFilter::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.TransactionFilter.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void TransactionFilter::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TransactionFilter.addresses)
}
inline void TransactionFilter::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TransactionFilter.addresses)
}
inline std::string* TransactionFilter::_internal_add_addresses() {
  return addresses_.Add();
}
inline void TransactionFilter::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TransactionFilter.addresses)
}
inline void TransactionFilter::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.TransactionFilter.addresses)
}
inline void TransactionFilter::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TransactionFilter.addresses)
}
inline void TransactionFilter::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TransactionFilter.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionFilter::addresses() const {
  // @@protoc_insertion_point(field_list:pb.TransactionFilter.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionFilter::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:pb.TransactionFilter.addresses)
  return &addresses_;
}

// repeated .pb.Transaction.Input.Outpoint outpoints = 2;
inline int TransactionFilter::_internal_outpoints_size() const {
  return outpoints_.size();
}
inline int TransactionFilter::outpoints_size() const {
  return _internal_outpoints_size();
}
inline void TransactionFilter::clear_outpoints() {
  outpoints_.Clear();
}
inline ::pb::Transaction_Input_Outpoint* TransactionFilter::mutable_outpoints(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TransactionFilter.outpoints)
  return outpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input_Outpoint >*
TransactionFilter::mutable_outpoints() {
  // @@protoc_insertion_point(field_mutable_list:pb.TransactionFilter.outpoints)
  return &outpoints_;
}
inline const ::pb::Transaction_Input_Outpoint& TransactionFilter::_internal_outpoints(int index) const {
  return outpoints_.Get(index);
}
inline const ::pb::Transaction_Input_Outpoint& TransactionFilter::outpoints(int index) const {
  // @@protoc_insertion_point(field_get:pb.TransactionFilter.outpoints)
  return _internal_outpoints(index);
}
inline ::pb::Transaction_Input_Outpoint* TransactionFilter::_internal_add_outpoints() {
  return outpoints_.Add();
}
inline ::pb::Transaction_Input_Outpoint* TransactionFilter::add_outpoints() {
  // @@protoc_insertion_point(field_add:pb.TransactionFilter.outpoints)
  return _internal_add_outpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Transaction_Input_Outpoint >&
TransactionFilter::outpoints() const {
  // @@protoc_insertion_point(field_list:pb.TransactionFilter.outpoints)
  return outpoints_;
}

// repeated bytes data_elements = 3;
inline int TransactionFilter::_internal_data_elements_size() const {
  return data_elements_.size();
}
inline int TransactionFilter::data_elements_size() const {
  return _internal_data_elements_size();
}
inline void TransactionFilter::clear_data_elements() {
  data_elements_.Clear();
}
inline std::string* TransactionFilter::add_data_elements() {
  // @@protoc_insertion_point(field_add_mutable:pb.TransactionFilter.data_elements)
  return _internal_add_data_elements();
}
inline const std::string& TransactionFilter::_internal_data_elements(int index) const {
  return data_elements_.Get(index);
}
inline const std::string& TransactionFilter::data_elements(int index) const {
  // @@protoc_insertion_point(field_get:pb.TransactionFilter.data_elements)
  return _internal_data_elements(index);
}
inline std::string* TransactionFilter::mutable_data_elements(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TransactionFilter.data_elements)
  return data_elements_.Mutable(index);
}
inline void TransactionFilter::set_data_elements(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TransactionFilter.data_elements)
  data_elements_.Mutable(index)->assign(value);
}
inline void TransactionFilter::set_data_elements(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.TransactionFilter.data_elements)
  data_elements_.Mutable(index)->assign(std::move(value));
}
inline void TransactionFilter::set_data_elements(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_elements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TransactionFilter.data_elements)
}
inline void TransactionFilter::set_data_elements(int index, const void* value, size_t size) {
  data_elements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TransactionFilter.data_elements)
}
inline std::string* TransactionFilter::_internal_add_data_elements() {
  return data_elements_.Add();
}
inline void TransactionFilter::add_data_elements(const std::string& value) {
  data_elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TransactionFilter.data_elements)
}
inline void TransactionFilter::add_data_elements(std::string&& value) {
  data_elements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.TransactionFilter.data_elements)
}
inline void TransactionFilter::add_data_elements(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_elements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TransactionFilter.data_elements)
}
inline void TransactionFilter::add_data_elements(const void* value, size_t size) {
  data_elements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TransactionFilter.data_elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionFilter::data_elements() const {
  // @@protoc_insertion_point(field_list:pb.TransactionFilter.data_elements)
  return data_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionFilter::mutable_data_elements() {
  // @@protoc_insertion_point(field_mutable_list:pb.TransactionFilter.data_elements)
  return &data_elements_;
}

// bool all_transactions = 4;
inline void TransactionFilter::clear_all_transactions() {
  all_transactions_ = false;
}
inline bool TransactionFilter::_internal_all_transactions() const {
  return all_transactions_;
}
inline bool TransactionFilter::all_transactions() const {
  // @@protoc_insertion_point(field_get:pb.TransactionFilter.all_transactions)
  return _internal_all_transactions();
}
inline void TransactionFilter::_internal_set_all_transactions(bool value) {
  
  all_transactions_ = value;
}
inline void TransactionFilter::set_all_transactions(bool value) {
  _internal_set_all_transactions(value);
  // @@protoc_insertion_point(field_set:pb.TransactionFilter.all_transactions)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::GetBlockchainInfoResponse_BitcoinNet> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::GetBlockchainInfoResponse_BitcoinNet>() {
  return ::pb::GetBlockchainInfoResponse_BitcoinNet_descriptor();
}
template <> struct is_proto_enum< ::pb::BlockNotification_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::BlockNotification_Type>() {
  return ::pb::BlockNotification_Type_descriptor();
}
template <> struct is_proto_enum< ::pb::TransactionNotification_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TransactionNotification_Type>() {
  return ::pb::TransactionNotification_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bchrpc_2eproto
